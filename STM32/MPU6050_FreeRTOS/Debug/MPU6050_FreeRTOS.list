
MPU6050_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800c440  0800c440  0000d440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca1c  0800ca1c  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca1c  0800ca1c  0000da1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca24  0800ca24  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca24  0800ca24  0000da24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca28  0800ca28  0000da28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ca2c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bdc  200001d8  0800cc04  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001db4  0800cc04  0000edb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e87c  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000453c  00000000  00000000  0002ca84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00030fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001534  00000000  00000000  00032b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e4a  00000000  00000000  0003404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020136  00000000  00000000  00058e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8e4a  00000000  00000000  00078fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151e16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087e8  00000000  00000000  00151e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015a644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c424 	.word	0x0800c424

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c424 	.word	0x0800c424

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	1dbb      	adds	r3, r7, #6
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	21d0      	movs	r1, #208	@ 0xd0
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <MPU6050_Writebyte+0x34>)
 800100a:	f001 fa03 	bl	8002414 <HAL_I2C_Mem_Write>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000230 	.word	0x20000230

0800101c <MPU6050_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af04      	add	r7, sp, #16
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	b29a      	uxth	r2, r3
 800102c:	2301      	movs	r3, #1
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	2301      	movs	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	21d0      	movs	r1, #208	@ 0xd0
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <MPU6050_Readbyte+0x30>)
 800103e:	f001 fafd 	bl	800263c <HAL_I2C_Mem_Read>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000230 	.word	0x20000230

08001050 <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af04      	add	r7, sp, #16
 8001056:	4603      	mov	r3, r0
 8001058:	603a      	str	r2, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	460b      	mov	r3, r1
 800105e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	b29a      	uxth	r2, r3
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	b29b      	uxth	r3, r3
 8001068:	2101      	movs	r1, #1
 800106a:	9102      	str	r1, [sp, #8]
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	21d0      	movs	r1, #208	@ 0xd0
 8001076:	4803      	ldr	r0, [pc, #12]	@ (8001084 <MPU6050_Readbytes+0x34>)
 8001078:	f001 fae0 	bl	800263c <HAL_I2C_Mem_Read>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000230 	.word	0x20000230

08001088 <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
	HAL_Delay(50);
 800108e:	2032      	movs	r0, #50	@ 0x32
 8001090:	f000 fe6a 	bl	8001d68 <HAL_Delay>
	uint8_t who_am_i = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	707b      	strb	r3, [r7, #1]
	printf("Checking MPU6050...\n");
 8001098:	484d      	ldr	r0, [pc, #308]	@ (80011d0 <MPU6050_Initialization+0x148>)
 800109a:	f008 fc21 	bl	80098e0 <puts>

	MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 800109e:	1c7b      	adds	r3, r7, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	2075      	movs	r0, #117	@ 0x75
 80010a4:	f7ff ffba 	bl	800101c <MPU6050_Readbyte>
	if(who_am_i == 0x68)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b68      	cmp	r3, #104	@ 0x68
 80010ac:	d105      	bne.n	80010ba <MPU6050_Initialization+0x32>
	{
		printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 80010ae:	787b      	ldrb	r3, [r7, #1]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4848      	ldr	r0, [pc, #288]	@ (80011d4 <MPU6050_Initialization+0x14c>)
 80010b4:	f008 fbac 	bl	8009810 <iprintf>
 80010b8:	e00f      	b.n	80010da <MPU6050_Initialization+0x52>
	}
	else
	{
		printf("ERROR!\n");
 80010ba:	4847      	ldr	r0, [pc, #284]	@ (80011d8 <MPU6050_Initialization+0x150>)
 80010bc:	f008 fc10 	bl	80098e0 <puts>
		printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4845      	ldr	r0, [pc, #276]	@ (80011dc <MPU6050_Initialization+0x154>)
 80010c6:	f008 fba3 	bl	8009810 <iprintf>
		while(1)
		{
			printf("who am i error. Can not recognize mpu6050\n");
 80010ca:	4845      	ldr	r0, [pc, #276]	@ (80011e0 <MPU6050_Initialization+0x158>)
 80010cc:	f008 fc08 	bl	80098e0 <puts>
			HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f000 fe49 	bl	8001d68 <HAL_Delay>
			printf("who am i error. Can not recognize mpu6050\n");
 80010d6:	bf00      	nop
 80010d8:	e7f7      	b.n	80010ca <MPU6050_Initialization+0x42>
		}
	}

	//Reset the whole module before initialization
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	206b      	movs	r0, #107	@ 0x6b
 80010de:	f7ff ff81 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(100);
 80010e2:	2064      	movs	r0, #100	@ 0x64
 80010e4:	f000 fe40 	bl	8001d68 <HAL_Delay>

	//Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU6050*/
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 80010e8:	2100      	movs	r1, #0
 80010ea:	206b      	movs	r0, #107	@ 0x6b
 80010ec:	f7ff ff7a 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 80010f0:	2032      	movs	r0, #50	@ 0x32
 80010f2:	f000 fe39 	bl	8001d68 <HAL_Delay>

	//Sample rate divider
	/*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
	//	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39); // Sample Rate = 200Hz
 80010f6:	2127      	movs	r1, #39	@ 0x27
 80010f8:	2019      	movs	r0, #25
 80010fa:	f7ff ff73 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 80010fe:	2032      	movs	r0, #50	@ 0x32
 8001100:	f000 fe32 	bl	8001d68 <HAL_Delay>

	//FSYNC and DLPF setting
	/*DLPF is set to 0*/
	MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 8001104:	2100      	movs	r1, #0
 8001106:	201a      	movs	r0, #26
 8001108:	f7ff ff6c 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 800110c:	2032      	movs	r0, #50	@ 0x32
 800110e:	f000 fe2b 	bl	8001d68 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x0;
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]
	MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4619      	mov	r1, r3
 800111e:	201b      	movs	r0, #27
 8001120:	f7ff ff60 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 8001124:	2032      	movs	r0, #50	@ 0x32
 8001126:	f000 fe1f 	bl	8001d68 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x0;
 800112a:	2300      	movs	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]
	MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4619      	mov	r1, r3
 8001136:	201c      	movs	r0, #28
 8001138:	f7ff ff54 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 800113c:	2032      	movs	r0, #50	@ 0x32
 800113e:	f000 fe13 	bl	8001d68 <HAL_Delay>

	MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 8001142:	79ba      	ldrb	r2, [r7, #6]
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f8a1 	bl	8001290 <MPU6050_Get_LSB_Sensitivity>
	printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);
 800114e:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <MPU6050_Initialization+0x15c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f9f8 	bl	8000548 <__aeabi_f2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <MPU6050_Initialization+0x160>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	e9cd 2300 	strd	r2, r3, [sp]
 800116e:	4622      	mov	r2, r4
 8001170:	462b      	mov	r3, r5
 8001172:	481e      	ldr	r0, [pc, #120]	@ (80011ec <MPU6050_Initialization+0x164>)
 8001174:	f008 fb4c 	bl	8009810 <iprintf>

	//Interrupt PIN setting
	uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 8001178:	2300      	movs	r3, #0
 800117a:	717b      	strb	r3, [r7, #5]
	uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 800117c:	2300      	movs	r3, #0
 800117e:	713b      	strb	r3, [r7, #4]
	uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 8001180:	2301      	movs	r3, #1
 8001182:	70fb      	strb	r3, [r7, #3]
	MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	01db      	lsls	r3, r3, #7
 8001188:	b25a      	sxtb	r2, r3
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	015b      	lsls	r3, r3, #5
 800118e:	b25b      	sxtb	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b25a      	sxtb	r2, r3
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	b25b      	sxtb	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b25b      	sxtb	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	2037      	movs	r0, #55	@ 0x37
 80011a4:	f7ff ff1e 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 80011a8:	2032      	movs	r0, #50	@ 0x32
 80011aa:	f000 fddd 	bl	8001d68 <HAL_Delay>

	//Interrupt enable setting
	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 80011ae:	2301      	movs	r3, #1
 80011b0:	70bb      	strb	r3, [r7, #2]
	MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 80011b2:	78bb      	ldrb	r3, [r7, #2]
 80011b4:	4619      	mov	r1, r3
 80011b6:	2038      	movs	r0, #56	@ 0x38
 80011b8:	f7ff ff14 	bl	8000fe4 <MPU6050_Writebyte>
	HAL_Delay(50);
 80011bc:	2032      	movs	r0, #50	@ 0x32
 80011be:	f000 fdd3 	bl	8001d68 <HAL_Delay>

	printf("MPU6050 setting is finished\n");
 80011c2:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <MPU6050_Initialization+0x168>)
 80011c4:	f008 fb8c 	bl	80098e0 <puts>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	0800c440 	.word	0x0800c440
 80011d4:	0800c454 	.word	0x0800c454
 80011d8:	0800c474 	.word	0x0800c474
 80011dc:	0800c47c 	.word	0x0800c47c
 80011e0:	0800c4a8 	.word	0x0800c4a8
 80011e4:	20000224 	.word	0x20000224
 80011e8:	20000220 	.word	0x20000220
 80011ec:	0800c4d4 	.word	0x0800c4d4
 80011f0:	0800c508 	.word	0x0800c508

080011f4 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	461a      	mov	r2, r3
 8001202:	210e      	movs	r1, #14
 8001204:	203b      	movs	r0, #59	@ 0x3b
 8001206:	f7ff ff23 	bl	8001050 <MPU6050_Readbytes>

	mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 800120a:	7a3b      	ldrb	r3, [r7, #8]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	7a7b      	ldrb	r3, [r7, #9]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21a      	sxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	801a      	strh	r2, [r3, #0]
	mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 800121c:	7abb      	ldrb	r3, [r7, #10]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7afb      	ldrb	r3, [r7, #11]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21a      	sxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	805a      	strh	r2, [r3, #2]
	mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21a      	sxth	r2, r3
 8001234:	7b7b      	ldrb	r3, [r7, #13]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	809a      	strh	r2, [r3, #4]

	mpu6050->temperature_raw = (data[6] << 8) | data[7];
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21a      	sxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	80da      	strh	r2, [r3, #6]

	mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 8001252:	7c3b      	ldrb	r3, [r7, #16]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7c7b      	ldrb	r3, [r7, #17]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21a      	sxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	811a      	strh	r2, [r3, #8]
	mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 8001264:	7cbb      	ldrb	r3, [r7, #18]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7cfb      	ldrb	r3, [r7, #19]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21a      	sxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	815a      	strh	r2, [r3, #10]
	mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 8001276:	7d3b      	ldrb	r3, [r7, #20]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	7d7b      	ldrb	r3, [r7, #21]
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21a      	sxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	819a      	strh	r2, [r3, #12]
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
	switch(FS_SCALE_GYRO)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d81a      	bhi.n	80012dc <MPU6050_Get_LSB_Sensitivity+0x4c>
 80012a6:	a201      	add	r2, pc, #4	@ (adr r2, 80012ac <MPU6050_Get_LSB_Sensitivity+0x1c>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012c5 	.word	0x080012c5
 80012b4:	080012cd 	.word	0x080012cd
 80012b8:	080012d5 	.word	0x080012d5
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80012be:	4a1c      	ldr	r2, [pc, #112]	@ (8001330 <MPU6050_Get_LSB_Sensitivity+0xa0>)
 80012c0:	601a      	str	r2, [r3, #0]
		break;
 80012c2:	e00b      	b.n	80012dc <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80012c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001334 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 80012c8:	601a      	str	r2, [r3, #0]
		break;
 80012ca:	e007      	b.n	80012dc <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80012ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001338 <MPU6050_Get_LSB_Sensitivity+0xa8>)
 80012d0:	601a      	str	r2, [r3, #0]
		break;
 80012d2:	e003      	b.n	80012dc <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 80012d4:	4b15      	ldr	r3, [pc, #84]	@ (800132c <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80012d6:	4a19      	ldr	r2, [pc, #100]	@ (800133c <MPU6050_Get_LSB_Sensitivity+0xac>)
 80012d8:	601a      	str	r2, [r3, #0]
		break;
 80012da:	bf00      	nop
	}
	switch(FS_SCALE_ACC)
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d81e      	bhi.n	8001320 <MPU6050_Get_LSB_Sensitivity+0x90>
 80012e2:	a201      	add	r2, pc, #4	@ (adr r2, 80012e8 <MPU6050_Get_LSB_Sensitivity+0x58>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	08001303 	.word	0x08001303
 80012f0:	0800130d 	.word	0x0800130d
 80012f4:	08001317 	.word	0x08001317
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 80012fa:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80012fe:	601a      	str	r2, [r3, #0]
		break;
 8001300:	e00e      	b.n	8001320 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001304:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001308:	601a      	str	r2, [r3, #0]
		break;
 800130a:	e009      	b.n	8001320 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800130e:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001312:	601a      	str	r2, [r3, #0]
		break;
 8001314:	e004      	b.n	8001320 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001318:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 800131c:	601a      	str	r2, [r3, #0]
		break;
 800131e:	bf00      	nop
	}
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	20000224 	.word	0x20000224
 8001330:	43030000 	.word	0x43030000
 8001334:	42830000 	.word	0x42830000
 8001338:	42033333 	.word	0x42033333
 800133c:	41833333 	.word	0x41833333
 8001340:	20000220 	.word	0x20000220
 8001344:	00000000 	.word	0x00000000

08001348 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	//printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800135e:	4b3c      	ldr	r3, [pc, #240]	@ (8001450 <MPU6050_DataConvert+0x108>)
 8001360:	ed93 7a00 	vldr	s14, [r3]
 8001364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800137c:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <MPU6050_DataConvert+0x108>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800139a:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <MPU6050_DataConvert+0x108>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a06 	vstr	s15, [r3, #24]

	mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001454 <MPU6050_DataConvert+0x10c>
 80013bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013c0:	ee16 0a90 	vmov	r0, s13
 80013c4:	f7ff f8c0 	bl	8000548 <__aeabi_f2d>
 80013c8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001448 <MPU6050_DataConvert+0x100>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7fe ff5d 	bl	800028c <__adddf3>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fc05 	bl	8000be8 <__aeabi_d2f>
 80013de:	4602      	mov	r2, r0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	61da      	str	r2, [r3, #28]

	mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MPU6050_DataConvert+0x110>)
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edc3 7a08 	vstr	s15, [r3, #32]
	mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MPU6050_DataConvert+0x110>)
 8001412:	ed93 7a00 	vldr	s14, [r3]
 8001416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <MPU6050_DataConvert+0x110>)
 8001430:	ed93 7a00 	vldr	s14, [r3]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	0a3d70a4 	.word	0x0a3d70a4
 800144c:	404243d7 	.word	0x404243d7
 8001450:	20000220 	.word	0x20000220
 8001454:	43aa0000 	.word	0x43aa0000
 8001458:	20000224 	.word	0x20000224

0800145c <MPU6050_DataReady>:


int MPU6050_DataReady(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
			return 1;
		}
	}
	return 0;
	 */
	return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
 8001460:	2120      	movs	r1, #32
 8001462:	4803      	ldr	r0, [pc, #12]	@ (8001470 <MPU6050_DataReady+0x14>)
 8001464:	f000 fef0 	bl	8002248 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	48000400 	.word	0x48000400

08001474 <MPU6050_ProcessData>:

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	MPU6050_Get6AxisRawData(mpu6050);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff feb9 	bl	80011f4 <MPU6050_Get6AxisRawData>
	MPU6050_DataConvert(mpu6050);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff60 	bl	8001348 <MPU6050_DataConvert>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MPU_Task */
  MPU_TaskHandle = osThreadNew(StartMPUTask, NULL, &MPU_Task_attributes);
 8001494:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <MX_FREERTOS_Init+0x28>)
 8001496:	2100      	movs	r1, #0
 8001498:	4808      	ldr	r0, [pc, #32]	@ (80014bc <MX_FREERTOS_Init+0x2c>)
 800149a:	f003 feb1 	bl	8005200 <osThreadNew>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <MX_FREERTOS_Init+0x30>)
 80014a2:	6013      	str	r3, [r2, #0]

  /* creation of LED_dummyTask */
  LED_dummyTaskHandle = osThreadNew(StartLEDDummyTask, NULL, &LED_dummyTask_attributes);
 80014a4:	4a07      	ldr	r2, [pc, #28]	@ (80014c4 <MX_FREERTOS_Init+0x34>)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4807      	ldr	r0, [pc, #28]	@ (80014c8 <MX_FREERTOS_Init+0x38>)
 80014aa:	f003 fea9 	bl	8005200 <osThreadNew>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <MX_FREERTOS_Init+0x3c>)
 80014b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800c564 	.word	0x0800c564
 80014bc:	080014d1 	.word	0x080014d1
 80014c0:	20000228 	.word	0x20000228
 80014c4:	0800c588 	.word	0x0800c588
 80014c8:	08001515 	.word	0x08001515
 80014cc:	2000022c 	.word	0x2000022c

080014d0 <StartMPUTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMPUTask */
void StartMPUTask(void *argument)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMPUTask */
  /* Infinite loop */
  for(;;)
  {
	  if(MPU6050_DataReady() == 1)
 80014d8:	f7ff ffc0 	bl	800145c <MPU6050_DataReady>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d110      	bne.n	8001504 <StartMPUTask+0x34>
		{
			MPU6050_ProcessData(&MPU6050);
 80014e2:	480a      	ldr	r0, [pc, #40]	@ (800150c <StartMPUTask+0x3c>)
 80014e4:	f7ff ffc6 	bl	8001474 <MPU6050_ProcessData>
			//printf("%f, %f, %f\n", MPU6050.acc_x, MPU6050.acc_y, MPU6050.acc_z);
			//printf("%f, %f, %f\n", MPU6050.gyro_x, MPU6050.gyro_y, MPU6050.gyro_z);
			printf("%d, %d, %d\n", MPU6050.acc_x_raw, MPU6050.acc_y_raw, MPU6050.acc_z_raw);
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <StartMPUTask+0x3c>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <StartMPUTask+0x3c>)
 80014f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <StartMPUTask+0x3c>)
 80014fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014fe:	4804      	ldr	r0, [pc, #16]	@ (8001510 <StartMPUTask+0x40>)
 8001500:	f008 f986 	bl	8009810 <iprintf>
		}
    osDelay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f003 ff0d 	bl	8005324 <osDelay>
	  if(MPU6050_DataReady() == 1)
 800150a:	e7e5      	b.n	80014d8 <StartMPUTask+0x8>
 800150c:	200001f4 	.word	0x200001f4
 8001510:	0800c540 	.word	0x0800c540

08001514 <StartLEDDummyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDDummyTask */
void StartLEDDummyTask(void *argument)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDDummyTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_3); // PB3 is the on board LED for Nucleo L432KC
 800151c:	2108      	movs	r1, #8
 800151e:	4804      	ldr	r0, [pc, #16]	@ (8001530 <StartLEDDummyTask+0x1c>)
 8001520:	f000 fec2 	bl	80022a8 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001524:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001528:	f003 fefc 	bl	8005324 <osDelay>
	HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_3); // PB3 is the on board LED for Nucleo L432KC
 800152c:	bf00      	nop
 800152e:	e7f5      	b.n	800151c <StartLEDDummyTask+0x8>
 8001530:	48000400 	.word	0x48000400

08001534 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <MX_GPIO_Init+0xa4>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a22      	ldr	r2, [pc, #136]	@ (80015d8 <MX_GPIO_Init+0xa4>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <MX_GPIO_Init+0xa4>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <MX_GPIO_Init+0xa4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <MX_GPIO_Init+0xa4>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <MX_GPIO_Init+0xa4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <MX_GPIO_Init+0xa4>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a16      	ldr	r2, [pc, #88]	@ (80015d8 <MX_GPIO_Init+0xa4>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_GPIO_Init+0xa4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2108      	movs	r1, #8
 8001596:	4811      	ldr	r0, [pc, #68]	@ (80015dc <MX_GPIO_Init+0xa8>)
 8001598:	f000 fe6e 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800159c:	2308      	movs	r3, #8
 800159e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4619      	mov	r1, r3
 80015b2:	480a      	ldr	r0, [pc, #40]	@ (80015dc <MX_GPIO_Init+0xa8>)
 80015b4:	f000 fcde 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015b8:	2320      	movs	r3, #32
 80015ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4619      	mov	r1, r3
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_GPIO_Init+0xa8>)
 80015cc:	f000 fcd2 	bl	8001f74 <HAL_GPIO_Init>

}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48000400 	.word	0x48000400

080015e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <MX_I2C1_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001658 <MX_I2C1_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_I2C1_Init+0x74>)
 80015ec:	4a1b      	ldr	r2, [pc, #108]	@ (800165c <MX_I2C1_Init+0x7c>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <MX_I2C1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_I2C1_Init+0x74>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <MX_I2C1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_I2C1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <MX_I2C1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161a:	480e      	ldr	r0, [pc, #56]	@ (8001654 <MX_I2C1_Init+0x74>)
 800161c:	f000 fe5e 	bl	80022dc <HAL_I2C_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001626:	f000 f8fd 	bl	8001824 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	4809      	ldr	r0, [pc, #36]	@ (8001654 <MX_I2C1_Init+0x74>)
 800162e:	f001 fbe1 	bl	8002df4 <HAL_I2CEx_ConfigAnalogFilter>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001638:	f000 f8f4 	bl	8001824 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_I2C1_Init+0x74>)
 8001640:	f001 fc23 	bl	8002e8a <HAL_I2CEx_ConfigDigitalFilter>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800164a:	f000 f8eb 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000230 	.word	0x20000230
 8001658:	40005400 	.word	0x40005400
 800165c:	0060112f 	.word	0x0060112f

08001660 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b09e      	sub	sp, #120	@ 0x78
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	2254      	movs	r2, #84	@ 0x54
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f008 f947 	bl	8009914 <memset>
  if(i2cHandle->Instance==I2C1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1f      	ldr	r2, [pc, #124]	@ (8001708 <HAL_I2C_MspInit+0xa8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d137      	bne.n	8001700 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001690:	2340      	movs	r3, #64	@ 0x40
 8001692:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001694:	2300      	movs	r3, #0
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fb1f 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016a8:	f000 f8bc 	bl	8001824 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <HAL_I2C_MspInit+0xac>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b0:	4a16      	ldr	r2, [pc, #88]	@ (800170c <HAL_I2C_MspInit+0xac>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <HAL_I2C_MspInit+0xac>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ca:	2312      	movs	r3, #18
 80016cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d6:	2304      	movs	r3, #4
 80016d8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016de:	4619      	mov	r1, r3
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e4:	f000 fc46 	bl	8001f74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_I2C_MspInit+0xac>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	4a07      	ldr	r2, [pc, #28]	@ (800170c <HAL_I2C_MspInit+0xac>)
 80016ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_I2C_MspInit+0xac>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001700:	bf00      	nop
 8001702:	3778      	adds	r7, #120	@ 0x78
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40005400 	.word	0x40005400
 800170c:	40021000 	.word	0x40021000

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001714:	f000 faef 	bl	8001cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001718:	f000 f810 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f7ff ff0a 	bl	8001534 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001720:	f000 fa26 	bl	8001b70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001724:	f7ff ff5c 	bl	80015e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Initialization();
 8001728:	f7ff fcae 	bl	8001088 <MPU6050_Initialization>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800172c:	f003 fd1e 	bl	800516c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001730:	f7ff feae 	bl	8001490 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001734:	f003 fd3e 	bl	80051b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <main+0x28>

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b096      	sub	sp, #88	@ 0x58
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2244      	movs	r2, #68	@ 0x44
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f008 f8e2 	bl	8009914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800175e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001762:	f001 fbfd 	bl	8002f60 <HAL_PWREx_ControlVoltageScaling>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800176c:	f000 f85a 	bl	8001824 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001770:	f001 fbd8 	bl	8002f24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001774:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <SystemClock_Config+0xc0>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	4a20      	ldr	r2, [pc, #128]	@ (80017fc <SystemClock_Config+0xc0>)
 800177c:	f023 0318 	bic.w	r3, r3, #24
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001784:	2314      	movs	r3, #20
 8001786:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001788:	2301      	movs	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800178c:	2301      	movs	r3, #1
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001794:	2360      	movs	r3, #96	@ 0x60
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001798:	2302      	movs	r3, #2
 800179a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800179c:	2301      	movs	r3, #1
 800179e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80017a4:	2310      	movs	r3, #16
 80017a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017a8:	2307      	movs	r3, #7
 80017aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 fc27 	bl	800300c <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017c4:	f000 f82e 	bl	8001824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c8:	230f      	movs	r3, #15
 80017ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017cc:	2303      	movs	r3, #3
 80017ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	2101      	movs	r1, #1
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 f827 	bl	8003834 <HAL_RCC_ClockConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017ec:	f000 f81a 	bl	8001824 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80017f0:	f002 fc6c 	bl	80040cc <HAL_RCCEx_EnableMSIPLLMode>
}
 80017f4:	bf00      	nop
 80017f6:	3758      	adds	r7, #88	@ 0x58
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000

08001800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001812:	f000 fa89 	bl	8001d28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40001000 	.word	0x40001000

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <Error_Handler+0x8>

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_MspInit+0x4c>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	4a10      	ldr	r2, [pc, #64]	@ (800187c <HAL_MspInit+0x4c>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6613      	str	r3, [r2, #96]	@ 0x60
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_MspInit+0x4c>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_MspInit+0x4c>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_MspInit+0x4c>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	6593      	str	r3, [r2, #88]	@ 0x58
 800185a:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_MspInit+0x4c>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	210f      	movs	r1, #15
 800186a:	f06f 0001 	mvn.w	r0, #1
 800186e:	f000 fb57 	bl	8001f20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08e      	sub	sp, #56	@ 0x38
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800188e:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <HAL_InitTick+0xe0>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001892:	4a33      	ldr	r2, [pc, #204]	@ (8001960 <HAL_InitTick+0xe0>)
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	6593      	str	r3, [r2, #88]	@ 0x58
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <HAL_InitTick+0xe0>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018a6:	f107 0210 	add.w	r2, r7, #16
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 f983 	bl	8003bbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018c0:	f002 f950 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80018c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80018c6:	e004      	b.n	80018d2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018c8:	f002 f94c 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80018cc:	4603      	mov	r3, r0
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018d4:	4a23      	ldr	r2, [pc, #140]	@ (8001964 <HAL_InitTick+0xe4>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0c9b      	lsrs	r3, r3, #18
 80018dc:	3b01      	subs	r3, #1
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018e0:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <HAL_InitTick+0xe8>)
 80018e2:	4a22      	ldr	r2, [pc, #136]	@ (800196c <HAL_InitTick+0xec>)
 80018e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_InitTick+0xe8>)
 80018e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001968 <HAL_InitTick+0xe8>)
 80018f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <HAL_InitTick+0xe8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <HAL_InitTick+0xe8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_InitTick+0xe8>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001906:	4818      	ldr	r0, [pc, #96]	@ (8001968 <HAL_InitTick+0xe8>)
 8001908:	f002 fce2 	bl	80042d0 <HAL_TIM_Base_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001912:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001916:	2b00      	cmp	r3, #0
 8001918:	d11b      	bne.n	8001952 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800191a:	4813      	ldr	r0, [pc, #76]	@ (8001968 <HAL_InitTick+0xe8>)
 800191c:	f002 fd3a 	bl	8004394 <HAL_TIM_Base_Start_IT>
 8001920:	4603      	mov	r3, r0
 8001922:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001926:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800192a:	2b00      	cmp	r3, #0
 800192c:	d111      	bne.n	8001952 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800192e:	2036      	movs	r0, #54	@ 0x36
 8001930:	f000 fb12 	bl	8001f58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	d808      	bhi.n	800194c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800193a:	2200      	movs	r2, #0
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	2036      	movs	r0, #54	@ 0x36
 8001940:	f000 faee 	bl	8001f20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001944:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <HAL_InitTick+0xf0>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e002      	b.n	8001952 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001952:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001956:	4618      	mov	r0, r3
 8001958:	3738      	adds	r7, #56	@ 0x38
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	431bde83 	.word	0x431bde83
 8001968:	20000284 	.word	0x20000284
 800196c:	40001000 	.word	0x40001000
 8001970:	20000004 	.word	0x20000004

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <NMI_Handler+0x4>

0800197c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <MemManage_Handler+0x4>

0800198c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <UsageFault_Handler+0x4>

0800199c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <TIM6_DAC_IRQHandler+0x10>)
 80019b2:	f002 fd43 	bl	800443c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000284 	.word	0x20000284

080019c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_kill>:

int _kill(int pid, int sig)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019da:	f007 ffa7 	bl	800992c <__errno>
 80019de:	4603      	mov	r3, r0
 80019e0:	2216      	movs	r2, #22
 80019e2:	601a      	str	r2, [r3, #0]
  return -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_exit>:

void _exit (int status)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffe7 	bl	80019d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a02:	bf00      	nop
 8001a04:	e7fd      	b.n	8001a02 <_exit+0x12>

08001a06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e00a      	b.n	8001a2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a18:	f3af 8000 	nop.w
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	b2ca      	uxtb	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbf0      	blt.n	8001a18 <_read+0x12>
  }

  return len;
 8001a36:	687b      	ldr	r3, [r7, #4]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e009      	b.n	8001a66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbf1      	blt.n	8001a52 <_write+0x12>
  }
  return len;
 8001a6e:	687b      	ldr	r3, [r7, #4]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_close>:

int _close(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_isatty>:

int _isatty(int file)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f007 ff0c 	bl	800992c <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000c000 	.word	0x2000c000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	200002d0 	.word	0x200002d0
 8001b48:	20001db8 	.word	0x20001db8

08001b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <SystemInit+0x20>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b56:	4a05      	ldr	r2, [pc, #20]	@ (8001b6c <SystemInit+0x20>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b76:	4a15      	ldr	r2, [pc, #84]	@ (8001bcc <MX_USART2_UART_Init+0x5c>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001bb4:	f002 fe00 	bl	80047b8 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f7ff fe31 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200002d4 	.word	0x200002d4
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b09e      	sub	sp, #120	@ 0x78
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	2254      	movs	r2, #84	@ 0x54
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f007 fe8f 	bl	8009914 <memset>
  if(uartHandle->Instance==USART2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a28      	ldr	r2, [pc, #160]	@ (8001c9c <HAL_UART_MspInit+0xcc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d148      	bne.n	8001c92 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c00:	2302      	movs	r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 f867 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c18:	f7ff fe04 	bl	8001824 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c38:	4a19      	ldr	r2, [pc, #100]	@ (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c40:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6a:	f000 f983 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c80:	2303      	movs	r3, #3
 8001c82:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8e:	f000 f971 	bl	8001f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c92:	bf00      	nop
 8001c94:	3778      	adds	r7, #120	@ 0x78
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca8:	f7ff ff50 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	@ (8001ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <LoopForever+0xe>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf0 <LoopForever+0x16>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f007 fe31 	bl	8009938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cd6:	f7ff fd1b 	bl	8001710 <main>

08001cda <LoopForever>:

LoopForever:
    b LoopForever
 8001cda:	e7fe      	b.n	8001cda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cdc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ce8:	0800ca2c 	.word	0x0800ca2c
  ldr r2, =_sbss
 8001cec:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001cf0:	20001db4 	.word	0x20001db4

08001cf4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC1_IRQHandler>

08001cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f902 	bl	8001f0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d06:	200f      	movs	r0, #15
 8001d08:	f7ff fdba 	bl	8001880 <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	e001      	b.n	8001d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d18:	f7ff fd8a 	bl	8001830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	2000035c 	.word	0x2000035c

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	2000035c 	.word	0x2000035c

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000008 	.word	0x20000008

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	@ (8001e4c <__NVIC_EnableIRQ+0x38>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	@ (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	@ (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	@ 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	@ 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ff4c 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f32:	f7ff ff61 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	6978      	ldr	r0, [r7, #20]
 8001f3e:	f7ff ffb1 	bl	8001ea4 <NVIC_EncodePriority>
 8001f42:	4602      	mov	r2, r0
 8001f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff80 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f50:	bf00      	nop
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff54 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	e148      	b.n	8002216 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 813a 	beq.w	8002210 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d005      	beq.n	8001fb4 <HAL_GPIO_Init+0x40>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d130      	bne.n	8002016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fea:	2201      	movs	r2, #1
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 0201 	and.w	r2, r3, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b03      	cmp	r3, #3
 8002020:	d017      	beq.n	8002052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d123      	bne.n	80020a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	6939      	ldr	r1, [r7, #16]
 80020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0203 	and.w	r2, r3, #3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8094 	beq.w	8002210 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e8:	4b52      	ldr	r3, [pc, #328]	@ (8002234 <HAL_GPIO_Init+0x2c0>)
 80020ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ec:	4a51      	ldr	r2, [pc, #324]	@ (8002234 <HAL_GPIO_Init+0x2c0>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002234 <HAL_GPIO_Init+0x2c0>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002100:	4a4d      	ldr	r2, [pc, #308]	@ (8002238 <HAL_GPIO_Init+0x2c4>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800212a:	d00d      	beq.n	8002148 <HAL_GPIO_Init+0x1d4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a43      	ldr	r2, [pc, #268]	@ (800223c <HAL_GPIO_Init+0x2c8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <HAL_GPIO_Init+0x1d0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a42      	ldr	r2, [pc, #264]	@ (8002240 <HAL_GPIO_Init+0x2cc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_GPIO_Init+0x1cc>
 800213c:	2302      	movs	r3, #2
 800213e:	e004      	b.n	800214a <HAL_GPIO_Init+0x1d6>
 8002140:	2307      	movs	r3, #7
 8002142:	e002      	b.n	800214a <HAL_GPIO_Init+0x1d6>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_GPIO_Init+0x1d6>
 8002148:	2300      	movs	r3, #0
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	f002 0203 	and.w	r2, r2, #3
 8002150:	0092      	lsls	r2, r2, #2
 8002152:	4093      	lsls	r3, r2
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800215a:	4937      	ldr	r1, [pc, #220]	@ (8002238 <HAL_GPIO_Init+0x2c4>)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002168:	4b36      	ldr	r3, [pc, #216]	@ (8002244 <HAL_GPIO_Init+0x2d0>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800218c:	4a2d      	ldr	r2, [pc, #180]	@ (8002244 <HAL_GPIO_Init+0x2d0>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002192:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <HAL_GPIO_Init+0x2d0>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43db      	mvns	r3, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021b6:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <HAL_GPIO_Init+0x2d0>)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021bc:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <HAL_GPIO_Init+0x2d0>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e0:	4a18      	ldr	r2, [pc, #96]	@ (8002244 <HAL_GPIO_Init+0x2d0>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021e6:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <HAL_GPIO_Init+0x2d0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800220a:	4a0e      	ldr	r2, [pc, #56]	@ (8002244 <HAL_GPIO_Init+0x2d0>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3301      	adds	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	f47f aeaf 	bne.w	8001f84 <HAL_GPIO_Init+0x10>
  }
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40021000 	.word	0x40021000
 8002238:	40010000 	.word	0x40010000
 800223c:	48000400 	.word	0x48000400
 8002240:	48000800 	.word	0x48000800
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e001      	b.n	800226a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002294:	e002      	b.n	800229c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43d9      	mvns	r1, r3
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	400b      	ands	r3, r1
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e08d      	b.n	800240a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff f9ac 	bl	8001660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2224      	movs	r2, #36	@ 0x24
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800232c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800233c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	e006      	b.n	8002364 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002362:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d108      	bne.n	800237e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	e007      	b.n	800238e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800238c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800239c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69d9      	ldr	r1, [r3, #28]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	817b      	strh	r3, [r7, #10]
 8002426:	460b      	mov	r3, r1
 8002428:	813b      	strh	r3, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	f040 80f9 	bne.w	800262e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_I2C_Mem_Write+0x34>
 8002442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0ed      	b.n	8002630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Mem_Write+0x4e>
 800245e:	2302      	movs	r3, #2
 8002460:	e0e6      	b.n	8002630 <HAL_I2C_Mem_Write+0x21c>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800246a:	f7ff fc71 	bl	8001d50 <HAL_GetTick>
 800246e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2319      	movs	r3, #25
 8002476:	2201      	movs	r2, #1
 8002478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fac3 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d1      	b.n	8002630 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2221      	movs	r2, #33	@ 0x21
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2240      	movs	r2, #64	@ 0x40
 8002498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024b4:	88f8      	ldrh	r0, [r7, #6]
 80024b6:	893a      	ldrh	r2, [r7, #8]
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	4603      	mov	r3, r0
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f9d3 	bl	8002870 <I2C_RequestMemoryWrite>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0a9      	b.n	8002630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2bff      	cmp	r3, #255	@ 0xff
 80024e4:	d90e      	bls.n	8002504 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	22ff      	movs	r2, #255	@ 0xff
 80024ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	2300      	movs	r3, #0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fc47 	bl	8002d90 <I2C_TransferConfig>
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	b2da      	uxtb	r2, r3
 8002514:	8979      	ldrh	r1, [r7, #10]
 8002516:	2300      	movs	r3, #0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fc36 	bl	8002d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fac6 	bl	8002aba <I2C_WaitOnTXISFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e07b      	b.n	8002630 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d034      	beq.n	80025dc <HAL_I2C_Mem_Write+0x1c8>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002576:	2b00      	cmp	r3, #0
 8002578:	d130      	bne.n	80025dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	@ 0x80
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fa3f 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e04d      	b.n	8002630 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	2bff      	cmp	r3, #255	@ 0xff
 800259c:	d90e      	bls.n	80025bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	22ff      	movs	r2, #255	@ 0xff
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fbeb 	bl	8002d90 <I2C_TransferConfig>
 80025ba:	e00f      	b.n	80025dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	8979      	ldrh	r1, [r7, #10]
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fbda 	bl	8002d90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d19e      	bne.n	8002524 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 faac 	bl	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e01a      	b.n	8002630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2220      	movs	r2, #32
 8002600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_I2C_Mem_Write+0x224>)
 800260e:	400b      	ands	r3, r1
 8002610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	fe00e800 	.word	0xfe00e800

0800263c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	4608      	mov	r0, r1
 8002646:	4611      	mov	r1, r2
 8002648:	461a      	mov	r2, r3
 800264a:	4603      	mov	r3, r0
 800264c:	817b      	strh	r3, [r7, #10]
 800264e:	460b      	mov	r3, r1
 8002650:	813b      	strh	r3, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b20      	cmp	r3, #32
 8002660:	f040 80fd 	bne.w	800285e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_I2C_Mem_Read+0x34>
 800266a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002676:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0f1      	b.n	8002860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_I2C_Mem_Read+0x4e>
 8002686:	2302      	movs	r3, #2
 8002688:	e0ea      	b.n	8002860 <HAL_I2C_Mem_Read+0x224>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002692:	f7ff fb5d 	bl	8001d50 <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2319      	movs	r3, #25
 800269e:	2201      	movs	r2, #1
 80026a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f9af 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0d5      	b.n	8002860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2222      	movs	r2, #34	@ 0x22
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2240      	movs	r2, #64	@ 0x40
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a3a      	ldr	r2, [r7, #32]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026dc:	88f8      	ldrh	r0, [r7, #6]
 80026de:	893a      	ldrh	r2, [r7, #8]
 80026e0:	8979      	ldrh	r1, [r7, #10]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4603      	mov	r3, r0
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f913 	bl	8002918 <I2C_RequestMemoryRead>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0ad      	b.n	8002860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2bff      	cmp	r3, #255	@ 0xff
 800270c:	d90e      	bls.n	800272c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	b2da      	uxtb	r2, r3
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	4b52      	ldr	r3, [pc, #328]	@ (8002868 <HAL_I2C_Mem_Read+0x22c>)
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fb33 	bl	8002d90 <I2C_TransferConfig>
 800272a:	e00f      	b.n	800274c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273a:	b2da      	uxtb	r2, r3
 800273c:	8979      	ldrh	r1, [r7, #10]
 800273e:	4b4a      	ldr	r3, [pc, #296]	@ (8002868 <HAL_I2C_Mem_Read+0x22c>)
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fb22 	bl	8002d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002752:	2200      	movs	r2, #0
 8002754:	2104      	movs	r1, #4
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f956 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07c      	b.n	8002860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d034      	beq.n	800280c <HAL_I2C_Mem_Read+0x1d0>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d130      	bne.n	800280c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	2200      	movs	r2, #0
 80027b2:	2180      	movs	r1, #128	@ 0x80
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f927 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e04d      	b.n	8002860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2bff      	cmp	r3, #255	@ 0xff
 80027cc:	d90e      	bls.n	80027ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	8979      	ldrh	r1, [r7, #10]
 80027dc:	2300      	movs	r3, #0
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fad3 	bl	8002d90 <I2C_TransferConfig>
 80027ea:	e00f      	b.n	800280c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	8979      	ldrh	r1, [r7, #10]
 80027fe:	2300      	movs	r3, #0
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fac2 	bl	8002d90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d19a      	bne.n	800274c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f994 	bl	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e01a      	b.n	8002860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2220      	movs	r2, #32
 8002830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_I2C_Mem_Read+0x230>)
 800283e:	400b      	ands	r3, r1
 8002840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	80002400 	.word	0x80002400
 800286c:	fe00e800 	.word	0xfe00e800

08002870 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	461a      	mov	r2, r3
 800287e:	4603      	mov	r3, r0
 8002880:	817b      	strh	r3, [r7, #10]
 8002882:	460b      	mov	r3, r1
 8002884:	813b      	strh	r3, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	8979      	ldrh	r1, [r7, #10]
 8002890:	4b20      	ldr	r3, [pc, #128]	@ (8002914 <I2C_RequestMemoryWrite+0xa4>)
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fa79 	bl	8002d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	69b9      	ldr	r1, [r7, #24]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f909 	bl	8002aba <I2C_WaitOnTXISFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e02c      	b.n	800290c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028b8:	893b      	ldrh	r3, [r7, #8]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80028c2:	e015      	b.n	80028f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028c4:	893b      	ldrh	r3, [r7, #8]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	69b9      	ldr	r1, [r7, #24]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f8ef 	bl	8002aba <I2C_WaitOnTXISFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e012      	b.n	800290c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028e6:	893b      	ldrh	r3, [r7, #8]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2200      	movs	r2, #0
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f884 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	80002000 	.word	0x80002000

08002918 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	817b      	strh	r3, [r7, #10]
 800292a:	460b      	mov	r3, r1
 800292c:	813b      	strh	r3, [r7, #8]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	8979      	ldrh	r1, [r7, #10]
 8002938:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <I2C_RequestMemoryRead+0xa4>)
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2300      	movs	r3, #0
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fa26 	bl	8002d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	69b9      	ldr	r1, [r7, #24]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f8b6 	bl	8002aba <I2C_WaitOnTXISFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e02c      	b.n	80029b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800295e:	893b      	ldrh	r3, [r7, #8]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
 8002968:	e015      	b.n	8002996 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	b29b      	uxth	r3, r3
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f89c 	bl	8002aba <I2C_WaitOnTXISFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e012      	b.n	80029b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800298c:	893b      	ldrh	r3, [r7, #8]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2200      	movs	r2, #0
 800299e:	2140      	movs	r1, #64	@ 0x40
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f831 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	80002000 	.word	0x80002000

080029c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d103      	bne.n	80029de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d007      	beq.n	80029fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	619a      	str	r2, [r3, #24]
  }
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a18:	e03b      	b.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8d6 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e041      	b.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a34:	d02d      	beq.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7ff f98b 	bl	8001d50 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d122      	bne.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d113      	bne.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f043 0220 	orr.w	r2, r3, #32
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00f      	b.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d0b4      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac6:	e033      	b.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f87f 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e031      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ae2:	d025      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae4:	f7ff f934 	bl	8001d50 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d302      	bcc.n	8002afa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11a      	bne.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d013      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d1c4      	bne.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b54:	e02f      	b.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f838 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e02d      	b.n	8002bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7ff f8f1 	bl	8001d50 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11a      	bne.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d013      	beq.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e007      	b.n	8002bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d1c8      	bne.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	@ 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d068      	beq.n	8002cce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2210      	movs	r2, #16
 8002c02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c04:	e049      	b.n	8002c9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c0c:	d045      	beq.n	8002c9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7ff f89f 	bl	8001d50 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_IsErrorOccurred+0x54>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d13a      	bne.n	8002c9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c46:	d121      	bne.n	8002c8c <I2C_IsErrorOccurred+0xbc>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c4e:	d01d      	beq.n	8002c8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d01a      	beq.n	8002c8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c66:	f7ff f873 	bl	8001d50 <HAL_GetTick>
 8002c6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c6c:	e00e      	b.n	8002c8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c6e:	f7ff f86f 	bl	8001d50 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b19      	cmp	r3, #25
 8002c7a:	d907      	bls.n	8002c8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c8a:	e006      	b.n	8002c9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d1e9      	bne.n	8002c6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d003      	beq.n	8002cb0 <I2C_IsErrorOccurred+0xe0>
 8002ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0aa      	beq.n	8002c06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01c      	beq.n	8002d7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fe3b 	bl	80029c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b0d      	ldr	r3, [pc, #52]	@ (8002d8c <I2C_IsErrorOccurred+0x1bc>)
 8002d56:	400b      	ands	r3, r1
 8002d58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3728      	adds	r7, #40	@ 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	fe00e800 	.word	0xfe00e800

08002d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002da8:	7a7b      	ldrb	r3, [r7, #9]
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	0d5b      	lsrs	r3, r3, #21
 8002dca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <I2C_TransferConfig+0x60>)
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	ea02 0103 	and.w	r1, r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	03ff63ff 	.word	0x03ff63ff

08002df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d138      	bne.n	8002e7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e032      	b.n	8002e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	@ 0x24
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6819      	ldr	r1, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d139      	bne.n	8002f14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e033      	b.n	8002f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2224      	movs	r2, #36	@ 0x24
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002edc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40007000 	.word	0x40007000

08002f44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f48:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40007000 	.word	0x40007000

08002f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f6e:	d130      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f70:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f7c:	d038      	beq.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f7e:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f86:	4a1e      	ldr	r2, [pc, #120]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2232      	movs	r2, #50	@ 0x32
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	4a1b      	ldr	r2, [pc, #108]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0c9b      	lsrs	r3, r3, #18
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa4:	e002      	b.n	8002fac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fac:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb8:	d102      	bne.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f2      	bne.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fcc:	d110      	bne.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e00f      	b.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fde:	d007      	beq.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fe0:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fe8:	4a05      	ldr	r2, [pc, #20]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40007000 	.word	0x40007000
 8003004:	20000000 	.word	0x20000000
 8003008:	431bde83 	.word	0x431bde83

0800300c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f000 bc02 	b.w	8003824 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003020:	4b96      	ldr	r3, [pc, #600]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800302a:	4b94      	ldr	r3, [pc, #592]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80e4 	beq.w	800320a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_RCC_OscConfig+0x4c>
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	f040 808b 	bne.w	8003166 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b01      	cmp	r3, #1
 8003054:	f040 8087 	bne.w	8003166 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003058:	4b88      	ldr	r3, [pc, #544]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x64>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e3d9      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	4b81      	ldr	r3, [pc, #516]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <HAL_RCC_OscConfig+0x7e>
 8003080:	4b7e      	ldr	r3, [pc, #504]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003088:	e005      	b.n	8003096 <HAL_RCC_OscConfig+0x8a>
 800308a:	4b7c      	ldr	r3, [pc, #496]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 800308c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003096:	4293      	cmp	r3, r2
 8003098:	d223      	bcs.n	80030e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fdbe 	bl	8003c20 <RCC_SetFlashLatencyFromMSIRange>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e3ba      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ae:	4b73      	ldr	r3, [pc, #460]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a72      	ldr	r2, [pc, #456]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b70      	ldr	r3, [pc, #448]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	496d      	ldr	r1, [pc, #436]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030cc:	4b6b      	ldr	r3, [pc, #428]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	4968      	ldr	r1, [pc, #416]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
 80030e0:	e025      	b.n	800312e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e2:	4b66      	ldr	r3, [pc, #408]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a65      	ldr	r2, [pc, #404]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b63      	ldr	r3, [pc, #396]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4960      	ldr	r1, [pc, #384]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003100:	4b5e      	ldr	r3, [pc, #376]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	495b      	ldr	r1, [pc, #364]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fd7e 	bl	8003c20 <RCC_SetFlashLatencyFromMSIRange>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e37a      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800312e:	f000 fc81 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8003132:	4602      	mov	r2, r0
 8003134:	4b51      	ldr	r3, [pc, #324]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4950      	ldr	r1, [pc, #320]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003140:	5ccb      	ldrb	r3, [r1, r3]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	4a4e      	ldr	r2, [pc, #312]	@ (8003284 <HAL_RCC_OscConfig+0x278>)
 800314c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800314e:	4b4e      	ldr	r3, [pc, #312]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fb94 	bl	8001880 <HAL_InitTick>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d052      	beq.n	8003208 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	e35e      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d032      	beq.n	80031d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800316e:	4b43      	ldr	r3, [pc, #268]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a42      	ldr	r2, [pc, #264]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800317a:	f7fe fde9 	bl	8001d50 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003182:	f7fe fde5 	bl	8001d50 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e347      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003194:	4b39      	ldr	r3, [pc, #228]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a0:	4b36      	ldr	r3, [pc, #216]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a35      	ldr	r2, [pc, #212]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031a6:	f043 0308 	orr.w	r3, r3, #8
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b33      	ldr	r3, [pc, #204]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4930      	ldr	r1, [pc, #192]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031be:	4b2f      	ldr	r3, [pc, #188]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	492b      	ldr	r1, [pc, #172]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
 80031d2:	e01a      	b.n	800320a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031d4:	4b29      	ldr	r3, [pc, #164]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a28      	ldr	r2, [pc, #160]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fdb6 	bl	8001d50 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e8:	f7fe fdb2 	bl	8001d50 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e314      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031fa:	4b20      	ldr	r3, [pc, #128]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1dc>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d073      	beq.n	80032fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d005      	beq.n	8003228 <HAL_RCC_OscConfig+0x21c>
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d10e      	bne.n	8003240 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d10b      	bne.n	8003240 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	4b14      	ldr	r3, [pc, #80]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d063      	beq.n	80032fc <HAL_RCC_OscConfig+0x2f0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d15f      	bne.n	80032fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e2f1      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x24c>
 800324a:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a0b      	ldr	r2, [pc, #44]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e025      	b.n	80032a4 <HAL_RCC_OscConfig+0x298>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003260:	d114      	bne.n	800328c <HAL_RCC_OscConfig+0x280>
 8003262:	4b06      	ldr	r3, [pc, #24]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a05      	ldr	r2, [pc, #20]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b03      	ldr	r3, [pc, #12]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a02      	ldr	r2, [pc, #8]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e013      	b.n	80032a4 <HAL_RCC_OscConfig+0x298>
 800327c:	40021000 	.word	0x40021000
 8003280:	0800c5ac 	.word	0x0800c5ac
 8003284:	20000000 	.word	0x20000000
 8003288:	20000004 	.word	0x20000004
 800328c:	4ba0      	ldr	r3, [pc, #640]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a9f      	ldr	r2, [pc, #636]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b9d      	ldr	r3, [pc, #628]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a9c      	ldr	r2, [pc, #624]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 800329e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe fd50 	bl	8001d50 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fe fd4c 	bl	8001d50 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	@ 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e2ae      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c6:	4b92      	ldr	r3, [pc, #584]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x2a8>
 80032d2:	e014      	b.n	80032fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fd3c 	bl	8001d50 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032dc:	f7fe fd38 	bl	8001d50 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	@ 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e29a      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ee:	4b88      	ldr	r3, [pc, #544]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x2d0>
 80032fa:	e000      	b.n	80032fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d060      	beq.n	80033cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d005      	beq.n	800331c <HAL_RCC_OscConfig+0x310>
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d119      	bne.n	800334a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d116      	bne.n	800334a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800331c:	4b7c      	ldr	r3, [pc, #496]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_OscConfig+0x328>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e277      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	4b76      	ldr	r3, [pc, #472]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	4973      	ldr	r1, [pc, #460]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003348:	e040      	b.n	80033cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d023      	beq.n	800339a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003352:	4b6f      	ldr	r3, [pc, #444]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a6e      	ldr	r2, [pc, #440]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe fcf7 	bl	8001d50 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003366:	f7fe fcf3 	bl	8001d50 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e255      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003378:	4b65      	ldr	r3, [pc, #404]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003384:	4b62      	ldr	r3, [pc, #392]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	061b      	lsls	r3, r3, #24
 8003392:	495f      	ldr	r1, [pc, #380]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
 8003398:	e018      	b.n	80033cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339a:	4b5d      	ldr	r3, [pc, #372]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5c      	ldr	r2, [pc, #368]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80033a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fe fcd3 	bl	8001d50 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ae:	f7fe fccf 	bl	8001d50 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e231      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c0:	4b53      	ldr	r3, [pc, #332]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f0      	bne.n	80033ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d03c      	beq.n	8003452 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01c      	beq.n	800341a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80033e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fe fcae 	bl	8001d50 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f8:	f7fe fcaa 	bl	8001d50 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e20c      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800340a:	4b41      	ldr	r3, [pc, #260]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 800340c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ef      	beq.n	80033f8 <HAL_RCC_OscConfig+0x3ec>
 8003418:	e01b      	b.n	8003452 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800341a:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 800341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003420:	4a3b      	ldr	r2, [pc, #236]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe fc91 	bl	8001d50 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003432:	f7fe fc8d 	bl	8001d50 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e1ef      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003444:	4b32      	ldr	r3, [pc, #200]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ef      	bne.n	8003432 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80a6 	beq.w	80035ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003460:	2300      	movs	r3, #0
 8003462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003464:	4b2a      	ldr	r3, [pc, #168]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10d      	bne.n	800348c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003470:	4b27      	ldr	r3, [pc, #156]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	4a26      	ldr	r2, [pc, #152]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800347a:	6593      	str	r3, [r2, #88]	@ 0x58
 800347c:	4b24      	ldr	r3, [pc, #144]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003488:	2301      	movs	r3, #1
 800348a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348c:	4b21      	ldr	r3, [pc, #132]	@ (8003514 <HAL_RCC_OscConfig+0x508>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d118      	bne.n	80034ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003498:	4b1e      	ldr	r3, [pc, #120]	@ (8003514 <HAL_RCC_OscConfig+0x508>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1d      	ldr	r2, [pc, #116]	@ (8003514 <HAL_RCC_OscConfig+0x508>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a4:	f7fe fc54 	bl	8001d50 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ac:	f7fe fc50 	bl	8001d50 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1b2      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034be:	4b15      	ldr	r3, [pc, #84]	@ (8003514 <HAL_RCC_OscConfig+0x508>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d108      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4d8>
 80034d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034e2:	e029      	b.n	8003538 <HAL_RCC_OscConfig+0x52c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d115      	bne.n	8003518 <HAL_RCC_OscConfig+0x50c>
 80034ec:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f2:	4a07      	ldr	r2, [pc, #28]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034fc:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	4a03      	ldr	r2, [pc, #12]	@ (8003510 <HAL_RCC_OscConfig+0x504>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800350c:	e014      	b.n	8003538 <HAL_RCC_OscConfig+0x52c>
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	40007000 	.word	0x40007000
 8003518:	4b9a      	ldr	r3, [pc, #616]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	4a99      	ldr	r2, [pc, #612]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003528:	4b96      	ldr	r3, [pc, #600]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	4a95      	ldr	r2, [pc, #596]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d016      	beq.n	800356e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe fc06 	bl	8001d50 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7fe fc02 	bl	8001d50 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e162      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355e:	4b89      	ldr	r3, [pc, #548]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ed      	beq.n	8003548 <HAL_RCC_OscConfig+0x53c>
 800356c:	e015      	b.n	800359a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe fbef 	bl	8001d50 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fe fbeb 	bl	8001d50 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e14b      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800358c:	4b7d      	ldr	r3, [pc, #500]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1ed      	bne.n	8003576 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800359a:	7ffb      	ldrb	r3, [r7, #31]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d105      	bne.n	80035ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a0:	4b78      	ldr	r3, [pc, #480]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	4a77      	ldr	r2, [pc, #476]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80035a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d03c      	beq.n	8003632 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01c      	beq.n	80035fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035c0:	4b70      	ldr	r3, [pc, #448]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80035c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fe fbbe 	bl	8001d50 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d8:	f7fe fbba 	bl	8001d50 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e11c      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ea:	4b66      	ldr	r3, [pc, #408]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80035ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ef      	beq.n	80035d8 <HAL_RCC_OscConfig+0x5cc>
 80035f8:	e01b      	b.n	8003632 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035fa:	4b62      	ldr	r3, [pc, #392]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80035fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003600:	4a60      	ldr	r2, [pc, #384]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360a:	f7fe fba1 	bl	8001d50 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003612:	f7fe fb9d 	bl	8001d50 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0ff      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003624:	4b57      	ldr	r3, [pc, #348]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003626:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1ef      	bne.n	8003612 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80f3 	beq.w	8003822 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003640:	2b02      	cmp	r3, #2
 8003642:	f040 80c9 	bne.w	80037d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003646:	4b4f      	ldr	r3, [pc, #316]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 0203 	and.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	429a      	cmp	r2, r3
 8003658:	d12c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	3b01      	subs	r3, #1
 8003666:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d123      	bne.n	80036b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003676:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d11b      	bne.n	80036b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003686:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d113      	bne.n	80036b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	3b01      	subs	r3, #1
 800369a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d109      	bne.n	80036b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	3b01      	subs	r3, #1
 80036ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d06b      	beq.n	800378c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d062      	beq.n	8003780 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036ba:	4b32      	ldr	r3, [pc, #200]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0ac      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80036d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036d6:	f7fe fb3b 	bl	8001d50 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe fb37 	bl	8001d50 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e099      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	4b24      	ldr	r3, [pc, #144]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036fc:	4b21      	ldr	r3, [pc, #132]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	4b21      	ldr	r3, [pc, #132]	@ (8003788 <HAL_RCC_OscConfig+0x77c>)
 8003702:	4013      	ands	r3, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800370c:	3a01      	subs	r2, #1
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	4311      	orrs	r1, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003716:	0212      	lsls	r2, r2, #8
 8003718:	4311      	orrs	r1, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800371e:	0852      	lsrs	r2, r2, #1
 8003720:	3a01      	subs	r2, #1
 8003722:	0552      	lsls	r2, r2, #21
 8003724:	4311      	orrs	r1, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800372a:	0852      	lsrs	r2, r2, #1
 800372c:	3a01      	subs	r2, #1
 800372e:	0652      	lsls	r2, r2, #25
 8003730:	4311      	orrs	r1, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003736:	06d2      	lsls	r2, r2, #27
 8003738:	430a      	orrs	r2, r1
 800373a:	4912      	ldr	r1, [pc, #72]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003740:	4b10      	ldr	r3, [pc, #64]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0f      	ldr	r2, [pc, #60]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800374a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800374c:	4b0d      	ldr	r3, [pc, #52]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a0c      	ldr	r2, [pc, #48]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003756:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003758:	f7fe fafa 	bl	8001d50 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe faf6 	bl	8001d50 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e058      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <HAL_RCC_OscConfig+0x778>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800377e:	e050      	b.n	8003822 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04f      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
 8003784:	40021000 	.word	0x40021000
 8003788:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378c:	4b27      	ldr	r3, [pc, #156]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d144      	bne.n	8003822 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003798:	4b24      	ldr	r3, [pc, #144]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a23      	ldr	r2, [pc, #140]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a4:	4b21      	ldr	r3, [pc, #132]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4a20      	ldr	r2, [pc, #128]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 80037aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037b0:	f7fe face 	bl	8001d50 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe faca 	bl	8001d50 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e02c      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ca:	4b18      	ldr	r3, [pc, #96]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x7ac>
 80037d6:	e024      	b.n	8003822 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d01f      	beq.n	800381e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b13      	ldr	r3, [pc, #76]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a12      	ldr	r2, [pc, #72]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 80037e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fe fab1 	bl	8001d50 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fe faad 	bl	8001d50 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e00f      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003804:	4b09      	ldr	r3, [pc, #36]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	4905      	ldr	r1, [pc, #20]	@ (800382c <HAL_RCC_OscConfig+0x820>)
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <HAL_RCC_OscConfig+0x824>)
 8003818:	4013      	ands	r3, r2
 800381a:	60cb      	str	r3, [r1, #12]
 800381c:	e001      	b.n	8003822 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	feeefffc 	.word	0xfeeefffc

08003834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0e7      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b75      	ldr	r3, [pc, #468]	@ (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b72      	ldr	r3, [pc, #456]	@ (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4970      	ldr	r1, [pc, #448]	@ (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b6e      	ldr	r3, [pc, #440]	@ (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0cf      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	4b66      	ldr	r3, [pc, #408]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003890:	429a      	cmp	r2, r3
 8003892:	d908      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b63      	ldr	r3, [pc, #396]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4960      	ldr	r1, [pc, #384]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04c      	beq.n	800394c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d121      	bne.n	800390a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0a6      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d2:	4b54      	ldr	r3, [pc, #336]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d115      	bne.n	800390a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e09a      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e08e      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e086      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800390a:	4b46      	ldr	r3, [pc, #280]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f023 0203 	bic.w	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4943      	ldr	r1, [pc, #268]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7fe fa18 	bl	8001d50 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	e00a      	b.n	800393a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003924:	f7fe fa14 	bl	8001d50 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e06e      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 020c 	and.w	r2, r3, #12
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	429a      	cmp	r2, r3
 800394a:	d1eb      	bne.n	8003924 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d010      	beq.n	800397a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b31      	ldr	r3, [pc, #196]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003964:	429a      	cmp	r2, r3
 8003966:	d208      	bcs.n	800397a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b2e      	ldr	r3, [pc, #184]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	492b      	ldr	r1, [pc, #172]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800397a:	4b29      	ldr	r3, [pc, #164]	@ (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d210      	bcs.n	80039aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003988:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 0207 	bic.w	r2, r3, #7
 8003990:	4923      	ldr	r1, [pc, #140]	@ (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003998:	4b21      	ldr	r3, [pc, #132]	@ (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e036      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4918      	ldr	r1, [pc, #96]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d4:	4b13      	ldr	r3, [pc, #76]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4910      	ldr	r1, [pc, #64]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e8:	f000 f824 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	490b      	ldr	r1, [pc, #44]	@ (8003a28 <HAL_RCC_ClockConfig+0x1f4>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <HAL_RCC_ClockConfig+0x1f8>)
 8003a06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a08:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_RCC_ClockConfig+0x1fc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd ff37 	bl	8001880 <HAL_InitTick>
 8003a12:	4603      	mov	r3, r0
 8003a14:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a16:	7afb      	ldrb	r3, [r7, #11]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	0800c5ac 	.word	0x0800c5ac
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	@ 0x24
 8003a38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a42:	4b3e      	ldr	r3, [pc, #248]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d121      	bne.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d11e      	bne.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a68:	4b34      	ldr	r3, [pc, #208]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a74:	4b31      	ldr	r3, [pc, #196]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	e005      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a84:	4b2d      	ldr	r3, [pc, #180]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a90:	4a2b      	ldr	r2, [pc, #172]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d102      	bne.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aac:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	e004      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ab8:	4b23      	ldr	r3, [pc, #140]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d134      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0xa6>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d003      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ad8:	e005      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ada:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003adc:	617b      	str	r3, [r7, #20]
      break;
 8003ade:	e005      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ae0:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ae2:	617b      	str	r3, [r7, #20]
      break;
 8003ae4:	e002      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	617b      	str	r3, [r7, #20]
      break;
 8003aea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aec:	4b13      	ldr	r3, [pc, #76]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	3301      	adds	r3, #1
 8003af8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003afa:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	fb03 f202 	mul.w	r2, r3, r2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	0e5b      	lsrs	r3, r3, #25
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3724      	adds	r7, #36	@ 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	0800c5c4 	.word	0x0800c5c4
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	007a1200 	.word	0x007a1200

08003b4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b50:	4b03      	ldr	r3, [pc, #12]	@ (8003b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000000 	.word	0x20000000

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b68:	f7ff fff0 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4904      	ldr	r1, [pc, #16]	@ (8003b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	0800c5bc 	.word	0x0800c5bc

08003b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b94:	f7ff ffda 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0adb      	lsrs	r3, r3, #11
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4904      	ldr	r1, [pc, #16]	@ (8003bb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	0800c5bc 	.word	0x0800c5bc

08003bbc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	220f      	movs	r2, #15
 8003bca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003bcc:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_RCC_GetClockConfig+0x5c>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0203 	and.w	r2, r3, #3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <HAL_RCC_GetClockConfig+0x5c>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003be4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <HAL_RCC_GetClockConfig+0x5c>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <HAL_RCC_GetClockConfig+0x5c>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	08db      	lsrs	r3, r3, #3
 8003bf6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003bfe:	4b07      	ldr	r3, [pc, #28]	@ (8003c1c <HAL_RCC_GetClockConfig+0x60>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0207 	and.w	r2, r3, #7
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40022000 	.word	0x40022000

08003c20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c38:	f7ff f984 	bl	8002f44 <HAL_PWREx_GetVoltageRange>
 8003c3c:	6178      	str	r0, [r7, #20]
 8003c3e:	e014      	b.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	4b25      	ldr	r3, [pc, #148]	@ (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c44:	4a24      	ldr	r2, [pc, #144]	@ (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c4c:	4b22      	ldr	r3, [pc, #136]	@ (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c58:	f7ff f974 	bl	8002f44 <HAL_PWREx_GetVoltageRange>
 8003c5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c62:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c70:	d10b      	bne.n	8003c8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b80      	cmp	r3, #128	@ 0x80
 8003c76:	d919      	bls.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c7c:	d902      	bls.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c7e:	2302      	movs	r3, #2
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	e013      	b.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c84:	2301      	movs	r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	e010      	b.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b80      	cmp	r3, #128	@ 0x80
 8003c8e:	d902      	bls.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c90:	2303      	movs	r3, #3
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	e00a      	b.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b80      	cmp	r3, #128	@ 0x80
 8003c9a:	d102      	bne.n	8003ca2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	e004      	b.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b70      	cmp	r3, #112	@ 0x70
 8003ca6:	d101      	bne.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cac:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 0207 	bic.w	r2, r3, #7
 8003cb4:	4909      	ldr	r1, [pc, #36]	@ (8003cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cbc:	4b07      	ldr	r3, [pc, #28]	@ (8003cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d001      	beq.n	8003cce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40022000 	.word	0x40022000

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ce8:	2300      	movs	r3, #0
 8003cea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cec:	2300      	movs	r3, #0
 8003cee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d031      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d04:	d01a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d06:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d0a:	d814      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d14:	d10f      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d16:	4b5d      	ldr	r3, [pc, #372]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d22:	e00c      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f9de 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d34:	e003      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	74fb      	strb	r3, [r7, #19]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d44:	4b51      	ldr	r3, [pc, #324]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	494e      	ldr	r1, [pc, #312]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d5a:	e001      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 809e 	beq.w	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d72:	4b46      	ldr	r3, [pc, #280]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d88:	4b40      	ldr	r3, [pc, #256]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d94:	4b3d      	ldr	r3, [pc, #244]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da0:	2301      	movs	r3, #1
 8003da2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da4:	4b3a      	ldr	r3, [pc, #232]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a39      	ldr	r2, [pc, #228]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003db0:	f7fd ffce 	bl	8001d50 <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003db6:	e009      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fd ffca 	bl	8001d50 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d902      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dca:	e005      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dcc:	4b30      	ldr	r3, [pc, #192]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ef      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003dd8:	7cfb      	ldrb	r3, [r7, #19]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d15a      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dde:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01e      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d019      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dfa:	4b24      	ldr	r3, [pc, #144]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e04:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e06:	4b21      	ldr	r3, [pc, #132]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e16:	4b1d      	ldr	r3, [pc, #116]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e26:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d016      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd ff8a 	bl	8001d50 <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e40:	f7fd ff86 	bl	8001d50 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d902      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	74fb      	strb	r3, [r7, #19]
            break;
 8003e56:	e006      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e58:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ec      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6c:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7a:	4904      	ldr	r1, [pc, #16]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e82:	e009      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	74bb      	strb	r3, [r7, #18]
 8003e88:	e006      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e98:	7c7b      	ldrb	r3, [r7, #17]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d105      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9e:	4b8a      	ldr	r3, [pc, #552]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea2:	4a89      	ldr	r2, [pc, #548]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb6:	4b84      	ldr	r3, [pc, #528]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	f023 0203 	bic.w	r2, r3, #3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4980      	ldr	r1, [pc, #512]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ed8:	4b7b      	ldr	r3, [pc, #492]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f023 020c 	bic.w	r2, r3, #12
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	4978      	ldr	r1, [pc, #480]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003efa:	4b73      	ldr	r3, [pc, #460]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	496f      	ldr	r1, [pc, #444]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2a:	4967      	ldr	r1, [pc, #412]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f3e:	4b62      	ldr	r3, [pc, #392]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	495e      	ldr	r1, [pc, #376]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f60:	4b59      	ldr	r3, [pc, #356]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f66:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	4956      	ldr	r1, [pc, #344]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f82:	4b51      	ldr	r3, [pc, #324]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	494d      	ldr	r1, [pc, #308]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d028      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa4:	4b48      	ldr	r3, [pc, #288]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	4945      	ldr	r1, [pc, #276]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc4:	4b40      	ldr	r3, [pc, #256]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a3f      	ldr	r2, [pc, #252]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fce:	60d3      	str	r3, [r2, #12]
 8003fd0:	e011      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fda:	d10c      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f882 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d028      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004002:	4b31      	ldr	r3, [pc, #196]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004008:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	492d      	ldr	r1, [pc, #180]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004020:	d106      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004022:	4b29      	ldr	r3, [pc, #164]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	4a28      	ldr	r2, [pc, #160]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004028:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800402c:	60d3      	str	r3, [r2, #12]
 800402e:	e011      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004034:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f853 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01c      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004060:	4b19      	ldr	r3, [pc, #100]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004066:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406e:	4916      	ldr	r1, [pc, #88]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800407e:	d10c      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f830 	bl	80040ec <RCCEx_PLLSAI1_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040a6:	4b08      	ldr	r3, [pc, #32]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b4:	4904      	ldr	r1, [pc, #16]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000

080040cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a04      	ldr	r2, [pc, #16]	@ (80040e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000

080040ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040fa:	4b74      	ldr	r3, [pc, #464]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004106:	4b71      	ldr	r3, [pc, #452]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0203 	and.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d10d      	bne.n	8004132 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
       ||
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800411e:	4b6b      	ldr	r3, [pc, #428]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
       ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d047      	beq.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
 8004136:	e044      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d018      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x86>
 8004140:	2b03      	cmp	r3, #3
 8004142:	d825      	bhi.n	8004190 <RCCEx_PLLSAI1_Config+0xa4>
 8004144:	2b01      	cmp	r3, #1
 8004146:	d002      	beq.n	800414e <RCCEx_PLLSAI1_Config+0x62>
 8004148:	2b02      	cmp	r3, #2
 800414a:	d009      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x74>
 800414c:	e020      	b.n	8004190 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800414e:	4b5f      	ldr	r3, [pc, #380]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11d      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415e:	e01a      	b.n	8004196 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004160:	4b5a      	ldr	r3, [pc, #360]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d116      	bne.n	800419a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e013      	b.n	800419a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004172:	4b56      	ldr	r3, [pc, #344]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800417e:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800418e:	e006      	b.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e004      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419e:	bf00      	nop
    }

    if(status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10d      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041a6:	4b49      	ldr	r3, [pc, #292]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	430b      	orrs	r3, r1
 80041bc:	4943      	ldr	r1, [pc, #268]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d17c      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041c8:	4b40      	ldr	r3, [pc, #256]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a3f      	ldr	r2, [pc, #252]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fd fdbc 	bl	8001d50 <HAL_GetTick>
 80041d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041da:	e009      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041dc:	f7fd fdb8 	bl	8001d50 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d902      	bls.n	80041f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	73fb      	strb	r3, [r7, #15]
        break;
 80041ee:	e005      	b.n	80041fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f0:	4b36      	ldr	r3, [pc, #216]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ef      	bne.n	80041dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d15f      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d110      	bne.n	800422a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004208:	4b30      	ldr	r3, [pc, #192]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004210:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6892      	ldr	r2, [r2, #8]
 8004218:	0211      	lsls	r1, r2, #8
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	06d2      	lsls	r2, r2, #27
 8004220:	430a      	orrs	r2, r1
 8004222:	492a      	ldr	r1, [pc, #168]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	610b      	str	r3, [r1, #16]
 8004228:	e027      	b.n	800427a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d112      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004230:	4b26      	ldr	r3, [pc, #152]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004238:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6892      	ldr	r2, [r2, #8]
 8004240:	0211      	lsls	r1, r2, #8
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6912      	ldr	r2, [r2, #16]
 8004246:	0852      	lsrs	r2, r2, #1
 8004248:	3a01      	subs	r2, #1
 800424a:	0552      	lsls	r2, r2, #21
 800424c:	430a      	orrs	r2, r1
 800424e:	491f      	ldr	r1, [pc, #124]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004250:	4313      	orrs	r3, r2
 8004252:	610b      	str	r3, [r1, #16]
 8004254:	e011      	b.n	800427a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004256:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800425e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6892      	ldr	r2, [r2, #8]
 8004266:	0211      	lsls	r1, r2, #8
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6952      	ldr	r2, [r2, #20]
 800426c:	0852      	lsrs	r2, r2, #1
 800426e:	3a01      	subs	r2, #1
 8004270:	0652      	lsls	r2, r2, #25
 8004272:	430a      	orrs	r2, r1
 8004274:	4915      	ldr	r1, [pc, #84]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800427a:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a13      	ldr	r2, [pc, #76]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004280:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004284:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fd fd63 	bl	8001d50 <HAL_GetTick>
 800428a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800428c:	e009      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800428e:	f7fd fd5f 	bl	8001d50 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d902      	bls.n	80042a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	73fb      	strb	r3, [r7, #15]
          break;
 80042a0:	e005      	b.n	80042ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a2:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ef      	beq.n	800428e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	4903      	ldr	r1, [pc, #12]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000

080042d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e049      	b.n	8004376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f841 	bl	800437e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f000 f9c4 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d001      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e03b      	b.n	8004424 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a19      	ldr	r2, [pc, #100]	@ (8004430 <HAL_TIM_Base_Start_IT+0x9c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_TIM_Base_Start_IT+0x4e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d6:	d004      	beq.n	80043e2 <HAL_TIM_Base_Start_IT+0x4e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a15      	ldr	r2, [pc, #84]	@ (8004434 <HAL_TIM_Base_Start_IT+0xa0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d115      	bne.n	800440e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <HAL_TIM_Base_Start_IT+0xa4>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b06      	cmp	r3, #6
 80043f2:	d015      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x8c>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fa:	d011      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440c:	e008      	b.n	8004420 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	e000      	b.n	8004422 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004420:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40014000 	.word	0x40014000
 8004438:	00010007 	.word	0x00010007

0800443c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0202 	mvn.w	r2, #2
 8004470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8e9 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8db 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f8ec 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d020      	beq.n	80044ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0204 	mvn.w	r2, #4
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8c3 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8b5 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8c6 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d020      	beq.n	8004538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01b      	beq.n	8004538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0208 	mvn.w	r2, #8
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2204      	movs	r2, #4
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f89d 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f88f 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f8a0 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d020      	beq.n	8004584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f877 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f869 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f87a 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0201 	mvn.w	r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fd f92c 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00c      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80045ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f8dd 	bl	8004790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00c      	beq.n	80045fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f8d5 	bl	80047a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00c      	beq.n	800461e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f834 	bl	8004686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00c      	beq.n	8004642 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f06f 0220 	mvn.w	r2, #32
 800463a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f89d 	bl	800477c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a30      	ldr	r2, [pc, #192]	@ (8004770 <TIM_Base_SetConfig+0xd4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_Base_SetConfig+0x20>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ba:	d108      	bne.n	80046ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a27      	ldr	r2, [pc, #156]	@ (8004770 <TIM_Base_SetConfig+0xd4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00b      	beq.n	80046ee <TIM_Base_SetConfig+0x52>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046dc:	d007      	beq.n	80046ee <TIM_Base_SetConfig+0x52>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a24      	ldr	r2, [pc, #144]	@ (8004774 <TIM_Base_SetConfig+0xd8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d003      	beq.n	80046ee <TIM_Base_SetConfig+0x52>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <TIM_Base_SetConfig+0xdc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d108      	bne.n	8004700 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a12      	ldr	r2, [pc, #72]	@ (8004770 <TIM_Base_SetConfig+0xd4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <TIM_Base_SetConfig+0xa0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a11      	ldr	r2, [pc, #68]	@ (8004774 <TIM_Base_SetConfig+0xd8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_Base_SetConfig+0xa0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a10      	ldr	r2, [pc, #64]	@ (8004778 <TIM_Base_SetConfig+0xdc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d103      	bne.n	8004744 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d105      	bne.n	8004762 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]
  }
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400

0800477c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e040      	b.n	800484c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd f9f8 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	@ 0x24
 80047e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa54 	bl	8004cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f825 	bl	8004854 <UART_SetConfig>
 800480a:	4603      	mov	r3, r0
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e01b      	b.n	800484c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fad3 	bl	8004df0 <UART_CheckIdleState>
 800484a:	4603      	mov	r3, r0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004858:	b08a      	sub	sp, #40	@ 0x28
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	431a      	orrs	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	431a      	orrs	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	4313      	orrs	r3, r2
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4bb4      	ldr	r3, [pc, #720]	@ (8004b54 <UART_SetConfig+0x300>)
 8004884:	4013      	ands	r3, r2
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800488c:	430b      	orrs	r3, r1
 800488e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4aa9      	ldr	r2, [pc, #676]	@ (8004b58 <UART_SetConfig+0x304>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048bc:	4313      	orrs	r3, r2
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d0:	430a      	orrs	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4aa0      	ldr	r2, [pc, #640]	@ (8004b5c <UART_SetConfig+0x308>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d126      	bne.n	800492c <UART_SetConfig+0xd8>
 80048de:	4ba0      	ldr	r3, [pc, #640]	@ (8004b60 <UART_SetConfig+0x30c>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d81b      	bhi.n	8004924 <UART_SetConfig+0xd0>
 80048ec:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <UART_SetConfig+0xa0>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004905 	.word	0x08004905
 80048f8:	08004915 	.word	0x08004915
 80048fc:	0800490d 	.word	0x0800490d
 8004900:	0800491d 	.word	0x0800491d
 8004904:	2301      	movs	r3, #1
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490a:	e080      	b.n	8004a0e <UART_SetConfig+0x1ba>
 800490c:	2302      	movs	r3, #2
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004912:	e07c      	b.n	8004a0e <UART_SetConfig+0x1ba>
 8004914:	2304      	movs	r3, #4
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491a:	e078      	b.n	8004a0e <UART_SetConfig+0x1ba>
 800491c:	2308      	movs	r3, #8
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004922:	e074      	b.n	8004a0e <UART_SetConfig+0x1ba>
 8004924:	2310      	movs	r3, #16
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492a:	e070      	b.n	8004a0e <UART_SetConfig+0x1ba>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a8c      	ldr	r2, [pc, #560]	@ (8004b64 <UART_SetConfig+0x310>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d138      	bne.n	80049a8 <UART_SetConfig+0x154>
 8004936:	4b8a      	ldr	r3, [pc, #552]	@ (8004b60 <UART_SetConfig+0x30c>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b0c      	cmp	r3, #12
 8004942:	d82d      	bhi.n	80049a0 <UART_SetConfig+0x14c>
 8004944:	a201      	add	r2, pc, #4	@ (adr r2, 800494c <UART_SetConfig+0xf8>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	08004981 	.word	0x08004981
 8004950:	080049a1 	.word	0x080049a1
 8004954:	080049a1 	.word	0x080049a1
 8004958:	080049a1 	.word	0x080049a1
 800495c:	08004991 	.word	0x08004991
 8004960:	080049a1 	.word	0x080049a1
 8004964:	080049a1 	.word	0x080049a1
 8004968:	080049a1 	.word	0x080049a1
 800496c:	08004989 	.word	0x08004989
 8004970:	080049a1 	.word	0x080049a1
 8004974:	080049a1 	.word	0x080049a1
 8004978:	080049a1 	.word	0x080049a1
 800497c:	08004999 	.word	0x08004999
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004986:	e042      	b.n	8004a0e <UART_SetConfig+0x1ba>
 8004988:	2302      	movs	r3, #2
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498e:	e03e      	b.n	8004a0e <UART_SetConfig+0x1ba>
 8004990:	2304      	movs	r3, #4
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e03a      	b.n	8004a0e <UART_SetConfig+0x1ba>
 8004998:	2308      	movs	r3, #8
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e036      	b.n	8004a0e <UART_SetConfig+0x1ba>
 80049a0:	2310      	movs	r3, #16
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e032      	b.n	8004a0e <UART_SetConfig+0x1ba>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004b58 <UART_SetConfig+0x304>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d12a      	bne.n	8004a08 <UART_SetConfig+0x1b4>
 80049b2:	4b6b      	ldr	r3, [pc, #428]	@ (8004b60 <UART_SetConfig+0x30c>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049c0:	d01a      	beq.n	80049f8 <UART_SetConfig+0x1a4>
 80049c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049c6:	d81b      	bhi.n	8004a00 <UART_SetConfig+0x1ac>
 80049c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049cc:	d00c      	beq.n	80049e8 <UART_SetConfig+0x194>
 80049ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d2:	d815      	bhi.n	8004a00 <UART_SetConfig+0x1ac>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <UART_SetConfig+0x18c>
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049dc:	d008      	beq.n	80049f0 <UART_SetConfig+0x19c>
 80049de:	e00f      	b.n	8004a00 <UART_SetConfig+0x1ac>
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e6:	e012      	b.n	8004a0e <UART_SetConfig+0x1ba>
 80049e8:	2302      	movs	r3, #2
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e00e      	b.n	8004a0e <UART_SetConfig+0x1ba>
 80049f0:	2304      	movs	r3, #4
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e00a      	b.n	8004a0e <UART_SetConfig+0x1ba>
 80049f8:	2308      	movs	r3, #8
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e006      	b.n	8004a0e <UART_SetConfig+0x1ba>
 8004a00:	2310      	movs	r3, #16
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e002      	b.n	8004a0e <UART_SetConfig+0x1ba>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a51      	ldr	r2, [pc, #324]	@ (8004b58 <UART_SetConfig+0x304>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d17a      	bne.n	8004b0e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d824      	bhi.n	8004a6a <UART_SetConfig+0x216>
 8004a20:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <UART_SetConfig+0x1d4>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a6b 	.word	0x08004a6b
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a6b 	.word	0x08004a6b
 8004a38:	08004a5b 	.word	0x08004a5b
 8004a3c:	08004a6b 	.word	0x08004a6b
 8004a40:	08004a6b 	.word	0x08004a6b
 8004a44:	08004a6b 	.word	0x08004a6b
 8004a48:	08004a63 	.word	0x08004a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a4c:	f7ff f88a 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8004a50:	61f8      	str	r0, [r7, #28]
        break;
 8004a52:	e010      	b.n	8004a76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a54:	4b44      	ldr	r3, [pc, #272]	@ (8004b68 <UART_SetConfig+0x314>)
 8004a56:	61fb      	str	r3, [r7, #28]
        break;
 8004a58:	e00d      	b.n	8004a76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5a:	f7fe ffeb 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8004a5e:	61f8      	str	r0, [r7, #28]
        break;
 8004a60:	e009      	b.n	8004a76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a66:	61fb      	str	r3, [r7, #28]
        break;
 8004a68:	e005      	b.n	8004a76 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8107 	beq.w	8004c8c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	4413      	add	r3, r2
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d305      	bcc.n	8004a9a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d903      	bls.n	8004aa2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004aa0:	e0f4      	b.n	8004c8c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	461c      	mov	r4, r3
 8004aa8:	4615      	mov	r5, r2
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	022b      	lsls	r3, r5, #8
 8004ab4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ab8:	0222      	lsls	r2, r4, #8
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	6849      	ldr	r1, [r1, #4]
 8004abe:	0849      	lsrs	r1, r1, #1
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	4688      	mov	r8, r1
 8004ac4:	4681      	mov	r9, r0
 8004ac6:	eb12 0a08 	adds.w	sl, r2, r8
 8004aca:	eb43 0b09 	adc.w	fp, r3, r9
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004adc:	4650      	mov	r0, sl
 8004ade:	4659      	mov	r1, fp
 8004ae0:	f7fc f8d2 	bl	8000c88 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4613      	mov	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004af2:	d308      	bcc.n	8004b06 <UART_SetConfig+0x2b2>
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004afa:	d204      	bcs.n	8004b06 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	60da      	str	r2, [r3, #12]
 8004b04:	e0c2      	b.n	8004c8c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b0c:	e0be      	b.n	8004c8c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b16:	d16a      	bne.n	8004bee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004b18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d834      	bhi.n	8004b8a <UART_SetConfig+0x336>
 8004b20:	a201      	add	r2, pc, #4	@ (adr r2, 8004b28 <UART_SetConfig+0x2d4>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b6d 	.word	0x08004b6d
 8004b30:	08004b75 	.word	0x08004b75
 8004b34:	08004b8b 	.word	0x08004b8b
 8004b38:	08004b7b 	.word	0x08004b7b
 8004b3c:	08004b8b 	.word	0x08004b8b
 8004b40:	08004b8b 	.word	0x08004b8b
 8004b44:	08004b8b 	.word	0x08004b8b
 8004b48:	08004b83 	.word	0x08004b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f7ff f80a 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8004b50:	61f8      	str	r0, [r7, #28]
        break;
 8004b52:	e020      	b.n	8004b96 <UART_SetConfig+0x342>
 8004b54:	efff69f3 	.word	0xefff69f3
 8004b58:	40008000 	.word	0x40008000
 8004b5c:	40013800 	.word	0x40013800
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40004400 	.word	0x40004400
 8004b68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7ff f810 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8004b70:	61f8      	str	r0, [r7, #28]
        break;
 8004b72:	e010      	b.n	8004b96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b74:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca8 <UART_SetConfig+0x454>)
 8004b76:	61fb      	str	r3, [r7, #28]
        break;
 8004b78:	e00d      	b.n	8004b96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7a:	f7fe ff5b 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8004b7e:	61f8      	str	r0, [r7, #28]
        break;
 8004b80:	e009      	b.n	8004b96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b86:	61fb      	str	r3, [r7, #28]
        break;
 8004b88:	e005      	b.n	8004b96 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d077      	beq.n	8004c8c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	005a      	lsls	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	441a      	add	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b0f      	cmp	r3, #15
 8004bb6:	d916      	bls.n	8004be6 <UART_SetConfig+0x392>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbe:	d212      	bcs.n	8004be6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f023 030f 	bic.w	r3, r3, #15
 8004bc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	8afb      	ldrh	r3, [r7, #22]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	8afa      	ldrh	r2, [r7, #22]
 8004be2:	60da      	str	r2, [r3, #12]
 8004be4:	e052      	b.n	8004c8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bec:	e04e      	b.n	8004c8c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d827      	bhi.n	8004c46 <UART_SetConfig+0x3f2>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0x3a8>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe ffa0 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8004c24:	61f8      	str	r0, [r7, #28]
        break;
 8004c26:	e014      	b.n	8004c52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe ffb2 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	61f8      	str	r0, [r7, #28]
        break;
 8004c2e:	e010      	b.n	8004c52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <UART_SetConfig+0x454>)
 8004c32:	61fb      	str	r3, [r7, #28]
        break;
 8004c34:	e00d      	b.n	8004c52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe fefd 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8004c3a:	61f8      	str	r0, [r7, #28]
        break;
 8004c3c:	e009      	b.n	8004c52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c42:	61fb      	str	r3, [r7, #28]
        break;
 8004c44:	e005      	b.n	8004c52 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c50:	bf00      	nop
    }

    if (pclk != 0U)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d019      	beq.n	8004c8c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	085a      	lsrs	r2, r3, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	441a      	add	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	d909      	bls.n	8004c86 <UART_SetConfig+0x432>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c78:	d205      	bcs.n	8004c86 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	e002      	b.n	8004c8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3728      	adds	r7, #40	@ 0x28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca6:	bf00      	nop
 8004ca8:	00f42400 	.word	0x00f42400

08004cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01a      	beq.n	8004dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004daa:	d10a      	bne.n	8004dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
  }
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b098      	sub	sp, #96	@ 0x60
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e00:	f7fc ffa6 	bl	8001d50 <HAL_GetTick>
 8004e04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d12e      	bne.n	8004e72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f88c 	bl	8004f40 <UART_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d021      	beq.n	8004e72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e6      	bne.n	8004e2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e062      	b.n	8004f38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d149      	bne.n	8004f14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f856 	bl	8004f40 <UART_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d03c      	beq.n	8004f14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e6      	bne.n	8004e9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3308      	adds	r3, #8
 8004eea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eec:	61fa      	str	r2, [r7, #28]
 8004eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	69b9      	ldr	r1, [r7, #24]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e5      	bne.n	8004ecc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e011      	b.n	8004f38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3758      	adds	r7, #88	@ 0x58
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f50:	e04f      	b.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f58:	d04b      	beq.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5a:	f7fc fef9 	bl	8001d50 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d302      	bcc.n	8004f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e04e      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d037      	beq.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b80      	cmp	r3, #128	@ 0x80
 8004f86:	d034      	beq.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b40      	cmp	r3, #64	@ 0x40
 8004f8c:	d031      	beq.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d110      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f838 	bl	800501a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2208      	movs	r2, #8
 8004fae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e029      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fcc:	d111      	bne.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f81e 	bl	800501a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e00f      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	bf0c      	ite	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	2300      	movne	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	429a      	cmp	r2, r3
 800500e:	d0a0      	beq.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800501a:	b480      	push	{r7}
 800501c:	b095      	sub	sp, #84	@ 0x54
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005032:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005040:	643b      	str	r3, [r7, #64]	@ 0x40
 8005042:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005046:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800504e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e6      	bne.n	8005022 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	61fb      	str	r3, [r7, #28]
   return(result);
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3308      	adds	r3, #8
 8005072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005074:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800507a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508c:	2b01      	cmp	r3, #1
 800508e:	d118      	bne.n	80050c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	60bb      	str	r3, [r7, #8]
   return(result);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f023 0310 	bic.w	r3, r3, #16
 80050a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	613b      	str	r3, [r7, #16]
   return(result);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e6      	bne.n	8005090 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050d6:	bf00      	nop
 80050d8:	3754      	adds	r7, #84	@ 0x54
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <__NVIC_SetPriority>:
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	6039      	str	r1, [r7, #0]
 80050ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	db0a      	blt.n	800510e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	490c      	ldr	r1, [pc, #48]	@ (8005130 <__NVIC_SetPriority+0x4c>)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	0112      	lsls	r2, r2, #4
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	440b      	add	r3, r1
 8005108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800510c:	e00a      	b.n	8005124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	4908      	ldr	r1, [pc, #32]	@ (8005134 <__NVIC_SetPriority+0x50>)
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	3b04      	subs	r3, #4
 800511c:	0112      	lsls	r2, r2, #4
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	440b      	add	r3, r1
 8005122:	761a      	strb	r2, [r3, #24]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	e000e100 	.word	0xe000e100
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800513c:	4b05      	ldr	r3, [pc, #20]	@ (8005154 <SysTick_Handler+0x1c>)
 800513e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005140:	f001 fd18 	bl	8006b74 <xTaskGetSchedulerState>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d001      	beq.n	800514e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800514a:	f002 fb0d 	bl	8007768 <xPortSysTickHandler>
  }
}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	e000e010 	.word	0xe000e010

08005158 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800515c:	2100      	movs	r1, #0
 800515e:	f06f 0004 	mvn.w	r0, #4
 8005162:	f7ff ffbf 	bl	80050e4 <__NVIC_SetPriority>
#endif
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005172:	f3ef 8305 	mrs	r3, IPSR
 8005176:	603b      	str	r3, [r7, #0]
  return(result);
 8005178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800517e:	f06f 0305 	mvn.w	r3, #5
 8005182:	607b      	str	r3, [r7, #4]
 8005184:	e00c      	b.n	80051a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005186:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <osKernelInitialize+0x44>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800518e:	4b08      	ldr	r3, [pc, #32]	@ (80051b0 <osKernelInitialize+0x44>)
 8005190:	2201      	movs	r2, #1
 8005192:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005194:	2300      	movs	r3, #0
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	e002      	b.n	80051a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800519a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800519e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051a0:	687b      	ldr	r3, [r7, #4]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000360 	.word	0x20000360

080051b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ba:	f3ef 8305 	mrs	r3, IPSR
 80051be:	603b      	str	r3, [r7, #0]
  return(result);
 80051c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80051c6:	f06f 0305 	mvn.w	r3, #5
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	e010      	b.n	80051f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80051ce:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <osKernelStart+0x48>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d109      	bne.n	80051ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80051d6:	f7ff ffbf 	bl	8005158 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051da:	4b08      	ldr	r3, [pc, #32]	@ (80051fc <osKernelStart+0x48>)
 80051dc:	2202      	movs	r2, #2
 80051de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051e0:	f001 f87a 	bl	80062d8 <vTaskStartScheduler>
      stat = osOK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	607b      	str	r3, [r7, #4]
 80051e8:	e002      	b.n	80051f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051f0:	687b      	ldr	r3, [r7, #4]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000360 	.word	0x20000360

08005200 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	@ 0x38
 8005204:	af04      	add	r7, sp, #16
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005210:	f3ef 8305 	mrs	r3, IPSR
 8005214:	617b      	str	r3, [r7, #20]
  return(result);
 8005216:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005218:	2b00      	cmp	r3, #0
 800521a:	d17e      	bne.n	800531a <osThreadNew+0x11a>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d07b      	beq.n	800531a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005222:	2380      	movs	r3, #128	@ 0x80
 8005224:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005226:	2318      	movs	r3, #24
 8005228:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800522a:	2300      	movs	r3, #0
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800522e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005232:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d045      	beq.n	80052c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <osThreadNew+0x48>
        name = attr->name;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <osThreadNew+0x6e>
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b38      	cmp	r3, #56	@ 0x38
 8005260:	d805      	bhi.n	800526e <osThreadNew+0x6e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <osThreadNew+0x72>
        return (NULL);
 800526e:	2300      	movs	r3, #0
 8005270:	e054      	b.n	800531c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	089b      	lsrs	r3, r3, #2
 8005280:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00e      	beq.n	80052a8 <osThreadNew+0xa8>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005290:	d90a      	bls.n	80052a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005296:	2b00      	cmp	r3, #0
 8005298:	d006      	beq.n	80052a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <osThreadNew+0xa8>
        mem = 1;
 80052a2:	2301      	movs	r3, #1
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	e010      	b.n	80052ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10c      	bne.n	80052ca <osThreadNew+0xca>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d108      	bne.n	80052ca <osThreadNew+0xca>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <osThreadNew+0xca>
          mem = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e001      	b.n	80052ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d110      	bne.n	80052f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052d8:	9202      	str	r2, [sp, #8]
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fe1a 	bl	8005f20 <xTaskCreateStatic>
 80052ec:	4603      	mov	r3, r0
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	e013      	b.n	800531a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d110      	bne.n	800531a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fe68 	bl	8005fe0 <xTaskCreate>
 8005310:	4603      	mov	r3, r0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d001      	beq.n	800531a <osThreadNew+0x11a>
            hTask = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800531a:	693b      	ldr	r3, [r7, #16]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	@ 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800532c:	f3ef 8305 	mrs	r3, IPSR
 8005330:	60bb      	str	r3, [r7, #8]
  return(result);
 8005332:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <osDelay+0x1c>
    stat = osErrorISR;
 8005338:	f06f 0305 	mvn.w	r3, #5
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e007      	b.n	8005350 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <osDelay+0x2c>
      vTaskDelay(ticks);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 ff8e 	bl	800626c <vTaskDelay>
    }
  }

  return (stat);
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4a07      	ldr	r2, [pc, #28]	@ (8005388 <vApplicationGetIdleTaskMemory+0x2c>)
 800536c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4a06      	ldr	r2, [pc, #24]	@ (800538c <vApplicationGetIdleTaskMemory+0x30>)
 8005372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2280      	movs	r2, #128	@ 0x80
 8005378:	601a      	str	r2, [r3, #0]
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000364 	.word	0x20000364
 800538c:	200003c0 	.word	0x200003c0

08005390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4a07      	ldr	r2, [pc, #28]	@ (80053bc <vApplicationGetTimerTaskMemory+0x2c>)
 80053a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a06      	ldr	r2, [pc, #24]	@ (80053c0 <vApplicationGetTimerTaskMemory+0x30>)
 80053a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053ae:	601a      	str	r2, [r3, #0]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	200005c0 	.word	0x200005c0
 80053c0:	2000061c 	.word	0x2000061c

080053c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f103 0208 	add.w	r2, r3, #8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f103 0208 	add.w	r2, r3, #8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f103 0208 	add.w	r2, r3, #8
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800547c:	d103      	bne.n	8005486 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e00c      	b.n	80054a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3308      	adds	r3, #8
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	e002      	b.n	8005494 <vListInsert+0x2e>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	429a      	cmp	r2, r3
 800549e:	d2f6      	bcs.n	800548e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	601a      	str	r2, [r3, #0]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6892      	ldr	r2, [r2, #8]
 80054ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6852      	ldr	r2, [r2, #4]
 80054f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d103      	bne.n	800550c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	1e5a      	subs	r2, r3, #1
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	e7fd      	b.n	8005554 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005558:	f002 f876 	bl	8007648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005564:	68f9      	ldr	r1, [r7, #12]
 8005566:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	441a      	add	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005588:	3b01      	subs	r3, #1
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	441a      	add	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	22ff      	movs	r2, #255	@ 0xff
 800559c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	22ff      	movs	r2, #255	@ 0xff
 80055a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d114      	bne.n	80055d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01a      	beq.n	80055ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3310      	adds	r3, #16
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 f91a 	bl	80067f4 <xTaskRemoveFromEventList>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d012      	beq.n	80055ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055c6:	4b0d      	ldr	r3, [pc, #52]	@ (80055fc <xQueueGenericReset+0xd0>)
 80055c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	e009      	b.n	80055ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3310      	adds	r3, #16
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fef1 	bl	80053c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3324      	adds	r3, #36	@ 0x24
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff feec 	bl	80053c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055ec:	f002 f85e 	bl	80076ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055f0:	2301      	movs	r3, #1
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	e000ed04 	.word	0xe000ed04

08005600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08e      	sub	sp, #56	@ 0x38
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10b      	bne.n	800562c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005626:	bf00      	nop
 8005628:	bf00      	nop
 800562a:	e7fd      	b.n	8005628 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10b      	bne.n	800564a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <xQueueGenericCreateStatic+0x56>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <xQueueGenericCreateStatic+0x5a>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <xQueueGenericCreateStatic+0x5c>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10b      	bne.n	8005678 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	623b      	str	r3, [r7, #32]
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <xQueueGenericCreateStatic+0x84>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <xQueueGenericCreateStatic+0x88>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <xQueueGenericCreateStatic+0x8a>
 8005688:	2300      	movs	r3, #0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	61fb      	str	r3, [r7, #28]
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	e7fd      	b.n	80056a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056a6:	2350      	movs	r3, #80	@ 0x50
 80056a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b50      	cmp	r3, #80	@ 0x50
 80056ae:	d00b      	beq.n	80056c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	61bb      	str	r3, [r7, #24]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80056ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00d      	beq.n	80056f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80056e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f805 	bl	80056fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3730      	adds	r7, #48	@ 0x30
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e002      	b.n	800571c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005728:	2101      	movs	r1, #1
 800572a:	69b8      	ldr	r0, [r7, #24]
 800572c:	f7ff fefe 	bl	800552c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	78fa      	ldrb	r2, [r7, #3]
 8005734:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08e      	sub	sp, #56	@ 0x38
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800574e:	2300      	movs	r3, #0
 8005750:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <xQueueGenericSend+0x34>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	e7fd      	b.n	8005770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d103      	bne.n	8005782 <xQueueGenericSend+0x42>
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <xQueueGenericSend+0x46>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <xQueueGenericSend+0x48>
 8005786:	2300      	movs	r3, #0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <xQueueGenericSend+0x64>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d103      	bne.n	80057b2 <xQueueGenericSend+0x72>
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <xQueueGenericSend+0x76>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <xQueueGenericSend+0x78>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10b      	bne.n	80057d4 <xQueueGenericSend+0x94>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	623b      	str	r3, [r7, #32]
}
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
 80057d2:	e7fd      	b.n	80057d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057d4:	f001 f9ce 	bl	8006b74 <xTaskGetSchedulerState>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d102      	bne.n	80057e4 <xQueueGenericSend+0xa4>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <xQueueGenericSend+0xa8>
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <xQueueGenericSend+0xaa>
 80057e8:	2300      	movs	r3, #0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <xQueueGenericSend+0xc6>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	61fb      	str	r3, [r7, #28]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005806:	f001 ff1f 	bl	8007648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005812:	429a      	cmp	r2, r3
 8005814:	d302      	bcc.n	800581c <xQueueGenericSend+0xdc>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d129      	bne.n	8005870 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005822:	f000 fa0f 	bl	8005c44 <prvCopyDataToQueue>
 8005826:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	d010      	beq.n	8005852 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	3324      	adds	r3, #36	@ 0x24
 8005834:	4618      	mov	r0, r3
 8005836:	f000 ffdd 	bl	80067f4 <xTaskRemoveFromEventList>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d013      	beq.n	8005868 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005840:	4b3f      	ldr	r3, [pc, #252]	@ (8005940 <xQueueGenericSend+0x200>)
 8005842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	e00a      	b.n	8005868 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005858:	4b39      	ldr	r3, [pc, #228]	@ (8005940 <xQueueGenericSend+0x200>)
 800585a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005868:	f001 ff20 	bl	80076ac <vPortExitCritical>
				return pdPASS;
 800586c:	2301      	movs	r3, #1
 800586e:	e063      	b.n	8005938 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005876:	f001 ff19 	bl	80076ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800587a:	2300      	movs	r3, #0
 800587c:	e05c      	b.n	8005938 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800587e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	4618      	mov	r0, r3
 800588a:	f001 f817 	bl	80068bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800588e:	2301      	movs	r3, #1
 8005890:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005892:	f001 ff0b 	bl	80076ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005896:	f000 fd87 	bl	80063a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800589a:	f001 fed5 	bl	8007648 <vPortEnterCritical>
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058a4:	b25b      	sxtb	r3, r3
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058aa:	d103      	bne.n	80058b4 <xQueueGenericSend+0x174>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058ba:	b25b      	sxtb	r3, r3
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058c0:	d103      	bne.n	80058ca <xQueueGenericSend+0x18a>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058ca:	f001 feef 	bl	80076ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058ce:	1d3a      	adds	r2, r7, #4
 80058d0:	f107 0314 	add.w	r3, r7, #20
 80058d4:	4611      	mov	r1, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 f806 	bl	80068e8 <xTaskCheckForTimeOut>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d124      	bne.n	800592c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058e4:	f000 faa6 	bl	8005e34 <prvIsQueueFull>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d018      	beq.n	8005920 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	3310      	adds	r3, #16
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4611      	mov	r1, r2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 ff2a 	bl	8006750 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058fe:	f000 fa31 	bl	8005d64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005902:	f000 fd5f 	bl	80063c4 <xTaskResumeAll>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	f47f af7c 	bne.w	8005806 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800590e:	4b0c      	ldr	r3, [pc, #48]	@ (8005940 <xQueueGenericSend+0x200>)
 8005910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	e772      	b.n	8005806 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005922:	f000 fa1f 	bl	8005d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005926:	f000 fd4d 	bl	80063c4 <xTaskResumeAll>
 800592a:	e76c      	b.n	8005806 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800592c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800592e:	f000 fa19 	bl	8005d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005932:	f000 fd47 	bl	80063c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005938:	4618      	mov	r0, r3
 800593a:	3738      	adds	r7, #56	@ 0x38
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b090      	sub	sp, #64	@ 0x40
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <xQueueGenericSendFromISR+0x3e>
 800597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <xQueueGenericSendFromISR+0x42>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueGenericSendFromISR+0x44>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d103      	bne.n	80059b2 <xQueueGenericSendFromISR+0x6e>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <xQueueGenericSendFromISR+0x72>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <xQueueGenericSendFromISR+0x74>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	623b      	str	r3, [r7, #32]
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	e7fd      	b.n	80059d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059d4:	f001 ff18 	bl	8007808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059d8:	f3ef 8211 	mrs	r2, BASEPRI
 80059dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	61fa      	str	r2, [r7, #28]
 80059ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <xQueueGenericSendFromISR+0xc2>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d12f      	bne.n	8005a66 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a1c:	f000 f912 	bl	8005c44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a20:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a28:	d112      	bne.n	8005a50 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	3324      	adds	r3, #36	@ 0x24
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fedc 	bl	80067f4 <xTaskRemoveFromEventList>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00e      	beq.n	8005a60 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00b      	beq.n	8005a60 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e007      	b.n	8005a60 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a54:	3301      	adds	r3, #1
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	b25a      	sxtb	r2, r3
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005a60:	2301      	movs	r3, #1
 8005a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005a64:	e001      	b.n	8005a6a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3740      	adds	r7, #64	@ 0x40
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08c      	sub	sp, #48	@ 0x30
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <xQueueReceive+0x32>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	623b      	str	r3, [r7, #32]
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	e7fd      	b.n	8005aae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <xQueueReceive+0x40>
 8005ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <xQueueReceive+0x44>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <xQueueReceive+0x46>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <xQueueReceive+0x62>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	61fb      	str	r3, [r7, #28]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ae2:	f001 f847 	bl	8006b74 <xTaskGetSchedulerState>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <xQueueReceive+0x72>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <xQueueReceive+0x76>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <xQueueReceive+0x78>
 8005af6:	2300      	movs	r3, #0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10b      	bne.n	8005b14 <xQueueReceive+0x94>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	61bb      	str	r3, [r7, #24]
}
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b14:	f001 fd98 	bl	8007648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01f      	beq.n	8005b64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b28:	f000 f8f6 	bl	8005d18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	1e5a      	subs	r2, r3, #1
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00f      	beq.n	8005b5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3e:	3310      	adds	r3, #16
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fe57 	bl	80067f4 <xTaskRemoveFromEventList>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d007      	beq.n	8005b5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005c40 <xQueueReceive+0x1c0>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b5c:	f001 fda6 	bl	80076ac <vPortExitCritical>
				return pdPASS;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e069      	b.n	8005c38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b6a:	f001 fd9f 	bl	80076ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e062      	b.n	8005c38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b78:	f107 0310 	add.w	r3, r7, #16
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fe9d 	bl	80068bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b82:	2301      	movs	r3, #1
 8005b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b86:	f001 fd91 	bl	80076ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b8a:	f000 fc0d 	bl	80063a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b8e:	f001 fd5b 	bl	8007648 <vPortEnterCritical>
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b9e:	d103      	bne.n	8005ba8 <xQueueReceive+0x128>
 8005ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bae:	b25b      	sxtb	r3, r3
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bb4:	d103      	bne.n	8005bbe <xQueueReceive+0x13e>
 8005bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bbe:	f001 fd75 	bl	80076ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bc2:	1d3a      	adds	r2, r7, #4
 8005bc4:	f107 0310 	add.w	r3, r7, #16
 8005bc8:	4611      	mov	r1, r2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fe8c 	bl	80068e8 <xTaskCheckForTimeOut>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d123      	bne.n	8005c1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bd8:	f000 f916 	bl	8005e08 <prvIsQueueEmpty>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d017      	beq.n	8005c12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	3324      	adds	r3, #36	@ 0x24
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4611      	mov	r1, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fdb0 	bl	8006750 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bf2:	f000 f8b7 	bl	8005d64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bf6:	f000 fbe5 	bl	80063c4 <xTaskResumeAll>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d189      	bne.n	8005b14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005c00:	4b0f      	ldr	r3, [pc, #60]	@ (8005c40 <xQueueReceive+0x1c0>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	e780      	b.n	8005b14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c14:	f000 f8a6 	bl	8005d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c18:	f000 fbd4 	bl	80063c4 <xTaskResumeAll>
 8005c1c:	e77a      	b.n	8005b14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c20:	f000 f8a0 	bl	8005d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c24:	f000 fbce 	bl	80063c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c2a:	f000 f8ed 	bl	8005e08 <prvIsQueueEmpty>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f43f af6f 	beq.w	8005b14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3730      	adds	r7, #48	@ 0x30
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10d      	bne.n	8005c7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d14d      	bne.n	8005d06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 ff9e 	bl	8006bb0 <xTaskPriorityDisinherit>
 8005c74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	e043      	b.n	8005d06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d119      	bne.n	8005cb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6858      	ldr	r0, [r3, #4]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	f003 fe79 	bl	8009986 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9c:	441a      	add	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d32b      	bcc.n	8005d06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	e026      	b.n	8005d06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68d8      	ldr	r0, [r3, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	f003 fe5f 	bl	8009986 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	425b      	negs	r3, r3
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d207      	bcs.n	8005cf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cec:	425b      	negs	r3, r3
 8005cee:	441a      	add	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d105      	bne.n	8005d06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d0e:	697b      	ldr	r3, [r7, #20]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d018      	beq.n	8005d5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	441a      	add	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d303      	bcc.n	8005d4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68d9      	ldr	r1, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d54:	461a      	mov	r2, r3
 8005d56:	6838      	ldr	r0, [r7, #0]
 8005d58:	f003 fe15 	bl	8009986 <memcpy>
	}
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d6c:	f001 fc6c 	bl	8007648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d78:	e011      	b.n	8005d9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d012      	beq.n	8005da8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3324      	adds	r3, #36	@ 0x24
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fd34 	bl	80067f4 <xTaskRemoveFromEventList>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d92:	f000 fe0d 	bl	80069b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	dce9      	bgt.n	8005d7a <prvUnlockQueue+0x16>
 8005da6:	e000      	b.n	8005daa <prvUnlockQueue+0x46>
					break;
 8005da8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	22ff      	movs	r2, #255	@ 0xff
 8005dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005db2:	f001 fc7b 	bl	80076ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005db6:	f001 fc47 	bl	8007648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dc2:	e011      	b.n	8005de8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d012      	beq.n	8005df2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3310      	adds	r3, #16
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fd0f 	bl	80067f4 <xTaskRemoveFromEventList>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ddc:	f000 fde8 	bl	80069b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005de0:	7bbb      	ldrb	r3, [r7, #14]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dce9      	bgt.n	8005dc4 <prvUnlockQueue+0x60>
 8005df0:	e000      	b.n	8005df4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005df2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	22ff      	movs	r2, #255	@ 0xff
 8005df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005dfc:	f001 fc56 	bl	80076ac <vPortExitCritical>
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e10:	f001 fc1a 	bl	8007648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e001      	b.n	8005e26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e26:	f001 fc41 	bl	80076ac <vPortExitCritical>

	return xReturn;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e3c:	f001 fc04 	bl	8007648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d102      	bne.n	8005e52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e001      	b.n	8005e56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e56:	f001 fc29 	bl	80076ac <vPortExitCritical>

	return xReturn;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e014      	b.n	8005e9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e74:	4a0f      	ldr	r2, [pc, #60]	@ (8005eb4 <vQueueAddToRegistry+0x50>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e80:	490c      	ldr	r1, [pc, #48]	@ (8005eb4 <vQueueAddToRegistry+0x50>)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb4 <vQueueAddToRegistry+0x50>)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4413      	add	r3, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e96:	e006      	b.n	8005ea6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b07      	cmp	r3, #7
 8005ea2:	d9e7      	bls.n	8005e74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20000a1c 	.word	0x20000a1c

08005eb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ec8:	f001 fbbe 	bl	8007648 <vPortEnterCritical>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ed2:	b25b      	sxtb	r3, r3
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ed8:	d103      	bne.n	8005ee2 <vQueueWaitForMessageRestricted+0x2a>
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eee:	d103      	bne.n	8005ef8 <vQueueWaitForMessageRestricted+0x40>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ef8:	f001 fbd8 	bl	80076ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d106      	bne.n	8005f12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	3324      	adds	r3, #36	@ 0x24
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fc45 	bl	800679c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f7ff ff26 	bl	8005d64 <prvUnlockQueue>
	}
 8005f18:	bf00      	nop
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	@ 0x38
 8005f24:	af04      	add	r7, sp, #16
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	623b      	str	r3, [r7, #32]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	61fb      	str	r3, [r7, #28]
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	e7fd      	b.n	8005f66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f6a:	235c      	movs	r3, #92	@ 0x5c
 8005f6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f72:	d00b      	beq.n	8005f8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	61bb      	str	r3, [r7, #24]
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	e7fd      	b.n	8005f88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01e      	beq.n	8005fd2 <xTaskCreateStatic+0xb2>
 8005f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01b      	beq.n	8005fd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fa2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fac:	2300      	movs	r3, #0
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	9302      	str	r3, [sp, #8]
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f850 	bl	800606a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fcc:	f000 f8de 	bl	800618c <prvAddNewTaskToReadyList>
 8005fd0:	e001      	b.n	8005fd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fd6:	697b      	ldr	r3, [r7, #20]
	}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3728      	adds	r7, #40	@ 0x28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08c      	sub	sp, #48	@ 0x30
 8005fe4:	af04      	add	r7, sp, #16
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	4613      	mov	r3, r2
 8005fee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 fc49 	bl	800788c <pvPortMalloc>
 8005ffa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006002:	205c      	movs	r0, #92	@ 0x5c
 8006004:	f001 fc42 	bl	800788c <pvPortMalloc>
 8006008:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	631a      	str	r2, [r3, #48]	@ 0x30
 8006016:	e005      	b.n	8006024 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006018:	6978      	ldr	r0, [r7, #20]
 800601a:	f001 fd05 	bl	8007a28 <vPortFree>
 800601e:	e001      	b.n	8006024 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006020:	2300      	movs	r3, #0
 8006022:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d017      	beq.n	800605a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	2300      	movs	r3, #0
 8006036:	9303      	str	r3, [sp, #12]
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	9302      	str	r3, [sp, #8]
 800603c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f80e 	bl	800606a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800604e:	69f8      	ldr	r0, [r7, #28]
 8006050:	f000 f89c 	bl	800618c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006054:	2301      	movs	r3, #1
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	e002      	b.n	8006060 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800605e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006060:	69bb      	ldr	r3, [r7, #24]
	}
 8006062:	4618      	mov	r0, r3
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b088      	sub	sp, #32
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	461a      	mov	r2, r3
 8006082:	21a5      	movs	r1, #165	@ 0xa5
 8006084:	f003 fc46 	bl	8009914 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006092:	3b01      	subs	r3, #1
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f023 0307 	bic.w	r3, r3, #7
 80060a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	617b      	str	r3, [r7, #20]
}
 80060be:	bf00      	nop
 80060c0:	bf00      	nop
 80060c2:	e7fd      	b.n	80060c0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01f      	beq.n	800610a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	e012      	b.n	80060f6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	7819      	ldrb	r1, [r3, #0]
 80060d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	3334      	adds	r3, #52	@ 0x34
 80060e0:	460a      	mov	r2, r1
 80060e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d006      	beq.n	80060fe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	3301      	adds	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	2b0f      	cmp	r3, #15
 80060fa:	d9e9      	bls.n	80060d0 <prvInitialiseNewTask+0x66>
 80060fc:	e000      	b.n	8006100 <prvInitialiseNewTask+0x96>
			{
				break;
 80060fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006108:	e003      	b.n	8006112 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006114:	2b37      	cmp	r3, #55	@ 0x37
 8006116:	d901      	bls.n	800611c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006118:	2337      	movs	r3, #55	@ 0x37
 800611a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006120:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006126:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612a:	2200      	movs	r2, #0
 800612c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	3304      	adds	r3, #4
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff f966 	bl	8005404 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	3318      	adds	r3, #24
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff f961 	bl	8005404 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006146:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006156:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	2200      	movs	r2, #0
 800615c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	68f9      	ldr	r1, [r7, #12]
 800616a:	69b8      	ldr	r0, [r7, #24]
 800616c:	f001 f93e 	bl	80073ec <pxPortInitialiseStack>
 8006170:	4602      	mov	r2, r0
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800617c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006182:	bf00      	nop
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006194:	f001 fa58 	bl	8007648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006198:	4b2d      	ldr	r3, [pc, #180]	@ (8006250 <prvAddNewTaskToReadyList+0xc4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3301      	adds	r3, #1
 800619e:	4a2c      	ldr	r2, [pc, #176]	@ (8006250 <prvAddNewTaskToReadyList+0xc4>)
 80061a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006254 <prvAddNewTaskToReadyList+0xc8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006254 <prvAddNewTaskToReadyList+0xc8>)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061b0:	4b27      	ldr	r3, [pc, #156]	@ (8006250 <prvAddNewTaskToReadyList+0xc4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d110      	bne.n	80061da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061b8:	f000 fc1e 	bl	80069f8 <prvInitialiseTaskLists>
 80061bc:	e00d      	b.n	80061da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061be:	4b26      	ldr	r3, [pc, #152]	@ (8006258 <prvAddNewTaskToReadyList+0xcc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061c6:	4b23      	ldr	r3, [pc, #140]	@ (8006254 <prvAddNewTaskToReadyList+0xc8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d802      	bhi.n	80061da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006254 <prvAddNewTaskToReadyList+0xc8>)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061da:	4b20      	ldr	r3, [pc, #128]	@ (800625c <prvAddNewTaskToReadyList+0xd0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3301      	adds	r3, #1
 80061e0:	4a1e      	ldr	r2, [pc, #120]	@ (800625c <prvAddNewTaskToReadyList+0xd0>)
 80061e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061e4:	4b1d      	ldr	r3, [pc, #116]	@ (800625c <prvAddNewTaskToReadyList+0xd0>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <prvAddNewTaskToReadyList+0xd4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d903      	bls.n	8006200 <prvAddNewTaskToReadyList+0x74>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fc:	4a18      	ldr	r2, [pc, #96]	@ (8006260 <prvAddNewTaskToReadyList+0xd4>)
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4a15      	ldr	r2, [pc, #84]	@ (8006264 <prvAddNewTaskToReadyList+0xd8>)
 800620e:	441a      	add	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3304      	adds	r3, #4
 8006214:	4619      	mov	r1, r3
 8006216:	4610      	mov	r0, r2
 8006218:	f7ff f901 	bl	800541e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800621c:	f001 fa46 	bl	80076ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006220:	4b0d      	ldr	r3, [pc, #52]	@ (8006258 <prvAddNewTaskToReadyList+0xcc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006228:	4b0a      	ldr	r3, [pc, #40]	@ (8006254 <prvAddNewTaskToReadyList+0xc8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	429a      	cmp	r2, r3
 8006234:	d207      	bcs.n	8006246 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006236:	4b0c      	ldr	r3, [pc, #48]	@ (8006268 <prvAddNewTaskToReadyList+0xdc>)
 8006238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000f30 	.word	0x20000f30
 8006254:	20000a5c 	.word	0x20000a5c
 8006258:	20000f3c 	.word	0x20000f3c
 800625c:	20000f4c 	.word	0x20000f4c
 8006260:	20000f38 	.word	0x20000f38
 8006264:	20000a60 	.word	0x20000a60
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d018      	beq.n	80062b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800627e:	4b14      	ldr	r3, [pc, #80]	@ (80062d0 <vTaskDelay+0x64>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <vTaskDelay+0x32>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	60bb      	str	r3, [r7, #8]
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800629e:	f000 f883 	bl	80063a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062a2:	2100      	movs	r1, #0
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fcf3 	bl	8006c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062aa:	f000 f88b 	bl	80063c4 <xTaskResumeAll>
 80062ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d107      	bne.n	80062c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80062b6:	4b07      	ldr	r3, [pc, #28]	@ (80062d4 <vTaskDelay+0x68>)
 80062b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000f58 	.word	0x20000f58
 80062d4:	e000ed04 	.word	0xe000ed04

080062d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	@ 0x28
 80062dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062e6:	463a      	mov	r2, r7
 80062e8:	1d39      	adds	r1, r7, #4
 80062ea:	f107 0308 	add.w	r3, r7, #8
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff f834 	bl	800535c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	9202      	str	r2, [sp, #8]
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	2300      	movs	r3, #0
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	2300      	movs	r3, #0
 8006304:	460a      	mov	r2, r1
 8006306:	4922      	ldr	r1, [pc, #136]	@ (8006390 <vTaskStartScheduler+0xb8>)
 8006308:	4822      	ldr	r0, [pc, #136]	@ (8006394 <vTaskStartScheduler+0xbc>)
 800630a:	f7ff fe09 	bl	8005f20 <xTaskCreateStatic>
 800630e:	4603      	mov	r3, r0
 8006310:	4a21      	ldr	r2, [pc, #132]	@ (8006398 <vTaskStartScheduler+0xc0>)
 8006312:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006314:	4b20      	ldr	r3, [pc, #128]	@ (8006398 <vTaskStartScheduler+0xc0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800631c:	2301      	movs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e001      	b.n	8006326 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d102      	bne.n	8006332 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800632c:	f000 fd04 	bl	8006d38 <xTimerCreateTimerTask>
 8006330:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d116      	bne.n	8006366 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	613b      	str	r3, [r7, #16]
}
 800634a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800634c:	4b13      	ldr	r3, [pc, #76]	@ (800639c <vTaskStartScheduler+0xc4>)
 800634e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006352:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006354:	4b12      	ldr	r3, [pc, #72]	@ (80063a0 <vTaskStartScheduler+0xc8>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800635a:	4b12      	ldr	r3, [pc, #72]	@ (80063a4 <vTaskStartScheduler+0xcc>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006360:	f001 f8ce 	bl	8007500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006364:	e00f      	b.n	8006386 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800636c:	d10b      	bne.n	8006386 <vTaskStartScheduler+0xae>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	60fb      	str	r3, [r7, #12]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <vTaskStartScheduler+0xaa>
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	0800c54c 	.word	0x0800c54c
 8006394:	080069c9 	.word	0x080069c9
 8006398:	20000f54 	.word	0x20000f54
 800639c:	20000f50 	.word	0x20000f50
 80063a0:	20000f3c 	.word	0x20000f3c
 80063a4:	20000f34 	.word	0x20000f34

080063a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063ac:	4b04      	ldr	r3, [pc, #16]	@ (80063c0 <vTaskSuspendAll+0x18>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3301      	adds	r3, #1
 80063b2:	4a03      	ldr	r2, [pc, #12]	@ (80063c0 <vTaskSuspendAll+0x18>)
 80063b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063b6:	bf00      	nop
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	20000f58 	.word	0x20000f58

080063c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063d2:	4b42      	ldr	r3, [pc, #264]	@ (80064dc <xTaskResumeAll+0x118>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	603b      	str	r3, [r7, #0]
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063f2:	f001 f929 	bl	8007648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063f6:	4b39      	ldr	r3, [pc, #228]	@ (80064dc <xTaskResumeAll+0x118>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	4a37      	ldr	r2, [pc, #220]	@ (80064dc <xTaskResumeAll+0x118>)
 80063fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006400:	4b36      	ldr	r3, [pc, #216]	@ (80064dc <xTaskResumeAll+0x118>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d162      	bne.n	80064ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006408:	4b35      	ldr	r3, [pc, #212]	@ (80064e0 <xTaskResumeAll+0x11c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d05e      	beq.n	80064ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006410:	e02f      	b.n	8006472 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006412:	4b34      	ldr	r3, [pc, #208]	@ (80064e4 <xTaskResumeAll+0x120>)
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3318      	adds	r3, #24
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff f85a 	bl	80054d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3304      	adds	r3, #4
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff f855 	bl	80054d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006432:	4b2d      	ldr	r3, [pc, #180]	@ (80064e8 <xTaskResumeAll+0x124>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d903      	bls.n	8006442 <xTaskResumeAll+0x7e>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	4a2a      	ldr	r2, [pc, #168]	@ (80064e8 <xTaskResumeAll+0x124>)
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4a27      	ldr	r2, [pc, #156]	@ (80064ec <xTaskResumeAll+0x128>)
 8006450:	441a      	add	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3304      	adds	r3, #4
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f7fe ffe0 	bl	800541e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006462:	4b23      	ldr	r3, [pc, #140]	@ (80064f0 <xTaskResumeAll+0x12c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	429a      	cmp	r2, r3
 800646a:	d302      	bcc.n	8006472 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800646c:	4b21      	ldr	r3, [pc, #132]	@ (80064f4 <xTaskResumeAll+0x130>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006472:	4b1c      	ldr	r3, [pc, #112]	@ (80064e4 <xTaskResumeAll+0x120>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1cb      	bne.n	8006412 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006480:	f000 fb58 	bl	8006b34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006484:	4b1c      	ldr	r3, [pc, #112]	@ (80064f8 <xTaskResumeAll+0x134>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d010      	beq.n	80064b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006490:	f000 f846 	bl	8006520 <xTaskIncrementTick>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800649a:	4b16      	ldr	r3, [pc, #88]	@ (80064f4 <xTaskResumeAll+0x130>)
 800649c:	2201      	movs	r2, #1
 800649e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f1      	bne.n	8006490 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80064ac:	4b12      	ldr	r3, [pc, #72]	@ (80064f8 <xTaskResumeAll+0x134>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064b2:	4b10      	ldr	r3, [pc, #64]	@ (80064f4 <xTaskResumeAll+0x130>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064ba:	2301      	movs	r3, #1
 80064bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064be:	4b0f      	ldr	r3, [pc, #60]	@ (80064fc <xTaskResumeAll+0x138>)
 80064c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064ce:	f001 f8ed 	bl	80076ac <vPortExitCritical>

	return xAlreadyYielded;
 80064d2:	68bb      	ldr	r3, [r7, #8]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000f58 	.word	0x20000f58
 80064e0:	20000f30 	.word	0x20000f30
 80064e4:	20000ef0 	.word	0x20000ef0
 80064e8:	20000f38 	.word	0x20000f38
 80064ec:	20000a60 	.word	0x20000a60
 80064f0:	20000a5c 	.word	0x20000a5c
 80064f4:	20000f44 	.word	0x20000f44
 80064f8:	20000f40 	.word	0x20000f40
 80064fc:	e000ed04 	.word	0xe000ed04

08006500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006506:	4b05      	ldr	r3, [pc, #20]	@ (800651c <xTaskGetTickCount+0x1c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800650c:	687b      	ldr	r3, [r7, #4]
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000f34 	.word	0x20000f34

08006520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800652a:	4b4f      	ldr	r3, [pc, #316]	@ (8006668 <xTaskIncrementTick+0x148>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f040 8090 	bne.w	8006654 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006534:	4b4d      	ldr	r3, [pc, #308]	@ (800666c <xTaskIncrementTick+0x14c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3301      	adds	r3, #1
 800653a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800653c:	4a4b      	ldr	r2, [pc, #300]	@ (800666c <xTaskIncrementTick+0x14c>)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d121      	bne.n	800658c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006548:	4b49      	ldr	r3, [pc, #292]	@ (8006670 <xTaskIncrementTick+0x150>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	603b      	str	r3, [r7, #0]
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	e7fd      	b.n	8006566 <xTaskIncrementTick+0x46>
 800656a:	4b41      	ldr	r3, [pc, #260]	@ (8006670 <xTaskIncrementTick+0x150>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	4b40      	ldr	r3, [pc, #256]	@ (8006674 <xTaskIncrementTick+0x154>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a3e      	ldr	r2, [pc, #248]	@ (8006670 <xTaskIncrementTick+0x150>)
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	4a3e      	ldr	r2, [pc, #248]	@ (8006674 <xTaskIncrementTick+0x154>)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	4b3e      	ldr	r3, [pc, #248]	@ (8006678 <xTaskIncrementTick+0x158>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3301      	adds	r3, #1
 8006584:	4a3c      	ldr	r2, [pc, #240]	@ (8006678 <xTaskIncrementTick+0x158>)
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	f000 fad4 	bl	8006b34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800658c:	4b3b      	ldr	r3, [pc, #236]	@ (800667c <xTaskIncrementTick+0x15c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	429a      	cmp	r2, r3
 8006594:	d349      	bcc.n	800662a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006596:	4b36      	ldr	r3, [pc, #216]	@ (8006670 <xTaskIncrementTick+0x150>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a0:	4b36      	ldr	r3, [pc, #216]	@ (800667c <xTaskIncrementTick+0x15c>)
 80065a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065a6:	601a      	str	r2, [r3, #0]
					break;
 80065a8:	e03f      	b.n	800662a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065aa:	4b31      	ldr	r3, [pc, #196]	@ (8006670 <xTaskIncrementTick+0x150>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d203      	bcs.n	80065ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065c2:	4a2e      	ldr	r2, [pc, #184]	@ (800667c <xTaskIncrementTick+0x15c>)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065c8:	e02f      	b.n	800662a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	3304      	adds	r3, #4
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe ff82 	bl	80054d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	3318      	adds	r3, #24
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe ff79 	bl	80054d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ea:	4b25      	ldr	r3, [pc, #148]	@ (8006680 <xTaskIncrementTick+0x160>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d903      	bls.n	80065fa <xTaskIncrementTick+0xda>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	4a22      	ldr	r2, [pc, #136]	@ (8006680 <xTaskIncrementTick+0x160>)
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4a1f      	ldr	r2, [pc, #124]	@ (8006684 <xTaskIncrementTick+0x164>)
 8006608:	441a      	add	r2, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	3304      	adds	r3, #4
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f7fe ff04 	bl	800541e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661a:	4b1b      	ldr	r3, [pc, #108]	@ (8006688 <xTaskIncrementTick+0x168>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	429a      	cmp	r2, r3
 8006622:	d3b8      	bcc.n	8006596 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006624:	2301      	movs	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006628:	e7b5      	b.n	8006596 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800662a:	4b17      	ldr	r3, [pc, #92]	@ (8006688 <xTaskIncrementTick+0x168>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006630:	4914      	ldr	r1, [pc, #80]	@ (8006684 <xTaskIncrementTick+0x164>)
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	440b      	add	r3, r1
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d901      	bls.n	8006646 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006642:	2301      	movs	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006646:	4b11      	ldr	r3, [pc, #68]	@ (800668c <xTaskIncrementTick+0x16c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800664e:	2301      	movs	r3, #1
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	e004      	b.n	800665e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006654:	4b0e      	ldr	r3, [pc, #56]	@ (8006690 <xTaskIncrementTick+0x170>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3301      	adds	r3, #1
 800665a:	4a0d      	ldr	r2, [pc, #52]	@ (8006690 <xTaskIncrementTick+0x170>)
 800665c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800665e:	697b      	ldr	r3, [r7, #20]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20000f58 	.word	0x20000f58
 800666c:	20000f34 	.word	0x20000f34
 8006670:	20000ee8 	.word	0x20000ee8
 8006674:	20000eec 	.word	0x20000eec
 8006678:	20000f48 	.word	0x20000f48
 800667c:	20000f50 	.word	0x20000f50
 8006680:	20000f38 	.word	0x20000f38
 8006684:	20000a60 	.word	0x20000a60
 8006688:	20000a5c 	.word	0x20000a5c
 800668c:	20000f44 	.word	0x20000f44
 8006690:	20000f40 	.word	0x20000f40

08006694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800669a:	4b28      	ldr	r3, [pc, #160]	@ (800673c <vTaskSwitchContext+0xa8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066a2:	4b27      	ldr	r3, [pc, #156]	@ (8006740 <vTaskSwitchContext+0xac>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066a8:	e042      	b.n	8006730 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80066aa:	4b25      	ldr	r3, [pc, #148]	@ (8006740 <vTaskSwitchContext+0xac>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b0:	4b24      	ldr	r3, [pc, #144]	@ (8006744 <vTaskSwitchContext+0xb0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	e011      	b.n	80066dc <vTaskSwitchContext+0x48>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10b      	bne.n	80066d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	e7fd      	b.n	80066d2 <vTaskSwitchContext+0x3e>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3b01      	subs	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	491a      	ldr	r1, [pc, #104]	@ (8006748 <vTaskSwitchContext+0xb4>)
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0e3      	beq.n	80066b8 <vTaskSwitchContext+0x24>
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4a13      	ldr	r2, [pc, #76]	@ (8006748 <vTaskSwitchContext+0xb4>)
 80066fc:	4413      	add	r3, r2
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	605a      	str	r2, [r3, #4]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	3308      	adds	r3, #8
 8006712:	429a      	cmp	r2, r3
 8006714:	d104      	bne.n	8006720 <vTaskSwitchContext+0x8c>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	605a      	str	r2, [r3, #4]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	4a09      	ldr	r2, [pc, #36]	@ (800674c <vTaskSwitchContext+0xb8>)
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	4a06      	ldr	r2, [pc, #24]	@ (8006744 <vTaskSwitchContext+0xb0>)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6013      	str	r3, [r2, #0]
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	20000f58 	.word	0x20000f58
 8006740:	20000f44 	.word	0x20000f44
 8006744:	20000f38 	.word	0x20000f38
 8006748:	20000a60 	.word	0x20000a60
 800674c:	20000a5c 	.word	0x20000a5c

08006750 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	60fb      	str	r3, [r7, #12]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006778:	4b07      	ldr	r3, [pc, #28]	@ (8006798 <vTaskPlaceOnEventList+0x48>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3318      	adds	r3, #24
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7fe fe70 	bl	8005466 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006786:	2101      	movs	r1, #1
 8006788:	6838      	ldr	r0, [r7, #0]
 800678a:	f000 fa81 	bl	8006c90 <prvAddCurrentTaskToDelayedList>
}
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000a5c 	.word	0x20000a5c

0800679c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10b      	bne.n	80067c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	617b      	str	r3, [r7, #20]
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	e7fd      	b.n	80067c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067c6:	4b0a      	ldr	r3, [pc, #40]	@ (80067f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3318      	adds	r3, #24
 80067cc:	4619      	mov	r1, r3
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7fe fe25 	bl	800541e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	68b8      	ldr	r0, [r7, #8]
 80067e4:	f000 fa54 	bl	8006c90 <prvAddCurrentTaskToDelayedList>
	}
 80067e8:	bf00      	nop
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000a5c 	.word	0x20000a5c

080067f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60fb      	str	r3, [r7, #12]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	3318      	adds	r3, #24
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe fe56 	bl	80054d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800682c:	4b1d      	ldr	r3, [pc, #116]	@ (80068a4 <xTaskRemoveFromEventList+0xb0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11d      	bne.n	8006870 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3304      	adds	r3, #4
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe fe4d 	bl	80054d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006842:	4b19      	ldr	r3, [pc, #100]	@ (80068a8 <xTaskRemoveFromEventList+0xb4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d903      	bls.n	8006852 <xTaskRemoveFromEventList+0x5e>
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684e:	4a16      	ldr	r2, [pc, #88]	@ (80068a8 <xTaskRemoveFromEventList+0xb4>)
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4a13      	ldr	r2, [pc, #76]	@ (80068ac <xTaskRemoveFromEventList+0xb8>)
 8006860:	441a      	add	r2, r3
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3304      	adds	r3, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f7fe fdd8 	bl	800541e <vListInsertEnd>
 800686e:	e005      	b.n	800687c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	3318      	adds	r3, #24
 8006874:	4619      	mov	r1, r3
 8006876:	480e      	ldr	r0, [pc, #56]	@ (80068b0 <xTaskRemoveFromEventList+0xbc>)
 8006878:	f7fe fdd1 	bl	800541e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006880:	4b0c      	ldr	r3, [pc, #48]	@ (80068b4 <xTaskRemoveFromEventList+0xc0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	429a      	cmp	r2, r3
 8006888:	d905      	bls.n	8006896 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800688a:	2301      	movs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800688e:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <xTaskRemoveFromEventList+0xc4>)
 8006890:	2201      	movs	r2, #1
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e001      	b.n	800689a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800689a:	697b      	ldr	r3, [r7, #20]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000f58 	.word	0x20000f58
 80068a8:	20000f38 	.word	0x20000f38
 80068ac:	20000a60 	.word	0x20000a60
 80068b0:	20000ef0 	.word	0x20000ef0
 80068b4:	20000a5c 	.word	0x20000a5c
 80068b8:	20000f44 	.word	0x20000f44

080068bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068c4:	4b06      	ldr	r3, [pc, #24]	@ (80068e0 <vTaskInternalSetTimeOutState+0x24>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068cc:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <vTaskInternalSetTimeOutState+0x28>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	605a      	str	r2, [r3, #4]
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	20000f48 	.word	0x20000f48
 80068e4:	20000f34 	.word	0x20000f34

080068e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10b      	bne.n	8006910 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	613b      	str	r3, [r7, #16]
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	e7fd      	b.n	800690c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10b      	bne.n	800692e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800692e:	f000 fe8b 	bl	8007648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006932:	4b1d      	ldr	r3, [pc, #116]	@ (80069a8 <xTaskCheckForTimeOut+0xc0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800694a:	d102      	bne.n	8006952 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800694c:	2300      	movs	r3, #0
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	e023      	b.n	800699a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b15      	ldr	r3, [pc, #84]	@ (80069ac <xTaskCheckForTimeOut+0xc4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d007      	beq.n	800696e <xTaskCheckForTimeOut+0x86>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	429a      	cmp	r2, r3
 8006966:	d302      	bcc.n	800696e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006968:	2301      	movs	r3, #1
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	e015      	b.n	800699a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	429a      	cmp	r2, r3
 8006976:	d20b      	bcs.n	8006990 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ff99 	bl	80068bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	e004      	b.n	800699a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006996:	2301      	movs	r3, #1
 8006998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800699a:	f000 fe87 	bl	80076ac <vPortExitCritical>

	return xReturn;
 800699e:	69fb      	ldr	r3, [r7, #28]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3720      	adds	r7, #32
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000f34 	.word	0x20000f34
 80069ac:	20000f48 	.word	0x20000f48

080069b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069b4:	4b03      	ldr	r3, [pc, #12]	@ (80069c4 <vTaskMissedYield+0x14>)
 80069b6:	2201      	movs	r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
}
 80069ba:	bf00      	nop
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	20000f44 	.word	0x20000f44

080069c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069d0:	f000 f852 	bl	8006a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069d4:	4b06      	ldr	r3, [pc, #24]	@ (80069f0 <prvIdleTask+0x28>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d9f9      	bls.n	80069d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069dc:	4b05      	ldr	r3, [pc, #20]	@ (80069f4 <prvIdleTask+0x2c>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069ec:	e7f0      	b.n	80069d0 <prvIdleTask+0x8>
 80069ee:	bf00      	nop
 80069f0:	20000a60 	.word	0x20000a60
 80069f4:	e000ed04 	.word	0xe000ed04

080069f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069fe:	2300      	movs	r3, #0
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	e00c      	b.n	8006a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4a12      	ldr	r2, [pc, #72]	@ (8006a58 <prvInitialiseTaskLists+0x60>)
 8006a10:	4413      	add	r3, r2
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fcd6 	bl	80053c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b37      	cmp	r3, #55	@ 0x37
 8006a22:	d9ef      	bls.n	8006a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a24:	480d      	ldr	r0, [pc, #52]	@ (8006a5c <prvInitialiseTaskLists+0x64>)
 8006a26:	f7fe fccd 	bl	80053c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a2a:	480d      	ldr	r0, [pc, #52]	@ (8006a60 <prvInitialiseTaskLists+0x68>)
 8006a2c:	f7fe fcca 	bl	80053c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a30:	480c      	ldr	r0, [pc, #48]	@ (8006a64 <prvInitialiseTaskLists+0x6c>)
 8006a32:	f7fe fcc7 	bl	80053c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a36:	480c      	ldr	r0, [pc, #48]	@ (8006a68 <prvInitialiseTaskLists+0x70>)
 8006a38:	f7fe fcc4 	bl	80053c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a3c:	480b      	ldr	r0, [pc, #44]	@ (8006a6c <prvInitialiseTaskLists+0x74>)
 8006a3e:	f7fe fcc1 	bl	80053c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a42:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <prvInitialiseTaskLists+0x78>)
 8006a44:	4a05      	ldr	r2, [pc, #20]	@ (8006a5c <prvInitialiseTaskLists+0x64>)
 8006a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a48:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <prvInitialiseTaskLists+0x7c>)
 8006a4a:	4a05      	ldr	r2, [pc, #20]	@ (8006a60 <prvInitialiseTaskLists+0x68>)
 8006a4c:	601a      	str	r2, [r3, #0]
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000a60 	.word	0x20000a60
 8006a5c:	20000ec0 	.word	0x20000ec0
 8006a60:	20000ed4 	.word	0x20000ed4
 8006a64:	20000ef0 	.word	0x20000ef0
 8006a68:	20000f04 	.word	0x20000f04
 8006a6c:	20000f1c 	.word	0x20000f1c
 8006a70:	20000ee8 	.word	0x20000ee8
 8006a74:	20000eec 	.word	0x20000eec

08006a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a7e:	e019      	b.n	8006ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a80:	f000 fde2 	bl	8007648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a84:	4b10      	ldr	r3, [pc, #64]	@ (8006ac8 <prvCheckTasksWaitingTermination+0x50>)
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe fd21 	bl	80054d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a96:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <prvCheckTasksWaitingTermination+0x54>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006acc <prvCheckTasksWaitingTermination+0x54>)
 8006a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <prvCheckTasksWaitingTermination+0x58>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad0 <prvCheckTasksWaitingTermination+0x58>)
 8006aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aaa:	f000 fdff 	bl	80076ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f810 	bl	8006ad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ab4:	4b06      	ldr	r3, [pc, #24]	@ (8006ad0 <prvCheckTasksWaitingTermination+0x58>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e1      	bne.n	8006a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000f04 	.word	0x20000f04
 8006acc:	20000f30 	.word	0x20000f30
 8006ad0:	20000f18 	.word	0x20000f18

08006ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d108      	bne.n	8006af8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 ff9c 	bl	8007a28 <vPortFree>
				vPortFree( pxTCB );
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 ff99 	bl	8007a28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006af6:	e019      	b.n	8006b2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d103      	bne.n	8006b0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 ff90 	bl	8007a28 <vPortFree>
	}
 8006b08:	e010      	b.n	8006b2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d00b      	beq.n	8006b2c <prvDeleteTCB+0x58>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60fb      	str	r3, [r7, #12]
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	e7fd      	b.n	8006b28 <prvDeleteTCB+0x54>
	}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b6c <prvResetNextTaskUnblockTime+0x38>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d104      	bne.n	8006b4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b44:	4b0a      	ldr	r3, [pc, #40]	@ (8006b70 <prvResetNextTaskUnblockTime+0x3c>)
 8006b46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b4c:	e008      	b.n	8006b60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b4e:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <prvResetNextTaskUnblockTime+0x38>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	4a04      	ldr	r2, [pc, #16]	@ (8006b70 <prvResetNextTaskUnblockTime+0x3c>)
 8006b5e:	6013      	str	r3, [r2, #0]
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	20000ee8 	.word	0x20000ee8
 8006b70:	20000f50 	.word	0x20000f50

08006b74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <xTaskGetSchedulerState+0x34>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b82:	2301      	movs	r3, #1
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	e008      	b.n	8006b9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b88:	4b08      	ldr	r3, [pc, #32]	@ (8006bac <xTaskGetSchedulerState+0x38>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b90:	2302      	movs	r3, #2
 8006b92:	607b      	str	r3, [r7, #4]
 8006b94:	e001      	b.n	8006b9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b96:	2300      	movs	r3, #0
 8006b98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b9a:	687b      	ldr	r3, [r7, #4]
	}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	20000f3c 	.word	0x20000f3c
 8006bac:	20000f58 	.word	0x20000f58

08006bb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d058      	beq.n	8006c78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8006c84 <xTaskPriorityDisinherit+0xd4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d00b      	beq.n	8006be8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	60fb      	str	r3, [r7, #12]
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	60bb      	str	r3, [r7, #8]
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0c:	1e5a      	subs	r2, r3, #1
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d02c      	beq.n	8006c78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d128      	bne.n	8006c78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fc54 	bl	80054d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c48:	4b0f      	ldr	r3, [pc, #60]	@ (8006c88 <xTaskPriorityDisinherit+0xd8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d903      	bls.n	8006c58 <xTaskPriorityDisinherit+0xa8>
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	4a0c      	ldr	r2, [pc, #48]	@ (8006c88 <xTaskPriorityDisinherit+0xd8>)
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4a09      	ldr	r2, [pc, #36]	@ (8006c8c <xTaskPriorityDisinherit+0xdc>)
 8006c66:	441a      	add	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7fe fbd5 	bl	800541e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c78:	697b      	ldr	r3, [r7, #20]
	}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000a5c 	.word	0x20000a5c
 8006c88:	20000f38 	.word	0x20000f38
 8006c8c:	20000a60 	.word	0x20000a60

08006c90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c9a:	4b21      	ldr	r3, [pc, #132]	@ (8006d20 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ca0:	4b20      	ldr	r3, [pc, #128]	@ (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fc16 	bl	80054d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cb2:	d10a      	bne.n	8006cca <prvAddCurrentTaskToDelayedList+0x3a>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cba:	4b1a      	ldr	r3, [pc, #104]	@ (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4819      	ldr	r0, [pc, #100]	@ (8006d28 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cc4:	f7fe fbab 	bl	800541e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cc8:	e026      	b.n	8006d18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4413      	add	r3, r2
 8006cd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cd2:	4b14      	ldr	r3, [pc, #80]	@ (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d209      	bcs.n	8006cf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ce2:	4b12      	ldr	r3, [pc, #72]	@ (8006d2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f7fe fbb9 	bl	8005466 <vListInsert>
}
 8006cf4:	e010      	b.n	8006d18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f7fe fbaf 	bl	8005466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d08:	4b0a      	ldr	r3, [pc, #40]	@ (8006d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d202      	bcs.n	8006d18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d12:	4a08      	ldr	r2, [pc, #32]	@ (8006d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6013      	str	r3, [r2, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000f34 	.word	0x20000f34
 8006d24:	20000a5c 	.word	0x20000a5c
 8006d28:	20000f1c 	.word	0x20000f1c
 8006d2c:	20000eec 	.word	0x20000eec
 8006d30:	20000ee8 	.word	0x20000ee8
 8006d34:	20000f50 	.word	0x20000f50

08006d38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	@ 0x28
 8006d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d42:	f000 fb13 	bl	800736c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d46:	4b1d      	ldr	r3, [pc, #116]	@ (8006dbc <xTimerCreateTimerTask+0x84>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d021      	beq.n	8006d92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d56:	1d3a      	adds	r2, r7, #4
 8006d58:	f107 0108 	add.w	r1, r7, #8
 8006d5c:	f107 030c 	add.w	r3, r7, #12
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fb15 	bl	8005390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	9202      	str	r2, [sp, #8]
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	2302      	movs	r3, #2
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	460a      	mov	r2, r1
 8006d78:	4911      	ldr	r1, [pc, #68]	@ (8006dc0 <xTimerCreateTimerTask+0x88>)
 8006d7a:	4812      	ldr	r0, [pc, #72]	@ (8006dc4 <xTimerCreateTimerTask+0x8c>)
 8006d7c:	f7ff f8d0 	bl	8005f20 <xTaskCreateStatic>
 8006d80:	4603      	mov	r3, r0
 8006d82:	4a11      	ldr	r2, [pc, #68]	@ (8006dc8 <xTimerCreateTimerTask+0x90>)
 8006d84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d86:	4b10      	ldr	r3, [pc, #64]	@ (8006dc8 <xTimerCreateTimerTask+0x90>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10b      	bne.n	8006db0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	613b      	str	r3, [r7, #16]
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	e7fd      	b.n	8006dac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006db0:	697b      	ldr	r3, [r7, #20]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000f8c 	.word	0x20000f8c
 8006dc0:	0800c554 	.word	0x0800c554
 8006dc4:	08006f05 	.word	0x08006f05
 8006dc8:	20000f90 	.word	0x20000f90

08006dcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	@ 0x28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <xTimerGenericCommand+0x30>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	623b      	str	r3, [r7, #32]
}
 8006df6:	bf00      	nop
 8006df8:	bf00      	nop
 8006dfa:	e7fd      	b.n	8006df8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dfc:	4b19      	ldr	r3, [pc, #100]	@ (8006e64 <xTimerGenericCommand+0x98>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d02a      	beq.n	8006e5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b05      	cmp	r3, #5
 8006e14:	dc18      	bgt.n	8006e48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e16:	f7ff fead 	bl	8006b74 <xTaskGetSchedulerState>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d109      	bne.n	8006e34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e20:	4b10      	ldr	r3, [pc, #64]	@ (8006e64 <xTimerGenericCommand+0x98>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	f107 0110 	add.w	r1, r7, #16
 8006e28:	2300      	movs	r3, #0
 8006e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e2c:	f7fe fc88 	bl	8005740 <xQueueGenericSend>
 8006e30:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e32:	e012      	b.n	8006e5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e34:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <xTimerGenericCommand+0x98>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	f107 0110 	add.w	r1, r7, #16
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f7fe fc7e 	bl	8005740 <xQueueGenericSend>
 8006e44:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e46:	e008      	b.n	8006e5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e48:	4b06      	ldr	r3, [pc, #24]	@ (8006e64 <xTimerGenericCommand+0x98>)
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	f107 0110 	add.w	r1, r7, #16
 8006e50:	2300      	movs	r3, #0
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	f7fe fd76 	bl	8005944 <xQueueGenericSendFromISR>
 8006e58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3728      	adds	r7, #40	@ 0x28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000f8c 	.word	0x20000f8c

08006e68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e72:	4b23      	ldr	r3, [pc, #140]	@ (8006f00 <prvProcessExpiredTimer+0x98>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe fb29 	bl	80054d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d023      	beq.n	8006edc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	18d1      	adds	r1, r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	6978      	ldr	r0, [r7, #20]
 8006ea2:	f000 f8d5 	bl	8007050 <prvInsertTimerInActiveList>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d020      	beq.n	8006eee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eac:	2300      	movs	r3, #0
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6978      	ldr	r0, [r7, #20]
 8006eb8:	f7ff ff88 	bl	8006dcc <xTimerGenericCommand>
 8006ebc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d114      	bne.n	8006eee <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60fb      	str	r3, [r7, #12]
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	e7fd      	b.n	8006ed8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	6978      	ldr	r0, [r7, #20]
 8006ef4:	4798      	blx	r3
}
 8006ef6:	bf00      	nop
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000f84 	.word	0x20000f84

08006f04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f0c:	f107 0308 	add.w	r3, r7, #8
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 f859 	bl	8006fc8 <prvGetNextExpireTime>
 8006f16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f805 	bl	8006f2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f22:	f000 f8d7 	bl	80070d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f26:	bf00      	nop
 8006f28:	e7f0      	b.n	8006f0c <prvTimerTask+0x8>
	...

08006f2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f36:	f7ff fa37 	bl	80063a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f3a:	f107 0308 	add.w	r3, r7, #8
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 f866 	bl	8007010 <prvSampleTimeNow>
 8006f44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d130      	bne.n	8006fae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <prvProcessTimerOrBlockTask+0x3c>
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d806      	bhi.n	8006f68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f5a:	f7ff fa33 	bl	80063c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f5e:	68f9      	ldr	r1, [r7, #12]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff ff81 	bl	8006e68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f66:	e024      	b.n	8006fb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f6e:	4b13      	ldr	r3, [pc, #76]	@ (8006fbc <prvProcessTimerOrBlockTask+0x90>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <prvProcessTimerOrBlockTask+0x50>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <prvProcessTimerOrBlockTask+0x52>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f80:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc0 <prvProcessTimerOrBlockTask+0x94>)
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	f7fe ff93 	bl	8005eb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f92:	f7ff fa17 	bl	80063c4 <xTaskResumeAll>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f9c:	4b09      	ldr	r3, [pc, #36]	@ (8006fc4 <prvProcessTimerOrBlockTask+0x98>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
}
 8006fac:	e001      	b.n	8006fb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fae:	f7ff fa09 	bl	80063c4 <xTaskResumeAll>
}
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000f88 	.word	0x20000f88
 8006fc0:	20000f8c 	.word	0x20000f8c
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800700c <prvGetNextExpireTime+0x44>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <prvGetNextExpireTime+0x16>
 8006fda:	2201      	movs	r2, #1
 8006fdc:	e000      	b.n	8006fe0 <prvGetNextExpireTime+0x18>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d105      	bne.n	8006ff8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fec:	4b07      	ldr	r3, [pc, #28]	@ (800700c <prvGetNextExpireTime+0x44>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e001      	b.n	8006ffc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20000f84 	.word	0x20000f84

08007010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007018:	f7ff fa72 	bl	8006500 <xTaskGetTickCount>
 800701c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800701e:	4b0b      	ldr	r3, [pc, #44]	@ (800704c <prvSampleTimeNow+0x3c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d205      	bcs.n	8007034 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007028:	f000 f93a 	bl	80072a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e002      	b.n	800703a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800703a:	4a04      	ldr	r2, [pc, #16]	@ (800704c <prvSampleTimeNow+0x3c>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007040:	68fb      	ldr	r3, [r7, #12]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000f94 	.word	0x20000f94

08007050 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	429a      	cmp	r2, r3
 8007074:	d812      	bhi.n	800709c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	429a      	cmp	r2, r3
 8007082:	d302      	bcc.n	800708a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007084:	2301      	movs	r3, #1
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	e01b      	b.n	80070c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800708a:	4b10      	ldr	r3, [pc, #64]	@ (80070cc <prvInsertTimerInActiveList+0x7c>)
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3304      	adds	r3, #4
 8007092:	4619      	mov	r1, r3
 8007094:	4610      	mov	r0, r2
 8007096:	f7fe f9e6 	bl	8005466 <vListInsert>
 800709a:	e012      	b.n	80070c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d206      	bcs.n	80070b2 <prvInsertTimerInActiveList+0x62>
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	e007      	b.n	80070c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070b2:	4b07      	ldr	r3, [pc, #28]	@ (80070d0 <prvInsertTimerInActiveList+0x80>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3304      	adds	r3, #4
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f7fe f9d2 	bl	8005466 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070c2:	697b      	ldr	r3, [r7, #20]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000f88 	.word	0x20000f88
 80070d0:	20000f84 	.word	0x20000f84

080070d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08e      	sub	sp, #56	@ 0x38
 80070d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070da:	e0ce      	b.n	800727a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	da19      	bge.n	8007116 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070e2:	1d3b      	adds	r3, r7, #4
 80070e4:	3304      	adds	r3, #4
 80070e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	61fb      	str	r3, [r7, #28]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800710c:	6850      	ldr	r0, [r2, #4]
 800710e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007110:	6892      	ldr	r2, [r2, #8]
 8007112:	4611      	mov	r1, r2
 8007114:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	f2c0 80ae 	blt.w	800727a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800712a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712c:	3304      	adds	r3, #4
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe f9d2 	bl	80054d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007134:	463b      	mov	r3, r7
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff ff6a 	bl	8007010 <prvSampleTimeNow>
 800713c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b09      	cmp	r3, #9
 8007142:	f200 8097 	bhi.w	8007274 <prvProcessReceivedCommands+0x1a0>
 8007146:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <prvProcessReceivedCommands+0x78>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	08007175 	.word	0x08007175
 8007150:	08007175 	.word	0x08007175
 8007154:	08007175 	.word	0x08007175
 8007158:	080071eb 	.word	0x080071eb
 800715c:	080071ff 	.word	0x080071ff
 8007160:	0800724b 	.word	0x0800724b
 8007164:	08007175 	.word	0x08007175
 8007168:	08007175 	.word	0x08007175
 800716c:	080071eb 	.word	0x080071eb
 8007170:	080071ff 	.word	0x080071ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	b2da      	uxtb	r2, r3
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	18d1      	adds	r1, r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007194:	f7ff ff5c 	bl	8007050 <prvInsertTimerInActiveList>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d06c      	beq.n	8007278 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d061      	beq.n	8007278 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	441a      	add	r2, r3
 80071bc:	2300      	movs	r3, #0
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	2300      	movs	r3, #0
 80071c2:	2100      	movs	r1, #0
 80071c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c6:	f7ff fe01 	bl	8006dcc <xTimerGenericCommand>
 80071ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d152      	bne.n	8007278 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	61bb      	str	r3, [r7, #24]
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
 80071e8:	e7fd      	b.n	80071e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80071fc:	e03d      	b.n	800727a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	b2da      	uxtb	r2, r3
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10b      	bne.n	8007236 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	617b      	str	r3, [r7, #20]
}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	e7fd      	b.n	8007232 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	18d1      	adds	r1, r2, r3
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007244:	f7ff ff04 	bl	8007050 <prvInsertTimerInActiveList>
					break;
 8007248:	e017      	b.n	800727a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d103      	bne.n	8007260 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800725a:	f000 fbe5 	bl	8007a28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800725e:	e00c      	b.n	800727a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007266:	f023 0301 	bic.w	r3, r3, #1
 800726a:	b2da      	uxtb	r2, r3
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007272:	e002      	b.n	800727a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007274:	bf00      	nop
 8007276:	e000      	b.n	800727a <prvProcessReceivedCommands+0x1a6>
					break;
 8007278:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800727a:	4b08      	ldr	r3, [pc, #32]	@ (800729c <prvProcessReceivedCommands+0x1c8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	1d39      	adds	r1, r7, #4
 8007280:	2200      	movs	r2, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fbfc 	bl	8005a80 <xQueueReceive>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	f47f af26 	bne.w	80070dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	3730      	adds	r7, #48	@ 0x30
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000f8c 	.word	0x20000f8c

080072a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072a6:	e049      	b.n	800733c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007364 <prvSwitchTimerLists+0xc4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007364 <prvSwitchTimerLists+0xc4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3304      	adds	r3, #4
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fe f909 	bl	80054d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d02f      	beq.n	800733c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4413      	add	r3, r2
 80072e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d90e      	bls.n	800730c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007364 <prvSwitchTimerLists+0xc4>)
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3304      	adds	r3, #4
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f7fe f8ae 	bl	8005466 <vListInsert>
 800730a:	e017      	b.n	800733c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800730c:	2300      	movs	r3, #0
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7ff fd58 	bl	8006dcc <xTimerGenericCommand>
 800731c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10b      	bne.n	800733c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	603b      	str	r3, [r7, #0]
}
 8007336:	bf00      	nop
 8007338:	bf00      	nop
 800733a:	e7fd      	b.n	8007338 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800733c:	4b09      	ldr	r3, [pc, #36]	@ (8007364 <prvSwitchTimerLists+0xc4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1b0      	bne.n	80072a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007346:	4b07      	ldr	r3, [pc, #28]	@ (8007364 <prvSwitchTimerLists+0xc4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800734c:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <prvSwitchTimerLists+0xc8>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a04      	ldr	r2, [pc, #16]	@ (8007364 <prvSwitchTimerLists+0xc4>)
 8007352:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007354:	4a04      	ldr	r2, [pc, #16]	@ (8007368 <prvSwitchTimerLists+0xc8>)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	6013      	str	r3, [r2, #0]
}
 800735a:	bf00      	nop
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000f84 	.word	0x20000f84
 8007368:	20000f88 	.word	0x20000f88

0800736c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007372:	f000 f969 	bl	8007648 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007376:	4b15      	ldr	r3, [pc, #84]	@ (80073cc <prvCheckForValidListAndQueue+0x60>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d120      	bne.n	80073c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800737e:	4814      	ldr	r0, [pc, #80]	@ (80073d0 <prvCheckForValidListAndQueue+0x64>)
 8007380:	f7fe f820 	bl	80053c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007384:	4813      	ldr	r0, [pc, #76]	@ (80073d4 <prvCheckForValidListAndQueue+0x68>)
 8007386:	f7fe f81d 	bl	80053c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800738a:	4b13      	ldr	r3, [pc, #76]	@ (80073d8 <prvCheckForValidListAndQueue+0x6c>)
 800738c:	4a10      	ldr	r2, [pc, #64]	@ (80073d0 <prvCheckForValidListAndQueue+0x64>)
 800738e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007390:	4b12      	ldr	r3, [pc, #72]	@ (80073dc <prvCheckForValidListAndQueue+0x70>)
 8007392:	4a10      	ldr	r2, [pc, #64]	@ (80073d4 <prvCheckForValidListAndQueue+0x68>)
 8007394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007396:	2300      	movs	r3, #0
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	4b11      	ldr	r3, [pc, #68]	@ (80073e0 <prvCheckForValidListAndQueue+0x74>)
 800739c:	4a11      	ldr	r2, [pc, #68]	@ (80073e4 <prvCheckForValidListAndQueue+0x78>)
 800739e:	2110      	movs	r1, #16
 80073a0:	200a      	movs	r0, #10
 80073a2:	f7fe f92d 	bl	8005600 <xQueueGenericCreateStatic>
 80073a6:	4603      	mov	r3, r0
 80073a8:	4a08      	ldr	r2, [pc, #32]	@ (80073cc <prvCheckForValidListAndQueue+0x60>)
 80073aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073ac:	4b07      	ldr	r3, [pc, #28]	@ (80073cc <prvCheckForValidListAndQueue+0x60>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073b4:	4b05      	ldr	r3, [pc, #20]	@ (80073cc <prvCheckForValidListAndQueue+0x60>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	490b      	ldr	r1, [pc, #44]	@ (80073e8 <prvCheckForValidListAndQueue+0x7c>)
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fe fd52 	bl	8005e64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073c0:	f000 f974 	bl	80076ac <vPortExitCritical>
}
 80073c4:	bf00      	nop
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000f8c 	.word	0x20000f8c
 80073d0:	20000f5c 	.word	0x20000f5c
 80073d4:	20000f70 	.word	0x20000f70
 80073d8:	20000f84 	.word	0x20000f84
 80073dc:	20000f88 	.word	0x20000f88
 80073e0:	20001038 	.word	0x20001038
 80073e4:	20000f98 	.word	0x20000f98
 80073e8:	0800c55c 	.word	0x0800c55c

080073ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3b04      	subs	r3, #4
 80073fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b04      	subs	r3, #4
 800740a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f023 0201 	bic.w	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3b04      	subs	r3, #4
 800741a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800741c:	4a0c      	ldr	r2, [pc, #48]	@ (8007450 <pxPortInitialiseStack+0x64>)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3b14      	subs	r3, #20
 8007426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3b04      	subs	r3, #4
 8007432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f06f 0202 	mvn.w	r2, #2
 800743a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3b20      	subs	r3, #32
 8007440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007442:	68fb      	ldr	r3, [r7, #12]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	08007455 	.word	0x08007455

08007454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800745e:	4b13      	ldr	r3, [pc, #76]	@ (80074ac <prvTaskExitError+0x58>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007466:	d00b      	beq.n	8007480 <prvTaskExitError+0x2c>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	60fb      	str	r3, [r7, #12]
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	e7fd      	b.n	800747c <prvTaskExitError+0x28>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60bb      	str	r3, [r7, #8]
}
 8007492:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007494:	bf00      	nop
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0fc      	beq.n	8007496 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	2000000c 	.word	0x2000000c

080074b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074b0:	4b07      	ldr	r3, [pc, #28]	@ (80074d0 <pxCurrentTCBConst2>)
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	6808      	ldr	r0, [r1, #0]
 80074b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	f380 8809 	msr	PSP, r0
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8811 	msr	BASEPRI, r0
 80074ca:	4770      	bx	lr
 80074cc:	f3af 8000 	nop.w

080074d0 <pxCurrentTCBConst2>:
 80074d0:	20000a5c 	.word	0x20000a5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop

080074d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074d8:	4808      	ldr	r0, [pc, #32]	@ (80074fc <prvPortStartFirstTask+0x24>)
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	6800      	ldr	r0, [r0, #0]
 80074de:	f380 8808 	msr	MSP, r0
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8814 	msr	CONTROL, r0
 80074ea:	b662      	cpsie	i
 80074ec:	b661      	cpsie	f
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	df00      	svc	0
 80074f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074fa:	bf00      	nop
 80074fc:	e000ed08 	.word	0xe000ed08

08007500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007506:	4b47      	ldr	r3, [pc, #284]	@ (8007624 <xPortStartScheduler+0x124>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a47      	ldr	r2, [pc, #284]	@ (8007628 <xPortStartScheduler+0x128>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10b      	bne.n	8007528 <xPortStartScheduler+0x28>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007528:	4b3e      	ldr	r3, [pc, #248]	@ (8007624 <xPortStartScheduler+0x124>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a3f      	ldr	r2, [pc, #252]	@ (800762c <xPortStartScheduler+0x12c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10b      	bne.n	800754a <xPortStartScheduler+0x4a>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	60fb      	str	r3, [r7, #12]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800754a:	4b39      	ldr	r3, [pc, #228]	@ (8007630 <xPortStartScheduler+0x130>)
 800754c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	22ff      	movs	r2, #255	@ 0xff
 800755a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800756c:	b2da      	uxtb	r2, r3
 800756e:	4b31      	ldr	r3, [pc, #196]	@ (8007634 <xPortStartScheduler+0x134>)
 8007570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007572:	4b31      	ldr	r3, [pc, #196]	@ (8007638 <xPortStartScheduler+0x138>)
 8007574:	2207      	movs	r2, #7
 8007576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007578:	e009      	b.n	800758e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800757a:	4b2f      	ldr	r3, [pc, #188]	@ (8007638 <xPortStartScheduler+0x138>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	4a2d      	ldr	r2, [pc, #180]	@ (8007638 <xPortStartScheduler+0x138>)
 8007582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	b2db      	uxtb	r3, r3
 800758c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007596:	2b80      	cmp	r3, #128	@ 0x80
 8007598:	d0ef      	beq.n	800757a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800759a:	4b27      	ldr	r3, [pc, #156]	@ (8007638 <xPortStartScheduler+0x138>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f1c3 0307 	rsb	r3, r3, #7
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d00b      	beq.n	80075be <xPortStartScheduler+0xbe>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60bb      	str	r3, [r7, #8]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075be:	4b1e      	ldr	r3, [pc, #120]	@ (8007638 <xPortStartScheduler+0x138>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007638 <xPortStartScheduler+0x138>)
 80075c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007638 <xPortStartScheduler+0x138>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075d0:	4a19      	ldr	r2, [pc, #100]	@ (8007638 <xPortStartScheduler+0x138>)
 80075d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075dc:	4b17      	ldr	r3, [pc, #92]	@ (800763c <xPortStartScheduler+0x13c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a16      	ldr	r2, [pc, #88]	@ (800763c <xPortStartScheduler+0x13c>)
 80075e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075e8:	4b14      	ldr	r3, [pc, #80]	@ (800763c <xPortStartScheduler+0x13c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a13      	ldr	r2, [pc, #76]	@ (800763c <xPortStartScheduler+0x13c>)
 80075ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075f4:	f000 f8da 	bl	80077ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075f8:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <xPortStartScheduler+0x140>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075fe:	f000 f8f9 	bl	80077f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007602:	4b10      	ldr	r3, [pc, #64]	@ (8007644 <xPortStartScheduler+0x144>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a0f      	ldr	r2, [pc, #60]	@ (8007644 <xPortStartScheduler+0x144>)
 8007608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800760c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800760e:	f7ff ff63 	bl	80074d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007612:	f7ff f83f 	bl	8006694 <vTaskSwitchContext>
	prvTaskExitError();
 8007616:	f7ff ff1d 	bl	8007454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	e000ed00 	.word	0xe000ed00
 8007628:	410fc271 	.word	0x410fc271
 800762c:	410fc270 	.word	0x410fc270
 8007630:	e000e400 	.word	0xe000e400
 8007634:	20001088 	.word	0x20001088
 8007638:	2000108c 	.word	0x2000108c
 800763c:	e000ed20 	.word	0xe000ed20
 8007640:	2000000c 	.word	0x2000000c
 8007644:	e000ef34 	.word	0xe000ef34

08007648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	607b      	str	r3, [r7, #4]
}
 8007660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007662:	4b10      	ldr	r3, [pc, #64]	@ (80076a4 <vPortEnterCritical+0x5c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	4a0e      	ldr	r2, [pc, #56]	@ (80076a4 <vPortEnterCritical+0x5c>)
 800766a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800766c:	4b0d      	ldr	r3, [pc, #52]	@ (80076a4 <vPortEnterCritical+0x5c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d110      	bne.n	8007696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007674:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <vPortEnterCritical+0x60>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <vPortEnterCritical+0x4e>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	603b      	str	r3, [r7, #0]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <vPortEnterCritical+0x4a>
	}
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	2000000c 	.word	0x2000000c
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076b2:	4b12      	ldr	r3, [pc, #72]	@ (80076fc <vPortExitCritical+0x50>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <vPortExitCritical+0x26>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	607b      	str	r3, [r7, #4]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076d2:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <vPortExitCritical+0x50>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4a08      	ldr	r2, [pc, #32]	@ (80076fc <vPortExitCritical+0x50>)
 80076da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <vPortExitCritical+0x50>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <vPortExitCritical+0x44>
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	2000000c 	.word	0x2000000c

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	@ (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f7fe ffb0 	bl	8006694 <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	20000a5c 	.word	0x20000a5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007782:	f7fe fecd 	bl	8006520 <xTaskIncrementTick>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778c:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <xPortSysTickHandler+0x40>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
}
 800779e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	@ (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	@ (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	@ (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	@ (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	20000000 	.word	0x20000000
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007802:	bf00      	nop
 8007804:	e000ed88 	.word	0xe000ed88

08007808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800780e:	f3ef 8305 	mrs	r3, IPSR
 8007812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b0f      	cmp	r3, #15
 8007818:	d915      	bls.n	8007846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781a:	4a18      	ldr	r2, [pc, #96]	@ (800787c <vPortValidateInterruptPriority+0x74>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007824:	4b16      	ldr	r3, [pc, #88]	@ (8007880 <vPortValidateInterruptPriority+0x78>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	7afa      	ldrb	r2, [r7, #11]
 800782a:	429a      	cmp	r2, r3
 800782c:	d20b      	bcs.n	8007846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	e7fd      	b.n	8007842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007846:	4b0f      	ldr	r3, [pc, #60]	@ (8007884 <vPortValidateInterruptPriority+0x7c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800784e:	4b0e      	ldr	r3, [pc, #56]	@ (8007888 <vPortValidateInterruptPriority+0x80>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d90b      	bls.n	800786e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	603b      	str	r3, [r7, #0]
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	e7fd      	b.n	800786a <vPortValidateInterruptPriority+0x62>
	}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	e000e3f0 	.word	0xe000e3f0
 8007880:	20001088 	.word	0x20001088
 8007884:	e000ed0c 	.word	0xe000ed0c
 8007888:	2000108c 	.word	0x2000108c

0800788c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	@ 0x28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007894:	2300      	movs	r3, #0
 8007896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007898:	f7fe fd86 	bl	80063a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800789c:	4b5c      	ldr	r3, [pc, #368]	@ (8007a10 <pvPortMalloc+0x184>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078a4:	f000 f924 	bl	8007af0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007a14 <pvPortMalloc+0x188>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4013      	ands	r3, r2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f040 8095 	bne.w	80079e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01e      	beq.n	80078fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078bc:	2208      	movs	r2, #8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4413      	add	r3, r2
 80078c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d015      	beq.n	80078fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f023 0307 	bic.w	r3, r3, #7
 80078d4:	3308      	adds	r3, #8
 80078d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00b      	beq.n	80078fa <pvPortMalloc+0x6e>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	617b      	str	r3, [r7, #20]
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d06f      	beq.n	80079e0 <pvPortMalloc+0x154>
 8007900:	4b45      	ldr	r3, [pc, #276]	@ (8007a18 <pvPortMalloc+0x18c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	429a      	cmp	r2, r3
 8007908:	d86a      	bhi.n	80079e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800790a:	4b44      	ldr	r3, [pc, #272]	@ (8007a1c <pvPortMalloc+0x190>)
 800790c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800790e:	4b43      	ldr	r3, [pc, #268]	@ (8007a1c <pvPortMalloc+0x190>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007914:	e004      	b.n	8007920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	429a      	cmp	r2, r3
 8007928:	d903      	bls.n	8007932 <pvPortMalloc+0xa6>
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f1      	bne.n	8007916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007932:	4b37      	ldr	r3, [pc, #220]	@ (8007a10 <pvPortMalloc+0x184>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007938:	429a      	cmp	r2, r3
 800793a:	d051      	beq.n	80079e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2208      	movs	r2, #8
 8007942:	4413      	add	r3, r2
 8007944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	1ad2      	subs	r2, r2, r3
 8007956:	2308      	movs	r3, #8
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	429a      	cmp	r2, r3
 800795c:	d920      	bls.n	80079a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800795e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4413      	add	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <pvPortMalloc+0xfc>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
}
 8007982:	bf00      	nop
 8007984:	bf00      	nop
 8007986:	e7fd      	b.n	8007984 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	1ad2      	subs	r2, r2, r3
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800799a:	69b8      	ldr	r0, [r7, #24]
 800799c:	f000 f90a 	bl	8007bb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a18 <pvPortMalloc+0x18c>)
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007a18 <pvPortMalloc+0x18c>)
 80079ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007a18 <pvPortMalloc+0x18c>)
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a20 <pvPortMalloc+0x194>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d203      	bcs.n	80079c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079ba:	4b17      	ldr	r3, [pc, #92]	@ (8007a18 <pvPortMalloc+0x18c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a18      	ldr	r2, [pc, #96]	@ (8007a20 <pvPortMalloc+0x194>)
 80079c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	4b13      	ldr	r3, [pc, #76]	@ (8007a14 <pvPortMalloc+0x188>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079d6:	4b13      	ldr	r3, [pc, #76]	@ (8007a24 <pvPortMalloc+0x198>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	4a11      	ldr	r2, [pc, #68]	@ (8007a24 <pvPortMalloc+0x198>)
 80079de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079e0:	f7fe fcf0 	bl	80063c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <pvPortMalloc+0x17a>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	60fb      	str	r3, [r7, #12]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <pvPortMalloc+0x176>
	return pvReturn;
 8007a06:	69fb      	ldr	r3, [r7, #28]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3728      	adds	r7, #40	@ 0x28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20001c50 	.word	0x20001c50
 8007a14:	20001c64 	.word	0x20001c64
 8007a18:	20001c54 	.word	0x20001c54
 8007a1c:	20001c48 	.word	0x20001c48
 8007a20:	20001c58 	.word	0x20001c58
 8007a24:	20001c5c 	.word	0x20001c5c

08007a28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d04f      	beq.n	8007ada <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	425b      	negs	r3, r3
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4413      	add	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	4b25      	ldr	r3, [pc, #148]	@ (8007ae4 <vPortFree+0xbc>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4013      	ands	r3, r2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10b      	bne.n	8007a6e <vPortFree+0x46>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	60fb      	str	r3, [r7, #12]
}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	e7fd      	b.n	8007a6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <vPortFree+0x66>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60bb      	str	r3, [r7, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	e7fd      	b.n	8007a8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	4b14      	ldr	r3, [pc, #80]	@ (8007ae4 <vPortFree+0xbc>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4013      	ands	r3, r2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01e      	beq.n	8007ada <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d11a      	bne.n	8007ada <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae4 <vPortFree+0xbc>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	43db      	mvns	r3, r3
 8007aae:	401a      	ands	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ab4:	f7fe fc78 	bl	80063a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae8 <vPortFree+0xc0>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	4a09      	ldr	r2, [pc, #36]	@ (8007ae8 <vPortFree+0xc0>)
 8007ac4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ac6:	6938      	ldr	r0, [r7, #16]
 8007ac8:	f000 f874 	bl	8007bb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007acc:	4b07      	ldr	r3, [pc, #28]	@ (8007aec <vPortFree+0xc4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	4a06      	ldr	r2, [pc, #24]	@ (8007aec <vPortFree+0xc4>)
 8007ad4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ad6:	f7fe fc75 	bl	80063c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ada:	bf00      	nop
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20001c64 	.word	0x20001c64
 8007ae8:	20001c54 	.word	0x20001c54
 8007aec:	20001c60 	.word	0x20001c60

08007af0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007af6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007afa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007afc:	4b27      	ldr	r3, [pc, #156]	@ (8007b9c <prvHeapInit+0xac>)
 8007afe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00c      	beq.n	8007b24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3307      	adds	r3, #7
 8007b0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0307 	bic.w	r3, r3, #7
 8007b16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b9c <prvHeapInit+0xac>)
 8007b20:	4413      	add	r3, r2
 8007b22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba0 <prvHeapInit+0xb0>)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba0 <prvHeapInit+0xb0>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	4413      	add	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b3c:	2208      	movs	r2, #8
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0307 	bic.w	r3, r3, #7
 8007b4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ba4 <prvHeapInit+0xb4>)
 8007b50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b52:	4b14      	ldr	r3, [pc, #80]	@ (8007ba4 <prvHeapInit+0xb4>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2200      	movs	r2, #0
 8007b58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ba4 <prvHeapInit+0xb4>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	1ad2      	subs	r2, r2, r3
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba4 <prvHeapInit+0xb4>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ba8 <prvHeapInit+0xb8>)
 8007b7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4a09      	ldr	r2, [pc, #36]	@ (8007bac <prvHeapInit+0xbc>)
 8007b86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b88:	4b09      	ldr	r3, [pc, #36]	@ (8007bb0 <prvHeapInit+0xc0>)
 8007b8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b8e:	601a      	str	r2, [r3, #0]
}
 8007b90:	bf00      	nop
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	20001090 	.word	0x20001090
 8007ba0:	20001c48 	.word	0x20001c48
 8007ba4:	20001c50 	.word	0x20001c50
 8007ba8:	20001c58 	.word	0x20001c58
 8007bac:	20001c54 	.word	0x20001c54
 8007bb0:	20001c64 	.word	0x20001c64

08007bb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bbc:	4b28      	ldr	r3, [pc, #160]	@ (8007c60 <prvInsertBlockIntoFreeList+0xac>)
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e002      	b.n	8007bc8 <prvInsertBlockIntoFreeList+0x14>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d8f7      	bhi.n	8007bc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	4413      	add	r3, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d108      	bne.n	8007bf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	441a      	add	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	441a      	add	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d118      	bne.n	8007c3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b15      	ldr	r3, [pc, #84]	@ (8007c64 <prvInsertBlockIntoFreeList+0xb0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d00d      	beq.n	8007c32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	441a      	add	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e008      	b.n	8007c44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c32:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <prvInsertBlockIntoFreeList+0xb0>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e003      	b.n	8007c44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d002      	beq.n	8007c52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20001c48 	.word	0x20001c48
 8007c64:	20001c50 	.word	0x20001c50

08007c68 <__cvt>:
 8007c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	ec57 6b10 	vmov	r6, r7, d0
 8007c70:	2f00      	cmp	r7, #0
 8007c72:	460c      	mov	r4, r1
 8007c74:	4619      	mov	r1, r3
 8007c76:	463b      	mov	r3, r7
 8007c78:	bfbb      	ittet	lt
 8007c7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c7e:	461f      	movlt	r7, r3
 8007c80:	2300      	movge	r3, #0
 8007c82:	232d      	movlt	r3, #45	@ 0x2d
 8007c84:	700b      	strb	r3, [r1, #0]
 8007c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c8c:	4691      	mov	r9, r2
 8007c8e:	f023 0820 	bic.w	r8, r3, #32
 8007c92:	bfbc      	itt	lt
 8007c94:	4632      	movlt	r2, r6
 8007c96:	4616      	movlt	r6, r2
 8007c98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c9c:	d005      	beq.n	8007caa <__cvt+0x42>
 8007c9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ca2:	d100      	bne.n	8007ca6 <__cvt+0x3e>
 8007ca4:	3401      	adds	r4, #1
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	e000      	b.n	8007cac <__cvt+0x44>
 8007caa:	2103      	movs	r1, #3
 8007cac:	ab03      	add	r3, sp, #12
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	ab02      	add	r3, sp, #8
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	ec47 6b10 	vmov	d0, r6, r7
 8007cb8:	4653      	mov	r3, sl
 8007cba:	4622      	mov	r2, r4
 8007cbc:	f001 ff0c 	bl	8009ad8 <_dtoa_r>
 8007cc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	d119      	bne.n	8007cfc <__cvt+0x94>
 8007cc8:	f019 0f01 	tst.w	r9, #1
 8007ccc:	d00e      	beq.n	8007cec <__cvt+0x84>
 8007cce:	eb00 0904 	add.w	r9, r0, r4
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	4639      	mov	r1, r7
 8007cda:	f7f8 fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cde:	b108      	cbz	r0, 8007ce4 <__cvt+0x7c>
 8007ce0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ce4:	2230      	movs	r2, #48	@ 0x30
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	454b      	cmp	r3, r9
 8007cea:	d31e      	bcc.n	8007d2a <__cvt+0xc2>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cf0:	1b5b      	subs	r3, r3, r5
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	b004      	add	sp, #16
 8007cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d00:	eb00 0904 	add.w	r9, r0, r4
 8007d04:	d1e5      	bne.n	8007cd2 <__cvt+0x6a>
 8007d06:	7803      	ldrb	r3, [r0, #0]
 8007d08:	2b30      	cmp	r3, #48	@ 0x30
 8007d0a:	d10a      	bne.n	8007d22 <__cvt+0xba>
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2300      	movs	r3, #0
 8007d10:	4630      	mov	r0, r6
 8007d12:	4639      	mov	r1, r7
 8007d14:	f7f8 fed8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d18:	b918      	cbnz	r0, 8007d22 <__cvt+0xba>
 8007d1a:	f1c4 0401 	rsb	r4, r4, #1
 8007d1e:	f8ca 4000 	str.w	r4, [sl]
 8007d22:	f8da 3000 	ldr.w	r3, [sl]
 8007d26:	4499      	add	r9, r3
 8007d28:	e7d3      	b.n	8007cd2 <__cvt+0x6a>
 8007d2a:	1c59      	adds	r1, r3, #1
 8007d2c:	9103      	str	r1, [sp, #12]
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e7d9      	b.n	8007ce6 <__cvt+0x7e>

08007d32 <__exponent>:
 8007d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d34:	2900      	cmp	r1, #0
 8007d36:	bfba      	itte	lt
 8007d38:	4249      	neglt	r1, r1
 8007d3a:	232d      	movlt	r3, #45	@ 0x2d
 8007d3c:	232b      	movge	r3, #43	@ 0x2b
 8007d3e:	2909      	cmp	r1, #9
 8007d40:	7002      	strb	r2, [r0, #0]
 8007d42:	7043      	strb	r3, [r0, #1]
 8007d44:	dd29      	ble.n	8007d9a <__exponent+0x68>
 8007d46:	f10d 0307 	add.w	r3, sp, #7
 8007d4a:	461d      	mov	r5, r3
 8007d4c:	270a      	movs	r7, #10
 8007d4e:	461a      	mov	r2, r3
 8007d50:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d54:	fb07 1416 	mls	r4, r7, r6, r1
 8007d58:	3430      	adds	r4, #48	@ 0x30
 8007d5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d5e:	460c      	mov	r4, r1
 8007d60:	2c63      	cmp	r4, #99	@ 0x63
 8007d62:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007d66:	4631      	mov	r1, r6
 8007d68:	dcf1      	bgt.n	8007d4e <__exponent+0x1c>
 8007d6a:	3130      	adds	r1, #48	@ 0x30
 8007d6c:	1e94      	subs	r4, r2, #2
 8007d6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d72:	1c41      	adds	r1, r0, #1
 8007d74:	4623      	mov	r3, r4
 8007d76:	42ab      	cmp	r3, r5
 8007d78:	d30a      	bcc.n	8007d90 <__exponent+0x5e>
 8007d7a:	f10d 0309 	add.w	r3, sp, #9
 8007d7e:	1a9b      	subs	r3, r3, r2
 8007d80:	42ac      	cmp	r4, r5
 8007d82:	bf88      	it	hi
 8007d84:	2300      	movhi	r3, #0
 8007d86:	3302      	adds	r3, #2
 8007d88:	4403      	add	r3, r0
 8007d8a:	1a18      	subs	r0, r3, r0
 8007d8c:	b003      	add	sp, #12
 8007d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d98:	e7ed      	b.n	8007d76 <__exponent+0x44>
 8007d9a:	2330      	movs	r3, #48	@ 0x30
 8007d9c:	3130      	adds	r1, #48	@ 0x30
 8007d9e:	7083      	strb	r3, [r0, #2]
 8007da0:	70c1      	strb	r1, [r0, #3]
 8007da2:	1d03      	adds	r3, r0, #4
 8007da4:	e7f1      	b.n	8007d8a <__exponent+0x58>
	...

08007da8 <_printf_float>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	b08d      	sub	sp, #52	@ 0x34
 8007dae:	460c      	mov	r4, r1
 8007db0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007db4:	4616      	mov	r6, r2
 8007db6:	461f      	mov	r7, r3
 8007db8:	4605      	mov	r5, r0
 8007dba:	f001 fdb3 	bl	8009924 <_localeconv_r>
 8007dbe:	6803      	ldr	r3, [r0, #0]
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7f8 fa54 	bl	8000270 <strlen>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8007dd0:	9005      	str	r0, [sp, #20]
 8007dd2:	3307      	adds	r3, #7
 8007dd4:	f023 0307 	bic.w	r3, r3, #7
 8007dd8:	f103 0208 	add.w	r2, r3, #8
 8007ddc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007de0:	f8d4 b000 	ldr.w	fp, [r4]
 8007de4:	f8c8 2000 	str.w	r2, [r8]
 8007de8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007df6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007dfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8008070 <_printf_float+0x2c8>)
 8007e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e04:	f7f8 fe92 	bl	8000b2c <__aeabi_dcmpun>
 8007e08:	bb70      	cbnz	r0, 8007e68 <_printf_float+0xc0>
 8007e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e0e:	4b98      	ldr	r3, [pc, #608]	@ (8008070 <_printf_float+0x2c8>)
 8007e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e14:	f7f8 fe6c 	bl	8000af0 <__aeabi_dcmple>
 8007e18:	bb30      	cbnz	r0, 8007e68 <_printf_float+0xc0>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4640      	mov	r0, r8
 8007e20:	4649      	mov	r1, r9
 8007e22:	f7f8 fe5b 	bl	8000adc <__aeabi_dcmplt>
 8007e26:	b110      	cbz	r0, 8007e2e <_printf_float+0x86>
 8007e28:	232d      	movs	r3, #45	@ 0x2d
 8007e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e2e:	4a91      	ldr	r2, [pc, #580]	@ (8008074 <_printf_float+0x2cc>)
 8007e30:	4b91      	ldr	r3, [pc, #580]	@ (8008078 <_printf_float+0x2d0>)
 8007e32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e36:	bf94      	ite	ls
 8007e38:	4690      	movls	r8, r2
 8007e3a:	4698      	movhi	r8, r3
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	f02b 0304 	bic.w	r3, fp, #4
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	f04f 0900 	mov.w	r9, #0
 8007e4a:	9700      	str	r7, [sp, #0]
 8007e4c:	4633      	mov	r3, r6
 8007e4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e50:	4621      	mov	r1, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f9d2 	bl	80081fc <_printf_common>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f040 808d 	bne.w	8007f78 <_printf_float+0x1d0>
 8007e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e62:	b00d      	add	sp, #52	@ 0x34
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	4642      	mov	r2, r8
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	4649      	mov	r1, r9
 8007e70:	f7f8 fe5c 	bl	8000b2c <__aeabi_dcmpun>
 8007e74:	b140      	cbz	r0, 8007e88 <_printf_float+0xe0>
 8007e76:	464b      	mov	r3, r9
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfbc      	itt	lt
 8007e7c:	232d      	movlt	r3, #45	@ 0x2d
 8007e7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e82:	4a7e      	ldr	r2, [pc, #504]	@ (800807c <_printf_float+0x2d4>)
 8007e84:	4b7e      	ldr	r3, [pc, #504]	@ (8008080 <_printf_float+0x2d8>)
 8007e86:	e7d4      	b.n	8007e32 <_printf_float+0x8a>
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e8e:	9206      	str	r2, [sp, #24]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	d13b      	bne.n	8007f0c <_printf_float+0x164>
 8007e94:	2306      	movs	r3, #6
 8007e96:	6063      	str	r3, [r4, #4]
 8007e98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	9303      	str	r3, [sp, #12]
 8007ea2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ea4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007ea8:	ab09      	add	r3, sp, #36	@ 0x24
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	6861      	ldr	r1, [r4, #4]
 8007eae:	ec49 8b10 	vmov	d0, r8, r9
 8007eb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7ff fed6 	bl	8007c68 <__cvt>
 8007ebc:	9b06      	ldr	r3, [sp, #24]
 8007ebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ec0:	2b47      	cmp	r3, #71	@ 0x47
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	d129      	bne.n	8007f1a <_printf_float+0x172>
 8007ec6:	1cc8      	adds	r0, r1, #3
 8007ec8:	db02      	blt.n	8007ed0 <_printf_float+0x128>
 8007eca:	6863      	ldr	r3, [r4, #4]
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	dd41      	ble.n	8007f54 <_printf_float+0x1ac>
 8007ed0:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ed4:	fa5f fa8a 	uxtb.w	sl, sl
 8007ed8:	3901      	subs	r1, #1
 8007eda:	4652      	mov	r2, sl
 8007edc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ee0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ee2:	f7ff ff26 	bl	8007d32 <__exponent>
 8007ee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ee8:	1813      	adds	r3, r2, r0
 8007eea:	2a01      	cmp	r2, #1
 8007eec:	4681      	mov	r9, r0
 8007eee:	6123      	str	r3, [r4, #16]
 8007ef0:	dc02      	bgt.n	8007ef8 <_printf_float+0x150>
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	07d2      	lsls	r2, r2, #31
 8007ef6:	d501      	bpl.n	8007efc <_printf_float+0x154>
 8007ef8:	3301      	adds	r3, #1
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0a2      	beq.n	8007e4a <_printf_float+0xa2>
 8007f04:	232d      	movs	r3, #45	@ 0x2d
 8007f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f0a:	e79e      	b.n	8007e4a <_printf_float+0xa2>
 8007f0c:	9a06      	ldr	r2, [sp, #24]
 8007f0e:	2a47      	cmp	r2, #71	@ 0x47
 8007f10:	d1c2      	bne.n	8007e98 <_printf_float+0xf0>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1c0      	bne.n	8007e98 <_printf_float+0xf0>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7bd      	b.n	8007e96 <_printf_float+0xee>
 8007f1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f1e:	d9db      	bls.n	8007ed8 <_printf_float+0x130>
 8007f20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007f24:	d118      	bne.n	8007f58 <_printf_float+0x1b0>
 8007f26:	2900      	cmp	r1, #0
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	dd0b      	ble.n	8007f44 <_printf_float+0x19c>
 8007f2c:	6121      	str	r1, [r4, #16]
 8007f2e:	b913      	cbnz	r3, 8007f36 <_printf_float+0x18e>
 8007f30:	6822      	ldr	r2, [r4, #0]
 8007f32:	07d0      	lsls	r0, r2, #31
 8007f34:	d502      	bpl.n	8007f3c <_printf_float+0x194>
 8007f36:	3301      	adds	r3, #1
 8007f38:	440b      	add	r3, r1
 8007f3a:	6123      	str	r3, [r4, #16]
 8007f3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f3e:	f04f 0900 	mov.w	r9, #0
 8007f42:	e7db      	b.n	8007efc <_printf_float+0x154>
 8007f44:	b913      	cbnz	r3, 8007f4c <_printf_float+0x1a4>
 8007f46:	6822      	ldr	r2, [r4, #0]
 8007f48:	07d2      	lsls	r2, r2, #31
 8007f4a:	d501      	bpl.n	8007f50 <_printf_float+0x1a8>
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	e7f4      	b.n	8007f3a <_printf_float+0x192>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e7f2      	b.n	8007f3a <_printf_float+0x192>
 8007f54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	db05      	blt.n	8007f6a <_printf_float+0x1c2>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	6121      	str	r1, [r4, #16]
 8007f62:	07d8      	lsls	r0, r3, #31
 8007f64:	d5ea      	bpl.n	8007f3c <_printf_float+0x194>
 8007f66:	1c4b      	adds	r3, r1, #1
 8007f68:	e7e7      	b.n	8007f3a <_printf_float+0x192>
 8007f6a:	2900      	cmp	r1, #0
 8007f6c:	bfd4      	ite	le
 8007f6e:	f1c1 0202 	rsble	r2, r1, #2
 8007f72:	2201      	movgt	r2, #1
 8007f74:	4413      	add	r3, r2
 8007f76:	e7e0      	b.n	8007f3a <_printf_float+0x192>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	055a      	lsls	r2, r3, #21
 8007f7c:	d407      	bmi.n	8007f8e <_printf_float+0x1e6>
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	4642      	mov	r2, r8
 8007f82:	4631      	mov	r1, r6
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d12b      	bne.n	8007fe4 <_printf_float+0x23c>
 8007f8c:	e767      	b.n	8007e5e <_printf_float+0xb6>
 8007f8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f92:	f240 80dd 	bls.w	8008150 <_printf_float+0x3a8>
 8007f96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f7f8 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d033      	beq.n	800800e <_printf_float+0x266>
 8007fa6:	4a37      	ldr	r2, [pc, #220]	@ (8008084 <_printf_float+0x2dc>)
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4631      	mov	r1, r6
 8007fac:	4628      	mov	r0, r5
 8007fae:	47b8      	blx	r7
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f43f af54 	beq.w	8007e5e <_printf_float+0xb6>
 8007fb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007fba:	4543      	cmp	r3, r8
 8007fbc:	db02      	blt.n	8007fc4 <_printf_float+0x21c>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	07d8      	lsls	r0, r3, #31
 8007fc2:	d50f      	bpl.n	8007fe4 <_printf_float+0x23c>
 8007fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4628      	mov	r0, r5
 8007fcc:	47b8      	blx	r7
 8007fce:	3001      	adds	r0, #1
 8007fd0:	f43f af45 	beq.w	8007e5e <_printf_float+0xb6>
 8007fd4:	f04f 0900 	mov.w	r9, #0
 8007fd8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007fdc:	f104 0a1a 	add.w	sl, r4, #26
 8007fe0:	45c8      	cmp	r8, r9
 8007fe2:	dc09      	bgt.n	8007ff8 <_printf_float+0x250>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	079b      	lsls	r3, r3, #30
 8007fe8:	f100 8103 	bmi.w	80081f2 <_printf_float+0x44a>
 8007fec:	68e0      	ldr	r0, [r4, #12]
 8007fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ff0:	4298      	cmp	r0, r3
 8007ff2:	bfb8      	it	lt
 8007ff4:	4618      	movlt	r0, r3
 8007ff6:	e734      	b.n	8007e62 <_printf_float+0xba>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4652      	mov	r2, sl
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	f43f af2b 	beq.w	8007e5e <_printf_float+0xb6>
 8008008:	f109 0901 	add.w	r9, r9, #1
 800800c:	e7e8      	b.n	8007fe0 <_printf_float+0x238>
 800800e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	dc39      	bgt.n	8008088 <_printf_float+0x2e0>
 8008014:	4a1b      	ldr	r2, [pc, #108]	@ (8008084 <_printf_float+0x2dc>)
 8008016:	2301      	movs	r3, #1
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	47b8      	blx	r7
 800801e:	3001      	adds	r0, #1
 8008020:	f43f af1d 	beq.w	8007e5e <_printf_float+0xb6>
 8008024:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008028:	ea59 0303 	orrs.w	r3, r9, r3
 800802c:	d102      	bne.n	8008034 <_printf_float+0x28c>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	07d9      	lsls	r1, r3, #31
 8008032:	d5d7      	bpl.n	8007fe4 <_printf_float+0x23c>
 8008034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	47b8      	blx	r7
 800803e:	3001      	adds	r0, #1
 8008040:	f43f af0d 	beq.w	8007e5e <_printf_float+0xb6>
 8008044:	f04f 0a00 	mov.w	sl, #0
 8008048:	f104 0b1a 	add.w	fp, r4, #26
 800804c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804e:	425b      	negs	r3, r3
 8008050:	4553      	cmp	r3, sl
 8008052:	dc01      	bgt.n	8008058 <_printf_float+0x2b0>
 8008054:	464b      	mov	r3, r9
 8008056:	e793      	b.n	8007f80 <_printf_float+0x1d8>
 8008058:	2301      	movs	r3, #1
 800805a:	465a      	mov	r2, fp
 800805c:	4631      	mov	r1, r6
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	f43f aefb 	beq.w	8007e5e <_printf_float+0xb6>
 8008068:	f10a 0a01 	add.w	sl, sl, #1
 800806c:	e7ee      	b.n	800804c <_printf_float+0x2a4>
 800806e:	bf00      	nop
 8008070:	7fefffff 	.word	0x7fefffff
 8008074:	0800c5f4 	.word	0x0800c5f4
 8008078:	0800c5f8 	.word	0x0800c5f8
 800807c:	0800c5fc 	.word	0x0800c5fc
 8008080:	0800c600 	.word	0x0800c600
 8008084:	0800c604 	.word	0x0800c604
 8008088:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800808a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800808e:	4553      	cmp	r3, sl
 8008090:	bfa8      	it	ge
 8008092:	4653      	movge	r3, sl
 8008094:	2b00      	cmp	r3, #0
 8008096:	4699      	mov	r9, r3
 8008098:	dc36      	bgt.n	8008108 <_printf_float+0x360>
 800809a:	f04f 0b00 	mov.w	fp, #0
 800809e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080a2:	f104 021a 	add.w	r2, r4, #26
 80080a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80080a8:	9306      	str	r3, [sp, #24]
 80080aa:	eba3 0309 	sub.w	r3, r3, r9
 80080ae:	455b      	cmp	r3, fp
 80080b0:	dc31      	bgt.n	8008116 <_printf_float+0x36e>
 80080b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b4:	459a      	cmp	sl, r3
 80080b6:	dc3a      	bgt.n	800812e <_printf_float+0x386>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	07da      	lsls	r2, r3, #31
 80080bc:	d437      	bmi.n	800812e <_printf_float+0x386>
 80080be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c0:	ebaa 0903 	sub.w	r9, sl, r3
 80080c4:	9b06      	ldr	r3, [sp, #24]
 80080c6:	ebaa 0303 	sub.w	r3, sl, r3
 80080ca:	4599      	cmp	r9, r3
 80080cc:	bfa8      	it	ge
 80080ce:	4699      	movge	r9, r3
 80080d0:	f1b9 0f00 	cmp.w	r9, #0
 80080d4:	dc33      	bgt.n	800813e <_printf_float+0x396>
 80080d6:	f04f 0800 	mov.w	r8, #0
 80080da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080de:	f104 0b1a 	add.w	fp, r4, #26
 80080e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e4:	ebaa 0303 	sub.w	r3, sl, r3
 80080e8:	eba3 0309 	sub.w	r3, r3, r9
 80080ec:	4543      	cmp	r3, r8
 80080ee:	f77f af79 	ble.w	8007fe4 <_printf_float+0x23c>
 80080f2:	2301      	movs	r3, #1
 80080f4:	465a      	mov	r2, fp
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	f43f aeae 	beq.w	8007e5e <_printf_float+0xb6>
 8008102:	f108 0801 	add.w	r8, r8, #1
 8008106:	e7ec      	b.n	80080e2 <_printf_float+0x33a>
 8008108:	4642      	mov	r2, r8
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	d1c2      	bne.n	800809a <_printf_float+0x2f2>
 8008114:	e6a3      	b.n	8007e5e <_printf_float+0xb6>
 8008116:	2301      	movs	r3, #1
 8008118:	4631      	mov	r1, r6
 800811a:	4628      	mov	r0, r5
 800811c:	9206      	str	r2, [sp, #24]
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f ae9c 	beq.w	8007e5e <_printf_float+0xb6>
 8008126:	9a06      	ldr	r2, [sp, #24]
 8008128:	f10b 0b01 	add.w	fp, fp, #1
 800812c:	e7bb      	b.n	80080a6 <_printf_float+0x2fe>
 800812e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008132:	4631      	mov	r1, r6
 8008134:	4628      	mov	r0, r5
 8008136:	47b8      	blx	r7
 8008138:	3001      	adds	r0, #1
 800813a:	d1c0      	bne.n	80080be <_printf_float+0x316>
 800813c:	e68f      	b.n	8007e5e <_printf_float+0xb6>
 800813e:	9a06      	ldr	r2, [sp, #24]
 8008140:	464b      	mov	r3, r9
 8008142:	4442      	add	r2, r8
 8008144:	4631      	mov	r1, r6
 8008146:	4628      	mov	r0, r5
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	d1c3      	bne.n	80080d6 <_printf_float+0x32e>
 800814e:	e686      	b.n	8007e5e <_printf_float+0xb6>
 8008150:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008154:	f1ba 0f01 	cmp.w	sl, #1
 8008158:	dc01      	bgt.n	800815e <_printf_float+0x3b6>
 800815a:	07db      	lsls	r3, r3, #31
 800815c:	d536      	bpl.n	80081cc <_printf_float+0x424>
 800815e:	2301      	movs	r3, #1
 8008160:	4642      	mov	r2, r8
 8008162:	4631      	mov	r1, r6
 8008164:	4628      	mov	r0, r5
 8008166:	47b8      	blx	r7
 8008168:	3001      	adds	r0, #1
 800816a:	f43f ae78 	beq.w	8007e5e <_printf_float+0xb6>
 800816e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008172:	4631      	mov	r1, r6
 8008174:	4628      	mov	r0, r5
 8008176:	47b8      	blx	r7
 8008178:	3001      	adds	r0, #1
 800817a:	f43f ae70 	beq.w	8007e5e <_printf_float+0xb6>
 800817e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008182:	2200      	movs	r2, #0
 8008184:	2300      	movs	r3, #0
 8008186:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800818a:	f7f8 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800818e:	b9c0      	cbnz	r0, 80081c2 <_printf_float+0x41a>
 8008190:	4653      	mov	r3, sl
 8008192:	f108 0201 	add.w	r2, r8, #1
 8008196:	4631      	mov	r1, r6
 8008198:	4628      	mov	r0, r5
 800819a:	47b8      	blx	r7
 800819c:	3001      	adds	r0, #1
 800819e:	d10c      	bne.n	80081ba <_printf_float+0x412>
 80081a0:	e65d      	b.n	8007e5e <_printf_float+0xb6>
 80081a2:	2301      	movs	r3, #1
 80081a4:	465a      	mov	r2, fp
 80081a6:	4631      	mov	r1, r6
 80081a8:	4628      	mov	r0, r5
 80081aa:	47b8      	blx	r7
 80081ac:	3001      	adds	r0, #1
 80081ae:	f43f ae56 	beq.w	8007e5e <_printf_float+0xb6>
 80081b2:	f108 0801 	add.w	r8, r8, #1
 80081b6:	45d0      	cmp	r8, sl
 80081b8:	dbf3      	blt.n	80081a2 <_printf_float+0x3fa>
 80081ba:	464b      	mov	r3, r9
 80081bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80081c0:	e6df      	b.n	8007f82 <_printf_float+0x1da>
 80081c2:	f04f 0800 	mov.w	r8, #0
 80081c6:	f104 0b1a 	add.w	fp, r4, #26
 80081ca:	e7f4      	b.n	80081b6 <_printf_float+0x40e>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4642      	mov	r2, r8
 80081d0:	e7e1      	b.n	8008196 <_printf_float+0x3ee>
 80081d2:	2301      	movs	r3, #1
 80081d4:	464a      	mov	r2, r9
 80081d6:	4631      	mov	r1, r6
 80081d8:	4628      	mov	r0, r5
 80081da:	47b8      	blx	r7
 80081dc:	3001      	adds	r0, #1
 80081de:	f43f ae3e 	beq.w	8007e5e <_printf_float+0xb6>
 80081e2:	f108 0801 	add.w	r8, r8, #1
 80081e6:	68e3      	ldr	r3, [r4, #12]
 80081e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081ea:	1a5b      	subs	r3, r3, r1
 80081ec:	4543      	cmp	r3, r8
 80081ee:	dcf0      	bgt.n	80081d2 <_printf_float+0x42a>
 80081f0:	e6fc      	b.n	8007fec <_printf_float+0x244>
 80081f2:	f04f 0800 	mov.w	r8, #0
 80081f6:	f104 0919 	add.w	r9, r4, #25
 80081fa:	e7f4      	b.n	80081e6 <_printf_float+0x43e>

080081fc <_printf_common>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	4616      	mov	r6, r2
 8008202:	4698      	mov	r8, r3
 8008204:	688a      	ldr	r2, [r1, #8]
 8008206:	690b      	ldr	r3, [r1, #16]
 8008208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800820c:	4293      	cmp	r3, r2
 800820e:	bfb8      	it	lt
 8008210:	4613      	movlt	r3, r2
 8008212:	6033      	str	r3, [r6, #0]
 8008214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008218:	4607      	mov	r7, r0
 800821a:	460c      	mov	r4, r1
 800821c:	b10a      	cbz	r2, 8008222 <_printf_common+0x26>
 800821e:	3301      	adds	r3, #1
 8008220:	6033      	str	r3, [r6, #0]
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	0699      	lsls	r1, r3, #26
 8008226:	bf42      	ittt	mi
 8008228:	6833      	ldrmi	r3, [r6, #0]
 800822a:	3302      	addmi	r3, #2
 800822c:	6033      	strmi	r3, [r6, #0]
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	f015 0506 	ands.w	r5, r5, #6
 8008234:	d106      	bne.n	8008244 <_printf_common+0x48>
 8008236:	f104 0a19 	add.w	sl, r4, #25
 800823a:	68e3      	ldr	r3, [r4, #12]
 800823c:	6832      	ldr	r2, [r6, #0]
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	42ab      	cmp	r3, r5
 8008242:	dc26      	bgt.n	8008292 <_printf_common+0x96>
 8008244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008248:	6822      	ldr	r2, [r4, #0]
 800824a:	3b00      	subs	r3, #0
 800824c:	bf18      	it	ne
 800824e:	2301      	movne	r3, #1
 8008250:	0692      	lsls	r2, r2, #26
 8008252:	d42b      	bmi.n	80082ac <_printf_common+0xb0>
 8008254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008258:	4641      	mov	r1, r8
 800825a:	4638      	mov	r0, r7
 800825c:	47c8      	blx	r9
 800825e:	3001      	adds	r0, #1
 8008260:	d01e      	beq.n	80082a0 <_printf_common+0xa4>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	6922      	ldr	r2, [r4, #16]
 8008266:	f003 0306 	and.w	r3, r3, #6
 800826a:	2b04      	cmp	r3, #4
 800826c:	bf02      	ittt	eq
 800826e:	68e5      	ldreq	r5, [r4, #12]
 8008270:	6833      	ldreq	r3, [r6, #0]
 8008272:	1aed      	subeq	r5, r5, r3
 8008274:	68a3      	ldr	r3, [r4, #8]
 8008276:	bf0c      	ite	eq
 8008278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800827c:	2500      	movne	r5, #0
 800827e:	4293      	cmp	r3, r2
 8008280:	bfc4      	itt	gt
 8008282:	1a9b      	subgt	r3, r3, r2
 8008284:	18ed      	addgt	r5, r5, r3
 8008286:	2600      	movs	r6, #0
 8008288:	341a      	adds	r4, #26
 800828a:	42b5      	cmp	r5, r6
 800828c:	d11a      	bne.n	80082c4 <_printf_common+0xc8>
 800828e:	2000      	movs	r0, #0
 8008290:	e008      	b.n	80082a4 <_printf_common+0xa8>
 8008292:	2301      	movs	r3, #1
 8008294:	4652      	mov	r2, sl
 8008296:	4641      	mov	r1, r8
 8008298:	4638      	mov	r0, r7
 800829a:	47c8      	blx	r9
 800829c:	3001      	adds	r0, #1
 800829e:	d103      	bne.n	80082a8 <_printf_common+0xac>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a8:	3501      	adds	r5, #1
 80082aa:	e7c6      	b.n	800823a <_printf_common+0x3e>
 80082ac:	18e1      	adds	r1, r4, r3
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	2030      	movs	r0, #48	@ 0x30
 80082b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082b6:	4422      	add	r2, r4
 80082b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082c0:	3302      	adds	r3, #2
 80082c2:	e7c7      	b.n	8008254 <_printf_common+0x58>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4622      	mov	r2, r4
 80082c8:	4641      	mov	r1, r8
 80082ca:	4638      	mov	r0, r7
 80082cc:	47c8      	blx	r9
 80082ce:	3001      	adds	r0, #1
 80082d0:	d0e6      	beq.n	80082a0 <_printf_common+0xa4>
 80082d2:	3601      	adds	r6, #1
 80082d4:	e7d9      	b.n	800828a <_printf_common+0x8e>
	...

080082d8 <_printf_i>:
 80082d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	7e0f      	ldrb	r7, [r1, #24]
 80082de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082e0:	2f78      	cmp	r7, #120	@ 0x78
 80082e2:	4691      	mov	r9, r2
 80082e4:	4680      	mov	r8, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	469a      	mov	sl, r3
 80082ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082ee:	d807      	bhi.n	8008300 <_printf_i+0x28>
 80082f0:	2f62      	cmp	r7, #98	@ 0x62
 80082f2:	d80a      	bhi.n	800830a <_printf_i+0x32>
 80082f4:	2f00      	cmp	r7, #0
 80082f6:	f000 80d2 	beq.w	800849e <_printf_i+0x1c6>
 80082fa:	2f58      	cmp	r7, #88	@ 0x58
 80082fc:	f000 80b9 	beq.w	8008472 <_printf_i+0x19a>
 8008300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008308:	e03a      	b.n	8008380 <_printf_i+0xa8>
 800830a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800830e:	2b15      	cmp	r3, #21
 8008310:	d8f6      	bhi.n	8008300 <_printf_i+0x28>
 8008312:	a101      	add	r1, pc, #4	@ (adr r1, 8008318 <_printf_i+0x40>)
 8008314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008318:	08008371 	.word	0x08008371
 800831c:	08008385 	.word	0x08008385
 8008320:	08008301 	.word	0x08008301
 8008324:	08008301 	.word	0x08008301
 8008328:	08008301 	.word	0x08008301
 800832c:	08008301 	.word	0x08008301
 8008330:	08008385 	.word	0x08008385
 8008334:	08008301 	.word	0x08008301
 8008338:	08008301 	.word	0x08008301
 800833c:	08008301 	.word	0x08008301
 8008340:	08008301 	.word	0x08008301
 8008344:	08008485 	.word	0x08008485
 8008348:	080083af 	.word	0x080083af
 800834c:	0800843f 	.word	0x0800843f
 8008350:	08008301 	.word	0x08008301
 8008354:	08008301 	.word	0x08008301
 8008358:	080084a7 	.word	0x080084a7
 800835c:	08008301 	.word	0x08008301
 8008360:	080083af 	.word	0x080083af
 8008364:	08008301 	.word	0x08008301
 8008368:	08008301 	.word	0x08008301
 800836c:	08008447 	.word	0x08008447
 8008370:	6833      	ldr	r3, [r6, #0]
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6032      	str	r2, [r6, #0]
 8008378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800837c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008380:	2301      	movs	r3, #1
 8008382:	e09d      	b.n	80084c0 <_printf_i+0x1e8>
 8008384:	6833      	ldr	r3, [r6, #0]
 8008386:	6820      	ldr	r0, [r4, #0]
 8008388:	1d19      	adds	r1, r3, #4
 800838a:	6031      	str	r1, [r6, #0]
 800838c:	0606      	lsls	r6, r0, #24
 800838e:	d501      	bpl.n	8008394 <_printf_i+0xbc>
 8008390:	681d      	ldr	r5, [r3, #0]
 8008392:	e003      	b.n	800839c <_printf_i+0xc4>
 8008394:	0645      	lsls	r5, r0, #25
 8008396:	d5fb      	bpl.n	8008390 <_printf_i+0xb8>
 8008398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800839c:	2d00      	cmp	r5, #0
 800839e:	da03      	bge.n	80083a8 <_printf_i+0xd0>
 80083a0:	232d      	movs	r3, #45	@ 0x2d
 80083a2:	426d      	negs	r5, r5
 80083a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083a8:	4859      	ldr	r0, [pc, #356]	@ (8008510 <_printf_i+0x238>)
 80083aa:	230a      	movs	r3, #10
 80083ac:	e011      	b.n	80083d2 <_printf_i+0xfa>
 80083ae:	6821      	ldr	r1, [r4, #0]
 80083b0:	6833      	ldr	r3, [r6, #0]
 80083b2:	0608      	lsls	r0, r1, #24
 80083b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80083b8:	d402      	bmi.n	80083c0 <_printf_i+0xe8>
 80083ba:	0649      	lsls	r1, r1, #25
 80083bc:	bf48      	it	mi
 80083be:	b2ad      	uxthmi	r5, r5
 80083c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80083c2:	4853      	ldr	r0, [pc, #332]	@ (8008510 <_printf_i+0x238>)
 80083c4:	6033      	str	r3, [r6, #0]
 80083c6:	bf14      	ite	ne
 80083c8:	230a      	movne	r3, #10
 80083ca:	2308      	moveq	r3, #8
 80083cc:	2100      	movs	r1, #0
 80083ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083d2:	6866      	ldr	r6, [r4, #4]
 80083d4:	60a6      	str	r6, [r4, #8]
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	bfa2      	ittt	ge
 80083da:	6821      	ldrge	r1, [r4, #0]
 80083dc:	f021 0104 	bicge.w	r1, r1, #4
 80083e0:	6021      	strge	r1, [r4, #0]
 80083e2:	b90d      	cbnz	r5, 80083e8 <_printf_i+0x110>
 80083e4:	2e00      	cmp	r6, #0
 80083e6:	d04b      	beq.n	8008480 <_printf_i+0x1a8>
 80083e8:	4616      	mov	r6, r2
 80083ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80083ee:	fb03 5711 	mls	r7, r3, r1, r5
 80083f2:	5dc7      	ldrb	r7, [r0, r7]
 80083f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083f8:	462f      	mov	r7, r5
 80083fa:	42bb      	cmp	r3, r7
 80083fc:	460d      	mov	r5, r1
 80083fe:	d9f4      	bls.n	80083ea <_printf_i+0x112>
 8008400:	2b08      	cmp	r3, #8
 8008402:	d10b      	bne.n	800841c <_printf_i+0x144>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	07df      	lsls	r7, r3, #31
 8008408:	d508      	bpl.n	800841c <_printf_i+0x144>
 800840a:	6923      	ldr	r3, [r4, #16]
 800840c:	6861      	ldr	r1, [r4, #4]
 800840e:	4299      	cmp	r1, r3
 8008410:	bfde      	ittt	le
 8008412:	2330      	movle	r3, #48	@ 0x30
 8008414:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008418:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800841c:	1b92      	subs	r2, r2, r6
 800841e:	6122      	str	r2, [r4, #16]
 8008420:	f8cd a000 	str.w	sl, [sp]
 8008424:	464b      	mov	r3, r9
 8008426:	aa03      	add	r2, sp, #12
 8008428:	4621      	mov	r1, r4
 800842a:	4640      	mov	r0, r8
 800842c:	f7ff fee6 	bl	80081fc <_printf_common>
 8008430:	3001      	adds	r0, #1
 8008432:	d14a      	bne.n	80084ca <_printf_i+0x1f2>
 8008434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008438:	b004      	add	sp, #16
 800843a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	f043 0320 	orr.w	r3, r3, #32
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	4833      	ldr	r0, [pc, #204]	@ (8008514 <_printf_i+0x23c>)
 8008448:	2778      	movs	r7, #120	@ 0x78
 800844a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	6831      	ldr	r1, [r6, #0]
 8008452:	061f      	lsls	r7, r3, #24
 8008454:	f851 5b04 	ldr.w	r5, [r1], #4
 8008458:	d402      	bmi.n	8008460 <_printf_i+0x188>
 800845a:	065f      	lsls	r7, r3, #25
 800845c:	bf48      	it	mi
 800845e:	b2ad      	uxthmi	r5, r5
 8008460:	6031      	str	r1, [r6, #0]
 8008462:	07d9      	lsls	r1, r3, #31
 8008464:	bf44      	itt	mi
 8008466:	f043 0320 	orrmi.w	r3, r3, #32
 800846a:	6023      	strmi	r3, [r4, #0]
 800846c:	b11d      	cbz	r5, 8008476 <_printf_i+0x19e>
 800846e:	2310      	movs	r3, #16
 8008470:	e7ac      	b.n	80083cc <_printf_i+0xf4>
 8008472:	4827      	ldr	r0, [pc, #156]	@ (8008510 <_printf_i+0x238>)
 8008474:	e7e9      	b.n	800844a <_printf_i+0x172>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	f023 0320 	bic.w	r3, r3, #32
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	e7f6      	b.n	800846e <_printf_i+0x196>
 8008480:	4616      	mov	r6, r2
 8008482:	e7bd      	b.n	8008400 <_printf_i+0x128>
 8008484:	6833      	ldr	r3, [r6, #0]
 8008486:	6825      	ldr	r5, [r4, #0]
 8008488:	6961      	ldr	r1, [r4, #20]
 800848a:	1d18      	adds	r0, r3, #4
 800848c:	6030      	str	r0, [r6, #0]
 800848e:	062e      	lsls	r6, r5, #24
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	d501      	bpl.n	8008498 <_printf_i+0x1c0>
 8008494:	6019      	str	r1, [r3, #0]
 8008496:	e002      	b.n	800849e <_printf_i+0x1c6>
 8008498:	0668      	lsls	r0, r5, #25
 800849a:	d5fb      	bpl.n	8008494 <_printf_i+0x1bc>
 800849c:	8019      	strh	r1, [r3, #0]
 800849e:	2300      	movs	r3, #0
 80084a0:	6123      	str	r3, [r4, #16]
 80084a2:	4616      	mov	r6, r2
 80084a4:	e7bc      	b.n	8008420 <_printf_i+0x148>
 80084a6:	6833      	ldr	r3, [r6, #0]
 80084a8:	1d1a      	adds	r2, r3, #4
 80084aa:	6032      	str	r2, [r6, #0]
 80084ac:	681e      	ldr	r6, [r3, #0]
 80084ae:	6862      	ldr	r2, [r4, #4]
 80084b0:	2100      	movs	r1, #0
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7f7 fe8c 	bl	80001d0 <memchr>
 80084b8:	b108      	cbz	r0, 80084be <_printf_i+0x1e6>
 80084ba:	1b80      	subs	r0, r0, r6
 80084bc:	6060      	str	r0, [r4, #4]
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	6123      	str	r3, [r4, #16]
 80084c2:	2300      	movs	r3, #0
 80084c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084c8:	e7aa      	b.n	8008420 <_printf_i+0x148>
 80084ca:	6923      	ldr	r3, [r4, #16]
 80084cc:	4632      	mov	r2, r6
 80084ce:	4649      	mov	r1, r9
 80084d0:	4640      	mov	r0, r8
 80084d2:	47d0      	blx	sl
 80084d4:	3001      	adds	r0, #1
 80084d6:	d0ad      	beq.n	8008434 <_printf_i+0x15c>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	079b      	lsls	r3, r3, #30
 80084dc:	d413      	bmi.n	8008506 <_printf_i+0x22e>
 80084de:	68e0      	ldr	r0, [r4, #12]
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	4298      	cmp	r0, r3
 80084e4:	bfb8      	it	lt
 80084e6:	4618      	movlt	r0, r3
 80084e8:	e7a6      	b.n	8008438 <_printf_i+0x160>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4632      	mov	r2, r6
 80084ee:	4649      	mov	r1, r9
 80084f0:	4640      	mov	r0, r8
 80084f2:	47d0      	blx	sl
 80084f4:	3001      	adds	r0, #1
 80084f6:	d09d      	beq.n	8008434 <_printf_i+0x15c>
 80084f8:	3501      	adds	r5, #1
 80084fa:	68e3      	ldr	r3, [r4, #12]
 80084fc:	9903      	ldr	r1, [sp, #12]
 80084fe:	1a5b      	subs	r3, r3, r1
 8008500:	42ab      	cmp	r3, r5
 8008502:	dcf2      	bgt.n	80084ea <_printf_i+0x212>
 8008504:	e7eb      	b.n	80084de <_printf_i+0x206>
 8008506:	2500      	movs	r5, #0
 8008508:	f104 0619 	add.w	r6, r4, #25
 800850c:	e7f5      	b.n	80084fa <_printf_i+0x222>
 800850e:	bf00      	nop
 8008510:	0800c606 	.word	0x0800c606
 8008514:	0800c617 	.word	0x0800c617

08008518 <_scanf_float>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	b087      	sub	sp, #28
 800851e:	4617      	mov	r7, r2
 8008520:	9303      	str	r3, [sp, #12]
 8008522:	688b      	ldr	r3, [r1, #8]
 8008524:	1e5a      	subs	r2, r3, #1
 8008526:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800852a:	bf81      	itttt	hi
 800852c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008530:	eb03 0b05 	addhi.w	fp, r3, r5
 8008534:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008538:	608b      	strhi	r3, [r1, #8]
 800853a:	680b      	ldr	r3, [r1, #0]
 800853c:	460a      	mov	r2, r1
 800853e:	f04f 0500 	mov.w	r5, #0
 8008542:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008546:	f842 3b1c 	str.w	r3, [r2], #28
 800854a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800854e:	4680      	mov	r8, r0
 8008550:	460c      	mov	r4, r1
 8008552:	bf98      	it	ls
 8008554:	f04f 0b00 	movls.w	fp, #0
 8008558:	9201      	str	r2, [sp, #4]
 800855a:	4616      	mov	r6, r2
 800855c:	46aa      	mov	sl, r5
 800855e:	46a9      	mov	r9, r5
 8008560:	9502      	str	r5, [sp, #8]
 8008562:	68a2      	ldr	r2, [r4, #8]
 8008564:	b152      	cbz	r2, 800857c <_scanf_float+0x64>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b4e      	cmp	r3, #78	@ 0x4e
 800856c:	d864      	bhi.n	8008638 <_scanf_float+0x120>
 800856e:	2b40      	cmp	r3, #64	@ 0x40
 8008570:	d83c      	bhi.n	80085ec <_scanf_float+0xd4>
 8008572:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008576:	b2c8      	uxtb	r0, r1
 8008578:	280e      	cmp	r0, #14
 800857a:	d93a      	bls.n	80085f2 <_scanf_float+0xda>
 800857c:	f1b9 0f00 	cmp.w	r9, #0
 8008580:	d003      	beq.n	800858a <_scanf_float+0x72>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800858e:	f1ba 0f01 	cmp.w	sl, #1
 8008592:	f200 8117 	bhi.w	80087c4 <_scanf_float+0x2ac>
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	429e      	cmp	r6, r3
 800859a:	f200 8108 	bhi.w	80087ae <_scanf_float+0x296>
 800859e:	2001      	movs	r0, #1
 80085a0:	b007      	add	sp, #28
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80085aa:	2a0d      	cmp	r2, #13
 80085ac:	d8e6      	bhi.n	800857c <_scanf_float+0x64>
 80085ae:	a101      	add	r1, pc, #4	@ (adr r1, 80085b4 <_scanf_float+0x9c>)
 80085b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085b4:	080086fb 	.word	0x080086fb
 80085b8:	0800857d 	.word	0x0800857d
 80085bc:	0800857d 	.word	0x0800857d
 80085c0:	0800857d 	.word	0x0800857d
 80085c4:	0800875b 	.word	0x0800875b
 80085c8:	08008733 	.word	0x08008733
 80085cc:	0800857d 	.word	0x0800857d
 80085d0:	0800857d 	.word	0x0800857d
 80085d4:	08008709 	.word	0x08008709
 80085d8:	0800857d 	.word	0x0800857d
 80085dc:	0800857d 	.word	0x0800857d
 80085e0:	0800857d 	.word	0x0800857d
 80085e4:	0800857d 	.word	0x0800857d
 80085e8:	080086c1 	.word	0x080086c1
 80085ec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80085f0:	e7db      	b.n	80085aa <_scanf_float+0x92>
 80085f2:	290e      	cmp	r1, #14
 80085f4:	d8c2      	bhi.n	800857c <_scanf_float+0x64>
 80085f6:	a001      	add	r0, pc, #4	@ (adr r0, 80085fc <_scanf_float+0xe4>)
 80085f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085fc:	080086b1 	.word	0x080086b1
 8008600:	0800857d 	.word	0x0800857d
 8008604:	080086b1 	.word	0x080086b1
 8008608:	08008747 	.word	0x08008747
 800860c:	0800857d 	.word	0x0800857d
 8008610:	08008659 	.word	0x08008659
 8008614:	08008697 	.word	0x08008697
 8008618:	08008697 	.word	0x08008697
 800861c:	08008697 	.word	0x08008697
 8008620:	08008697 	.word	0x08008697
 8008624:	08008697 	.word	0x08008697
 8008628:	08008697 	.word	0x08008697
 800862c:	08008697 	.word	0x08008697
 8008630:	08008697 	.word	0x08008697
 8008634:	08008697 	.word	0x08008697
 8008638:	2b6e      	cmp	r3, #110	@ 0x6e
 800863a:	d809      	bhi.n	8008650 <_scanf_float+0x138>
 800863c:	2b60      	cmp	r3, #96	@ 0x60
 800863e:	d8b2      	bhi.n	80085a6 <_scanf_float+0x8e>
 8008640:	2b54      	cmp	r3, #84	@ 0x54
 8008642:	d07b      	beq.n	800873c <_scanf_float+0x224>
 8008644:	2b59      	cmp	r3, #89	@ 0x59
 8008646:	d199      	bne.n	800857c <_scanf_float+0x64>
 8008648:	2d07      	cmp	r5, #7
 800864a:	d197      	bne.n	800857c <_scanf_float+0x64>
 800864c:	2508      	movs	r5, #8
 800864e:	e02c      	b.n	80086aa <_scanf_float+0x192>
 8008650:	2b74      	cmp	r3, #116	@ 0x74
 8008652:	d073      	beq.n	800873c <_scanf_float+0x224>
 8008654:	2b79      	cmp	r3, #121	@ 0x79
 8008656:	e7f6      	b.n	8008646 <_scanf_float+0x12e>
 8008658:	6821      	ldr	r1, [r4, #0]
 800865a:	05c8      	lsls	r0, r1, #23
 800865c:	d51b      	bpl.n	8008696 <_scanf_float+0x17e>
 800865e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008662:	6021      	str	r1, [r4, #0]
 8008664:	f109 0901 	add.w	r9, r9, #1
 8008668:	f1bb 0f00 	cmp.w	fp, #0
 800866c:	d003      	beq.n	8008676 <_scanf_float+0x15e>
 800866e:	3201      	adds	r2, #1
 8008670:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008674:	60a2      	str	r2, [r4, #8]
 8008676:	68a3      	ldr	r3, [r4, #8]
 8008678:	3b01      	subs	r3, #1
 800867a:	60a3      	str	r3, [r4, #8]
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	3301      	adds	r3, #1
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3b01      	subs	r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	f340 8087 	ble.w	800879c <_scanf_float+0x284>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	3301      	adds	r3, #1
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	e765      	b.n	8008562 <_scanf_float+0x4a>
 8008696:	eb1a 0105 	adds.w	r1, sl, r5
 800869a:	f47f af6f 	bne.w	800857c <_scanf_float+0x64>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80086a4:	6022      	str	r2, [r4, #0]
 80086a6:	460d      	mov	r5, r1
 80086a8:	468a      	mov	sl, r1
 80086aa:	f806 3b01 	strb.w	r3, [r6], #1
 80086ae:	e7e2      	b.n	8008676 <_scanf_float+0x15e>
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	0610      	lsls	r0, r2, #24
 80086b4:	f57f af62 	bpl.w	800857c <_scanf_float+0x64>
 80086b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086bc:	6022      	str	r2, [r4, #0]
 80086be:	e7f4      	b.n	80086aa <_scanf_float+0x192>
 80086c0:	f1ba 0f00 	cmp.w	sl, #0
 80086c4:	d10e      	bne.n	80086e4 <_scanf_float+0x1cc>
 80086c6:	f1b9 0f00 	cmp.w	r9, #0
 80086ca:	d10e      	bne.n	80086ea <_scanf_float+0x1d2>
 80086cc:	6822      	ldr	r2, [r4, #0]
 80086ce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086d2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086d6:	d108      	bne.n	80086ea <_scanf_float+0x1d2>
 80086d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086dc:	6022      	str	r2, [r4, #0]
 80086de:	f04f 0a01 	mov.w	sl, #1
 80086e2:	e7e2      	b.n	80086aa <_scanf_float+0x192>
 80086e4:	f1ba 0f02 	cmp.w	sl, #2
 80086e8:	d055      	beq.n	8008796 <_scanf_float+0x27e>
 80086ea:	2d01      	cmp	r5, #1
 80086ec:	d002      	beq.n	80086f4 <_scanf_float+0x1dc>
 80086ee:	2d04      	cmp	r5, #4
 80086f0:	f47f af44 	bne.w	800857c <_scanf_float+0x64>
 80086f4:	3501      	adds	r5, #1
 80086f6:	b2ed      	uxtb	r5, r5
 80086f8:	e7d7      	b.n	80086aa <_scanf_float+0x192>
 80086fa:	f1ba 0f01 	cmp.w	sl, #1
 80086fe:	f47f af3d 	bne.w	800857c <_scanf_float+0x64>
 8008702:	f04f 0a02 	mov.w	sl, #2
 8008706:	e7d0      	b.n	80086aa <_scanf_float+0x192>
 8008708:	b97d      	cbnz	r5, 800872a <_scanf_float+0x212>
 800870a:	f1b9 0f00 	cmp.w	r9, #0
 800870e:	f47f af38 	bne.w	8008582 <_scanf_float+0x6a>
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008718:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800871c:	f040 8108 	bne.w	8008930 <_scanf_float+0x418>
 8008720:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008724:	6022      	str	r2, [r4, #0]
 8008726:	2501      	movs	r5, #1
 8008728:	e7bf      	b.n	80086aa <_scanf_float+0x192>
 800872a:	2d03      	cmp	r5, #3
 800872c:	d0e2      	beq.n	80086f4 <_scanf_float+0x1dc>
 800872e:	2d05      	cmp	r5, #5
 8008730:	e7de      	b.n	80086f0 <_scanf_float+0x1d8>
 8008732:	2d02      	cmp	r5, #2
 8008734:	f47f af22 	bne.w	800857c <_scanf_float+0x64>
 8008738:	2503      	movs	r5, #3
 800873a:	e7b6      	b.n	80086aa <_scanf_float+0x192>
 800873c:	2d06      	cmp	r5, #6
 800873e:	f47f af1d 	bne.w	800857c <_scanf_float+0x64>
 8008742:	2507      	movs	r5, #7
 8008744:	e7b1      	b.n	80086aa <_scanf_float+0x192>
 8008746:	6822      	ldr	r2, [r4, #0]
 8008748:	0591      	lsls	r1, r2, #22
 800874a:	f57f af17 	bpl.w	800857c <_scanf_float+0x64>
 800874e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008752:	6022      	str	r2, [r4, #0]
 8008754:	f8cd 9008 	str.w	r9, [sp, #8]
 8008758:	e7a7      	b.n	80086aa <_scanf_float+0x192>
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008760:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008764:	d006      	beq.n	8008774 <_scanf_float+0x25c>
 8008766:	0550      	lsls	r0, r2, #21
 8008768:	f57f af08 	bpl.w	800857c <_scanf_float+0x64>
 800876c:	f1b9 0f00 	cmp.w	r9, #0
 8008770:	f000 80de 	beq.w	8008930 <_scanf_float+0x418>
 8008774:	0591      	lsls	r1, r2, #22
 8008776:	bf58      	it	pl
 8008778:	9902      	ldrpl	r1, [sp, #8]
 800877a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800877e:	bf58      	it	pl
 8008780:	eba9 0101 	subpl.w	r1, r9, r1
 8008784:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008788:	bf58      	it	pl
 800878a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800878e:	6022      	str	r2, [r4, #0]
 8008790:	f04f 0900 	mov.w	r9, #0
 8008794:	e789      	b.n	80086aa <_scanf_float+0x192>
 8008796:	f04f 0a03 	mov.w	sl, #3
 800879a:	e786      	b.n	80086aa <_scanf_float+0x192>
 800879c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80087a0:	4639      	mov	r1, r7
 80087a2:	4640      	mov	r0, r8
 80087a4:	4798      	blx	r3
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f aedb 	beq.w	8008562 <_scanf_float+0x4a>
 80087ac:	e6e6      	b.n	800857c <_scanf_float+0x64>
 80087ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087b6:	463a      	mov	r2, r7
 80087b8:	4640      	mov	r0, r8
 80087ba:	4798      	blx	r3
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	3b01      	subs	r3, #1
 80087c0:	6123      	str	r3, [r4, #16]
 80087c2:	e6e8      	b.n	8008596 <_scanf_float+0x7e>
 80087c4:	1e6b      	subs	r3, r5, #1
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d824      	bhi.n	8008814 <_scanf_float+0x2fc>
 80087ca:	2d02      	cmp	r5, #2
 80087cc:	d836      	bhi.n	800883c <_scanf_float+0x324>
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	429e      	cmp	r6, r3
 80087d2:	f67f aee4 	bls.w	800859e <_scanf_float+0x86>
 80087d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087de:	463a      	mov	r2, r7
 80087e0:	4640      	mov	r0, r8
 80087e2:	4798      	blx	r3
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	6123      	str	r3, [r4, #16]
 80087ea:	e7f0      	b.n	80087ce <_scanf_float+0x2b6>
 80087ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80087f4:	463a      	mov	r2, r7
 80087f6:	4640      	mov	r0, r8
 80087f8:	4798      	blx	r3
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008804:	fa5f fa8a 	uxtb.w	sl, sl
 8008808:	f1ba 0f02 	cmp.w	sl, #2
 800880c:	d1ee      	bne.n	80087ec <_scanf_float+0x2d4>
 800880e:	3d03      	subs	r5, #3
 8008810:	b2ed      	uxtb	r5, r5
 8008812:	1b76      	subs	r6, r6, r5
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	05da      	lsls	r2, r3, #23
 8008818:	d530      	bpl.n	800887c <_scanf_float+0x364>
 800881a:	055b      	lsls	r3, r3, #21
 800881c:	d511      	bpl.n	8008842 <_scanf_float+0x32a>
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	429e      	cmp	r6, r3
 8008822:	f67f aebc 	bls.w	800859e <_scanf_float+0x86>
 8008826:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800882a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800882e:	463a      	mov	r2, r7
 8008830:	4640      	mov	r0, r8
 8008832:	4798      	blx	r3
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	3b01      	subs	r3, #1
 8008838:	6123      	str	r3, [r4, #16]
 800883a:	e7f0      	b.n	800881e <_scanf_float+0x306>
 800883c:	46aa      	mov	sl, r5
 800883e:	46b3      	mov	fp, r6
 8008840:	e7de      	b.n	8008800 <_scanf_float+0x2e8>
 8008842:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	2965      	cmp	r1, #101	@ 0x65
 800884a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800884e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	d00c      	beq.n	8008870 <_scanf_float+0x358>
 8008856:	2945      	cmp	r1, #69	@ 0x45
 8008858:	d00a      	beq.n	8008870 <_scanf_float+0x358>
 800885a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800885e:	463a      	mov	r2, r7
 8008860:	4640      	mov	r0, r8
 8008862:	4798      	blx	r3
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800886a:	3b01      	subs	r3, #1
 800886c:	1eb5      	subs	r5, r6, #2
 800886e:	6123      	str	r3, [r4, #16]
 8008870:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008874:	463a      	mov	r2, r7
 8008876:	4640      	mov	r0, r8
 8008878:	4798      	blx	r3
 800887a:	462e      	mov	r6, r5
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	f012 0210 	ands.w	r2, r2, #16
 8008882:	d001      	beq.n	8008888 <_scanf_float+0x370>
 8008884:	2000      	movs	r0, #0
 8008886:	e68b      	b.n	80085a0 <_scanf_float+0x88>
 8008888:	7032      	strb	r2, [r6, #0]
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008894:	d11c      	bne.n	80088d0 <_scanf_float+0x3b8>
 8008896:	9b02      	ldr	r3, [sp, #8]
 8008898:	454b      	cmp	r3, r9
 800889a:	eba3 0209 	sub.w	r2, r3, r9
 800889e:	d123      	bne.n	80088e8 <_scanf_float+0x3d0>
 80088a0:	9901      	ldr	r1, [sp, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	4640      	mov	r0, r8
 80088a6:	f000 ff13 	bl	80096d0 <_strtod_r>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	6821      	ldr	r1, [r4, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f011 0f02 	tst.w	r1, #2
 80088b4:	ec57 6b10 	vmov	r6, r7, d0
 80088b8:	f103 0204 	add.w	r2, r3, #4
 80088bc:	d01f      	beq.n	80088fe <_scanf_float+0x3e6>
 80088be:	9903      	ldr	r1, [sp, #12]
 80088c0:	600a      	str	r2, [r1, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	e9c3 6700 	strd	r6, r7, [r3]
 80088c8:	68e3      	ldr	r3, [r4, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60e3      	str	r3, [r4, #12]
 80088ce:	e7d9      	b.n	8008884 <_scanf_float+0x36c>
 80088d0:	9b04      	ldr	r3, [sp, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0e4      	beq.n	80088a0 <_scanf_float+0x388>
 80088d6:	9905      	ldr	r1, [sp, #20]
 80088d8:	230a      	movs	r3, #10
 80088da:	3101      	adds	r1, #1
 80088dc:	4640      	mov	r0, r8
 80088de:	f000 ff77 	bl	80097d0 <_strtol_r>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	9e05      	ldr	r6, [sp, #20]
 80088e6:	1ac2      	subs	r2, r0, r3
 80088e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80088ec:	429e      	cmp	r6, r3
 80088ee:	bf28      	it	cs
 80088f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80088f4:	4910      	ldr	r1, [pc, #64]	@ (8008938 <_scanf_float+0x420>)
 80088f6:	4630      	mov	r0, r6
 80088f8:	f000 f822 	bl	8008940 <siprintf>
 80088fc:	e7d0      	b.n	80088a0 <_scanf_float+0x388>
 80088fe:	f011 0f04 	tst.w	r1, #4
 8008902:	9903      	ldr	r1, [sp, #12]
 8008904:	600a      	str	r2, [r1, #0]
 8008906:	d1dc      	bne.n	80088c2 <_scanf_float+0x3aa>
 8008908:	681d      	ldr	r5, [r3, #0]
 800890a:	4632      	mov	r2, r6
 800890c:	463b      	mov	r3, r7
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f8 f90b 	bl	8000b2c <__aeabi_dcmpun>
 8008916:	b128      	cbz	r0, 8008924 <_scanf_float+0x40c>
 8008918:	4808      	ldr	r0, [pc, #32]	@ (800893c <_scanf_float+0x424>)
 800891a:	f001 f84d 	bl	80099b8 <nanf>
 800891e:	ed85 0a00 	vstr	s0, [r5]
 8008922:	e7d1      	b.n	80088c8 <_scanf_float+0x3b0>
 8008924:	4630      	mov	r0, r6
 8008926:	4639      	mov	r1, r7
 8008928:	f7f8 f95e 	bl	8000be8 <__aeabi_d2f>
 800892c:	6028      	str	r0, [r5, #0]
 800892e:	e7cb      	b.n	80088c8 <_scanf_float+0x3b0>
 8008930:	f04f 0900 	mov.w	r9, #0
 8008934:	e629      	b.n	800858a <_scanf_float+0x72>
 8008936:	bf00      	nop
 8008938:	0800c628 	.word	0x0800c628
 800893c:	0800ca1b 	.word	0x0800ca1b

08008940 <siprintf>:
 8008940:	b40e      	push	{r1, r2, r3}
 8008942:	b500      	push	{lr}
 8008944:	b09c      	sub	sp, #112	@ 0x70
 8008946:	ab1d      	add	r3, sp, #116	@ 0x74
 8008948:	9002      	str	r0, [sp, #8]
 800894a:	9006      	str	r0, [sp, #24]
 800894c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008950:	4809      	ldr	r0, [pc, #36]	@ (8008978 <siprintf+0x38>)
 8008952:	9107      	str	r1, [sp, #28]
 8008954:	9104      	str	r1, [sp, #16]
 8008956:	4909      	ldr	r1, [pc, #36]	@ (800897c <siprintf+0x3c>)
 8008958:	f853 2b04 	ldr.w	r2, [r3], #4
 800895c:	9105      	str	r1, [sp, #20]
 800895e:	6800      	ldr	r0, [r0, #0]
 8008960:	9301      	str	r3, [sp, #4]
 8008962:	a902      	add	r1, sp, #8
 8008964:	f002 fa10 	bl	800ad88 <_svfiprintf_r>
 8008968:	9b02      	ldr	r3, [sp, #8]
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
 800896e:	b01c      	add	sp, #112	@ 0x70
 8008970:	f85d eb04 	ldr.w	lr, [sp], #4
 8008974:	b003      	add	sp, #12
 8008976:	4770      	bx	lr
 8008978:	20000188 	.word	0x20000188
 800897c:	ffff0208 	.word	0xffff0208

08008980 <std>:
 8008980:	2300      	movs	r3, #0
 8008982:	b510      	push	{r4, lr}
 8008984:	4604      	mov	r4, r0
 8008986:	e9c0 3300 	strd	r3, r3, [r0]
 800898a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800898e:	6083      	str	r3, [r0, #8]
 8008990:	8181      	strh	r1, [r0, #12]
 8008992:	6643      	str	r3, [r0, #100]	@ 0x64
 8008994:	81c2      	strh	r2, [r0, #14]
 8008996:	6183      	str	r3, [r0, #24]
 8008998:	4619      	mov	r1, r3
 800899a:	2208      	movs	r2, #8
 800899c:	305c      	adds	r0, #92	@ 0x5c
 800899e:	f000 ffb9 	bl	8009914 <memset>
 80089a2:	4b0d      	ldr	r3, [pc, #52]	@ (80089d8 <std+0x58>)
 80089a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80089a6:	4b0d      	ldr	r3, [pc, #52]	@ (80089dc <std+0x5c>)
 80089a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089aa:	4b0d      	ldr	r3, [pc, #52]	@ (80089e0 <std+0x60>)
 80089ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089ae:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <std+0x64>)
 80089b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80089b2:	4b0d      	ldr	r3, [pc, #52]	@ (80089e8 <std+0x68>)
 80089b4:	6224      	str	r4, [r4, #32]
 80089b6:	429c      	cmp	r4, r3
 80089b8:	d006      	beq.n	80089c8 <std+0x48>
 80089ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089be:	4294      	cmp	r4, r2
 80089c0:	d002      	beq.n	80089c8 <std+0x48>
 80089c2:	33d0      	adds	r3, #208	@ 0xd0
 80089c4:	429c      	cmp	r4, r3
 80089c6:	d105      	bne.n	80089d4 <std+0x54>
 80089c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d0:	f000 bfd6 	b.w	8009980 <__retarget_lock_init_recursive>
 80089d4:	bd10      	pop	{r4, pc}
 80089d6:	bf00      	nop
 80089d8:	0800be51 	.word	0x0800be51
 80089dc:	0800be73 	.word	0x0800be73
 80089e0:	0800beab 	.word	0x0800beab
 80089e4:	0800becf 	.word	0x0800becf
 80089e8:	20001c68 	.word	0x20001c68

080089ec <stdio_exit_handler>:
 80089ec:	4a02      	ldr	r2, [pc, #8]	@ (80089f8 <stdio_exit_handler+0xc>)
 80089ee:	4903      	ldr	r1, [pc, #12]	@ (80089fc <stdio_exit_handler+0x10>)
 80089f0:	4803      	ldr	r0, [pc, #12]	@ (8008a00 <stdio_exit_handler+0x14>)
 80089f2:	f000 beef 	b.w	80097d4 <_fwalk_sglue>
 80089f6:	bf00      	nop
 80089f8:	20000010 	.word	0x20000010
 80089fc:	0800b485 	.word	0x0800b485
 8008a00:	2000018c 	.word	0x2000018c

08008a04 <cleanup_stdio>:
 8008a04:	6841      	ldr	r1, [r0, #4]
 8008a06:	4b0c      	ldr	r3, [pc, #48]	@ (8008a38 <cleanup_stdio+0x34>)
 8008a08:	4299      	cmp	r1, r3
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	d001      	beq.n	8008a14 <cleanup_stdio+0x10>
 8008a10:	f002 fd38 	bl	800b484 <_fflush_r>
 8008a14:	68a1      	ldr	r1, [r4, #8]
 8008a16:	4b09      	ldr	r3, [pc, #36]	@ (8008a3c <cleanup_stdio+0x38>)
 8008a18:	4299      	cmp	r1, r3
 8008a1a:	d002      	beq.n	8008a22 <cleanup_stdio+0x1e>
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f002 fd31 	bl	800b484 <_fflush_r>
 8008a22:	68e1      	ldr	r1, [r4, #12]
 8008a24:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <cleanup_stdio+0x3c>)
 8008a26:	4299      	cmp	r1, r3
 8008a28:	d004      	beq.n	8008a34 <cleanup_stdio+0x30>
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a30:	f002 bd28 	b.w	800b484 <_fflush_r>
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	bf00      	nop
 8008a38:	20001c68 	.word	0x20001c68
 8008a3c:	20001cd0 	.word	0x20001cd0
 8008a40:	20001d38 	.word	0x20001d38

08008a44 <global_stdio_init.part.0>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	4b0b      	ldr	r3, [pc, #44]	@ (8008a74 <global_stdio_init.part.0+0x30>)
 8008a48:	4c0b      	ldr	r4, [pc, #44]	@ (8008a78 <global_stdio_init.part.0+0x34>)
 8008a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a7c <global_stdio_init.part.0+0x38>)
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	4620      	mov	r0, r4
 8008a50:	2200      	movs	r2, #0
 8008a52:	2104      	movs	r1, #4
 8008a54:	f7ff ff94 	bl	8008980 <std>
 8008a58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	2109      	movs	r1, #9
 8008a60:	f7ff ff8e 	bl	8008980 <std>
 8008a64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a68:	2202      	movs	r2, #2
 8008a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a6e:	2112      	movs	r1, #18
 8008a70:	f7ff bf86 	b.w	8008980 <std>
 8008a74:	20001da0 	.word	0x20001da0
 8008a78:	20001c68 	.word	0x20001c68
 8008a7c:	080089ed 	.word	0x080089ed

08008a80 <__sfp_lock_acquire>:
 8008a80:	4801      	ldr	r0, [pc, #4]	@ (8008a88 <__sfp_lock_acquire+0x8>)
 8008a82:	f000 bf7e 	b.w	8009982 <__retarget_lock_acquire_recursive>
 8008a86:	bf00      	nop
 8008a88:	20001da5 	.word	0x20001da5

08008a8c <__sfp_lock_release>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	@ (8008a94 <__sfp_lock_release+0x8>)
 8008a8e:	f000 bf79 	b.w	8009984 <__retarget_lock_release_recursive>
 8008a92:	bf00      	nop
 8008a94:	20001da5 	.word	0x20001da5

08008a98 <__sinit>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	f7ff fff0 	bl	8008a80 <__sfp_lock_acquire>
 8008aa0:	6a23      	ldr	r3, [r4, #32]
 8008aa2:	b11b      	cbz	r3, 8008aac <__sinit+0x14>
 8008aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa8:	f7ff bff0 	b.w	8008a8c <__sfp_lock_release>
 8008aac:	4b04      	ldr	r3, [pc, #16]	@ (8008ac0 <__sinit+0x28>)
 8008aae:	6223      	str	r3, [r4, #32]
 8008ab0:	4b04      	ldr	r3, [pc, #16]	@ (8008ac4 <__sinit+0x2c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1f5      	bne.n	8008aa4 <__sinit+0xc>
 8008ab8:	f7ff ffc4 	bl	8008a44 <global_stdio_init.part.0>
 8008abc:	e7f2      	b.n	8008aa4 <__sinit+0xc>
 8008abe:	bf00      	nop
 8008ac0:	08008a05 	.word	0x08008a05
 8008ac4:	20001da0 	.word	0x20001da0

08008ac8 <sulp>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4604      	mov	r4, r0
 8008acc:	460d      	mov	r5, r1
 8008ace:	ec45 4b10 	vmov	d0, r4, r5
 8008ad2:	4616      	mov	r6, r2
 8008ad4:	f003 f87e 	bl	800bbd4 <__ulp>
 8008ad8:	ec51 0b10 	vmov	r0, r1, d0
 8008adc:	b17e      	cbz	r6, 8008afe <sulp+0x36>
 8008ade:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ae2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dd09      	ble.n	8008afe <sulp+0x36>
 8008aea:	051b      	lsls	r3, r3, #20
 8008aec:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008af0:	2400      	movs	r4, #0
 8008af2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008af6:	4622      	mov	r2, r4
 8008af8:	462b      	mov	r3, r5
 8008afa:	f7f7 fd7d 	bl	80005f8 <__aeabi_dmul>
 8008afe:	ec41 0b10 	vmov	d0, r0, r1
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	0000      	movs	r0, r0
	...

08008b08 <_strtod_l>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	b09f      	sub	sp, #124	@ 0x7c
 8008b0e:	460c      	mov	r4, r1
 8008b10:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008b12:	2200      	movs	r2, #0
 8008b14:	921a      	str	r2, [sp, #104]	@ 0x68
 8008b16:	9005      	str	r0, [sp, #20]
 8008b18:	f04f 0a00 	mov.w	sl, #0
 8008b1c:	f04f 0b00 	mov.w	fp, #0
 8008b20:	460a      	mov	r2, r1
 8008b22:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b24:	7811      	ldrb	r1, [r2, #0]
 8008b26:	292b      	cmp	r1, #43	@ 0x2b
 8008b28:	d04a      	beq.n	8008bc0 <_strtod_l+0xb8>
 8008b2a:	d838      	bhi.n	8008b9e <_strtod_l+0x96>
 8008b2c:	290d      	cmp	r1, #13
 8008b2e:	d832      	bhi.n	8008b96 <_strtod_l+0x8e>
 8008b30:	2908      	cmp	r1, #8
 8008b32:	d832      	bhi.n	8008b9a <_strtod_l+0x92>
 8008b34:	2900      	cmp	r1, #0
 8008b36:	d03b      	beq.n	8008bb0 <_strtod_l+0xa8>
 8008b38:	2200      	movs	r2, #0
 8008b3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008b3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008b3e:	782a      	ldrb	r2, [r5, #0]
 8008b40:	2a30      	cmp	r2, #48	@ 0x30
 8008b42:	f040 80b3 	bne.w	8008cac <_strtod_l+0x1a4>
 8008b46:	786a      	ldrb	r2, [r5, #1]
 8008b48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b4c:	2a58      	cmp	r2, #88	@ 0x58
 8008b4e:	d16e      	bne.n	8008c2e <_strtod_l+0x126>
 8008b50:	9302      	str	r3, [sp, #8]
 8008b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	ab1a      	add	r3, sp, #104	@ 0x68
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	4a8e      	ldr	r2, [pc, #568]	@ (8008d94 <_strtod_l+0x28c>)
 8008b5c:	9805      	ldr	r0, [sp, #20]
 8008b5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008b60:	a919      	add	r1, sp, #100	@ 0x64
 8008b62:	f001 fde5 	bl	800a730 <__gethex>
 8008b66:	f010 060f 	ands.w	r6, r0, #15
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	d005      	beq.n	8008b7a <_strtod_l+0x72>
 8008b6e:	2e06      	cmp	r6, #6
 8008b70:	d128      	bne.n	8008bc4 <_strtod_l+0xbc>
 8008b72:	3501      	adds	r5, #1
 8008b74:	2300      	movs	r3, #0
 8008b76:	9519      	str	r5, [sp, #100]	@ 0x64
 8008b78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f040 858e 	bne.w	800969e <_strtod_l+0xb96>
 8008b82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b84:	b1cb      	cbz	r3, 8008bba <_strtod_l+0xb2>
 8008b86:	4652      	mov	r2, sl
 8008b88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008b8c:	ec43 2b10 	vmov	d0, r2, r3
 8008b90:	b01f      	add	sp, #124	@ 0x7c
 8008b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b96:	2920      	cmp	r1, #32
 8008b98:	d1ce      	bne.n	8008b38 <_strtod_l+0x30>
 8008b9a:	3201      	adds	r2, #1
 8008b9c:	e7c1      	b.n	8008b22 <_strtod_l+0x1a>
 8008b9e:	292d      	cmp	r1, #45	@ 0x2d
 8008ba0:	d1ca      	bne.n	8008b38 <_strtod_l+0x30>
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ba6:	1c51      	adds	r1, r2, #1
 8008ba8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008baa:	7852      	ldrb	r2, [r2, #1]
 8008bac:	2a00      	cmp	r2, #0
 8008bae:	d1c5      	bne.n	8008b3c <_strtod_l+0x34>
 8008bb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008bb2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f040 8570 	bne.w	800969a <_strtod_l+0xb92>
 8008bba:	4652      	mov	r2, sl
 8008bbc:	465b      	mov	r3, fp
 8008bbe:	e7e5      	b.n	8008b8c <_strtod_l+0x84>
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	e7ef      	b.n	8008ba4 <_strtod_l+0x9c>
 8008bc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008bc6:	b13a      	cbz	r2, 8008bd8 <_strtod_l+0xd0>
 8008bc8:	2135      	movs	r1, #53	@ 0x35
 8008bca:	a81c      	add	r0, sp, #112	@ 0x70
 8008bcc:	f003 f8fc 	bl	800bdc8 <__copybits>
 8008bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bd2:	9805      	ldr	r0, [sp, #20]
 8008bd4:	f002 fcca 	bl	800b56c <_Bfree>
 8008bd8:	3e01      	subs	r6, #1
 8008bda:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008bdc:	2e04      	cmp	r6, #4
 8008bde:	d806      	bhi.n	8008bee <_strtod_l+0xe6>
 8008be0:	e8df f006 	tbb	[pc, r6]
 8008be4:	201d0314 	.word	0x201d0314
 8008be8:	14          	.byte	0x14
 8008be9:	00          	.byte	0x00
 8008bea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008bee:	05e1      	lsls	r1, r4, #23
 8008bf0:	bf48      	it	mi
 8008bf2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008bf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bfa:	0d1b      	lsrs	r3, r3, #20
 8008bfc:	051b      	lsls	r3, r3, #20
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1bb      	bne.n	8008b7a <_strtod_l+0x72>
 8008c02:	f000 fe93 	bl	800992c <__errno>
 8008c06:	2322      	movs	r3, #34	@ 0x22
 8008c08:	6003      	str	r3, [r0, #0]
 8008c0a:	e7b6      	b.n	8008b7a <_strtod_l+0x72>
 8008c0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008c10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008c14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008c18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c1c:	e7e7      	b.n	8008bee <_strtod_l+0xe6>
 8008c1e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008d9c <_strtod_l+0x294>
 8008c22:	e7e4      	b.n	8008bee <_strtod_l+0xe6>
 8008c24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008c28:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008c2c:	e7df      	b.n	8008bee <_strtod_l+0xe6>
 8008c2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b30      	cmp	r3, #48	@ 0x30
 8008c38:	d0f9      	beq.n	8008c2e <_strtod_l+0x126>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d09d      	beq.n	8008b7a <_strtod_l+0x72>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c44:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c46:	2300      	movs	r3, #0
 8008c48:	9308      	str	r3, [sp, #32]
 8008c4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c4c:	461f      	mov	r7, r3
 8008c4e:	220a      	movs	r2, #10
 8008c50:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008c52:	7805      	ldrb	r5, [r0, #0]
 8008c54:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008c58:	b2d9      	uxtb	r1, r3
 8008c5a:	2909      	cmp	r1, #9
 8008c5c:	d928      	bls.n	8008cb0 <_strtod_l+0x1a8>
 8008c5e:	494e      	ldr	r1, [pc, #312]	@ (8008d98 <_strtod_l+0x290>)
 8008c60:	2201      	movs	r2, #1
 8008c62:	f000 fe45 	bl	80098f0 <strncmp>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d032      	beq.n	8008cd0 <_strtod_l+0x1c8>
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	462a      	mov	r2, r5
 8008c6e:	4681      	mov	r9, r0
 8008c70:	463d      	mov	r5, r7
 8008c72:	4603      	mov	r3, r0
 8008c74:	2a65      	cmp	r2, #101	@ 0x65
 8008c76:	d001      	beq.n	8008c7c <_strtod_l+0x174>
 8008c78:	2a45      	cmp	r2, #69	@ 0x45
 8008c7a:	d114      	bne.n	8008ca6 <_strtod_l+0x19e>
 8008c7c:	b91d      	cbnz	r5, 8008c86 <_strtod_l+0x17e>
 8008c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c80:	4302      	orrs	r2, r0
 8008c82:	d095      	beq.n	8008bb0 <_strtod_l+0xa8>
 8008c84:	2500      	movs	r5, #0
 8008c86:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008c88:	1c62      	adds	r2, r4, #1
 8008c8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c8c:	7862      	ldrb	r2, [r4, #1]
 8008c8e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008c90:	d077      	beq.n	8008d82 <_strtod_l+0x27a>
 8008c92:	2a2d      	cmp	r2, #45	@ 0x2d
 8008c94:	d07b      	beq.n	8008d8e <_strtod_l+0x286>
 8008c96:	f04f 0c00 	mov.w	ip, #0
 8008c9a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008c9e:	2909      	cmp	r1, #9
 8008ca0:	f240 8082 	bls.w	8008da8 <_strtod_l+0x2a0>
 8008ca4:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ca6:	f04f 0800 	mov.w	r8, #0
 8008caa:	e0a2      	b.n	8008df2 <_strtod_l+0x2ea>
 8008cac:	2300      	movs	r3, #0
 8008cae:	e7c7      	b.n	8008c40 <_strtod_l+0x138>
 8008cb0:	2f08      	cmp	r7, #8
 8008cb2:	bfd5      	itete	le
 8008cb4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008cb6:	9908      	ldrgt	r1, [sp, #32]
 8008cb8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008cbc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008cc0:	f100 0001 	add.w	r0, r0, #1
 8008cc4:	bfd4      	ite	le
 8008cc6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008cc8:	9308      	strgt	r3, [sp, #32]
 8008cca:	3701      	adds	r7, #1
 8008ccc:	9019      	str	r0, [sp, #100]	@ 0x64
 8008cce:	e7bf      	b.n	8008c50 <_strtod_l+0x148>
 8008cd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cd6:	785a      	ldrb	r2, [r3, #1]
 8008cd8:	b37f      	cbz	r7, 8008d3a <_strtod_l+0x232>
 8008cda:	4681      	mov	r9, r0
 8008cdc:	463d      	mov	r5, r7
 8008cde:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008ce2:	2b09      	cmp	r3, #9
 8008ce4:	d912      	bls.n	8008d0c <_strtod_l+0x204>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e7c4      	b.n	8008c74 <_strtod_l+0x16c>
 8008cea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cf0:	785a      	ldrb	r2, [r3, #1]
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	2a30      	cmp	r2, #48	@ 0x30
 8008cf6:	d0f8      	beq.n	8008cea <_strtod_l+0x1e2>
 8008cf8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	f200 84d3 	bhi.w	80096a8 <_strtod_l+0xba0>
 8008d02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d04:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d06:	4681      	mov	r9, r0
 8008d08:	2000      	movs	r0, #0
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	3a30      	subs	r2, #48	@ 0x30
 8008d0e:	f100 0301 	add.w	r3, r0, #1
 8008d12:	d02a      	beq.n	8008d6a <_strtod_l+0x262>
 8008d14:	4499      	add	r9, r3
 8008d16:	eb00 0c05 	add.w	ip, r0, r5
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	210a      	movs	r1, #10
 8008d1e:	4563      	cmp	r3, ip
 8008d20:	d10d      	bne.n	8008d3e <_strtod_l+0x236>
 8008d22:	1c69      	adds	r1, r5, #1
 8008d24:	4401      	add	r1, r0
 8008d26:	4428      	add	r0, r5
 8008d28:	2808      	cmp	r0, #8
 8008d2a:	dc16      	bgt.n	8008d5a <_strtod_l+0x252>
 8008d2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d2e:	230a      	movs	r3, #10
 8008d30:	fb03 2300 	mla	r3, r3, r0, r2
 8008d34:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d36:	2300      	movs	r3, #0
 8008d38:	e018      	b.n	8008d6c <_strtod_l+0x264>
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	e7da      	b.n	8008cf4 <_strtod_l+0x1ec>
 8008d3e:	2b08      	cmp	r3, #8
 8008d40:	f103 0301 	add.w	r3, r3, #1
 8008d44:	dc03      	bgt.n	8008d4e <_strtod_l+0x246>
 8008d46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008d48:	434e      	muls	r6, r1
 8008d4a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008d4c:	e7e7      	b.n	8008d1e <_strtod_l+0x216>
 8008d4e:	2b10      	cmp	r3, #16
 8008d50:	bfde      	ittt	le
 8008d52:	9e08      	ldrle	r6, [sp, #32]
 8008d54:	434e      	mulle	r6, r1
 8008d56:	9608      	strle	r6, [sp, #32]
 8008d58:	e7e1      	b.n	8008d1e <_strtod_l+0x216>
 8008d5a:	280f      	cmp	r0, #15
 8008d5c:	dceb      	bgt.n	8008d36 <_strtod_l+0x22e>
 8008d5e:	9808      	ldr	r0, [sp, #32]
 8008d60:	230a      	movs	r3, #10
 8008d62:	fb03 2300 	mla	r3, r3, r0, r2
 8008d66:	9308      	str	r3, [sp, #32]
 8008d68:	e7e5      	b.n	8008d36 <_strtod_l+0x22e>
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d6e:	1c50      	adds	r0, r2, #1
 8008d70:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d72:	7852      	ldrb	r2, [r2, #1]
 8008d74:	4618      	mov	r0, r3
 8008d76:	460d      	mov	r5, r1
 8008d78:	e7b1      	b.n	8008cde <_strtod_l+0x1d6>
 8008d7a:	f04f 0900 	mov.w	r9, #0
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e77d      	b.n	8008c7e <_strtod_l+0x176>
 8008d82:	f04f 0c00 	mov.w	ip, #0
 8008d86:	1ca2      	adds	r2, r4, #2
 8008d88:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d8a:	78a2      	ldrb	r2, [r4, #2]
 8008d8c:	e785      	b.n	8008c9a <_strtod_l+0x192>
 8008d8e:	f04f 0c01 	mov.w	ip, #1
 8008d92:	e7f8      	b.n	8008d86 <_strtod_l+0x27e>
 8008d94:	0800c644 	.word	0x0800c644
 8008d98:	0800c62d 	.word	0x0800c62d
 8008d9c:	7ff00000 	.word	0x7ff00000
 8008da0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008da2:	1c51      	adds	r1, r2, #1
 8008da4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008da6:	7852      	ldrb	r2, [r2, #1]
 8008da8:	2a30      	cmp	r2, #48	@ 0x30
 8008daa:	d0f9      	beq.n	8008da0 <_strtod_l+0x298>
 8008dac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008db0:	2908      	cmp	r1, #8
 8008db2:	f63f af78 	bhi.w	8008ca6 <_strtod_l+0x19e>
 8008db6:	3a30      	subs	r2, #48	@ 0x30
 8008db8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008dba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008dbc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008dbe:	f04f 080a 	mov.w	r8, #10
 8008dc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008dc4:	1c56      	adds	r6, r2, #1
 8008dc6:	9619      	str	r6, [sp, #100]	@ 0x64
 8008dc8:	7852      	ldrb	r2, [r2, #1]
 8008dca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008dce:	f1be 0f09 	cmp.w	lr, #9
 8008dd2:	d939      	bls.n	8008e48 <_strtod_l+0x340>
 8008dd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008dd6:	1a76      	subs	r6, r6, r1
 8008dd8:	2e08      	cmp	r6, #8
 8008dda:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008dde:	dc03      	bgt.n	8008de8 <_strtod_l+0x2e0>
 8008de0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008de2:	4588      	cmp	r8, r1
 8008de4:	bfa8      	it	ge
 8008de6:	4688      	movge	r8, r1
 8008de8:	f1bc 0f00 	cmp.w	ip, #0
 8008dec:	d001      	beq.n	8008df2 <_strtod_l+0x2ea>
 8008dee:	f1c8 0800 	rsb	r8, r8, #0
 8008df2:	2d00      	cmp	r5, #0
 8008df4:	d14e      	bne.n	8008e94 <_strtod_l+0x38c>
 8008df6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008df8:	4308      	orrs	r0, r1
 8008dfa:	f47f aebe 	bne.w	8008b7a <_strtod_l+0x72>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f47f aed6 	bne.w	8008bb0 <_strtod_l+0xa8>
 8008e04:	2a69      	cmp	r2, #105	@ 0x69
 8008e06:	d028      	beq.n	8008e5a <_strtod_l+0x352>
 8008e08:	dc25      	bgt.n	8008e56 <_strtod_l+0x34e>
 8008e0a:	2a49      	cmp	r2, #73	@ 0x49
 8008e0c:	d025      	beq.n	8008e5a <_strtod_l+0x352>
 8008e0e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008e10:	f47f aece 	bne.w	8008bb0 <_strtod_l+0xa8>
 8008e14:	499b      	ldr	r1, [pc, #620]	@ (8009084 <_strtod_l+0x57c>)
 8008e16:	a819      	add	r0, sp, #100	@ 0x64
 8008e18:	f001 feac 	bl	800ab74 <__match>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	f43f aec7 	beq.w	8008bb0 <_strtod_l+0xa8>
 8008e22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b28      	cmp	r3, #40	@ 0x28
 8008e28:	d12e      	bne.n	8008e88 <_strtod_l+0x380>
 8008e2a:	4997      	ldr	r1, [pc, #604]	@ (8009088 <_strtod_l+0x580>)
 8008e2c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008e2e:	a819      	add	r0, sp, #100	@ 0x64
 8008e30:	f001 feb4 	bl	800ab9c <__hexnan>
 8008e34:	2805      	cmp	r0, #5
 8008e36:	d127      	bne.n	8008e88 <_strtod_l+0x380>
 8008e38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008e3a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008e3e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008e42:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008e46:	e698      	b.n	8008b7a <_strtod_l+0x72>
 8008e48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008e4a:	fb08 2101 	mla	r1, r8, r1, r2
 8008e4e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008e52:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e54:	e7b5      	b.n	8008dc2 <_strtod_l+0x2ba>
 8008e56:	2a6e      	cmp	r2, #110	@ 0x6e
 8008e58:	e7da      	b.n	8008e10 <_strtod_l+0x308>
 8008e5a:	498c      	ldr	r1, [pc, #560]	@ (800908c <_strtod_l+0x584>)
 8008e5c:	a819      	add	r0, sp, #100	@ 0x64
 8008e5e:	f001 fe89 	bl	800ab74 <__match>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f43f aea4 	beq.w	8008bb0 <_strtod_l+0xa8>
 8008e68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e6a:	4989      	ldr	r1, [pc, #548]	@ (8009090 <_strtod_l+0x588>)
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	a819      	add	r0, sp, #100	@ 0x64
 8008e70:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e72:	f001 fe7f 	bl	800ab74 <__match>
 8008e76:	b910      	cbnz	r0, 8008e7e <_strtod_l+0x376>
 8008e78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e7e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80090a0 <_strtod_l+0x598>
 8008e82:	f04f 0a00 	mov.w	sl, #0
 8008e86:	e678      	b.n	8008b7a <_strtod_l+0x72>
 8008e88:	4882      	ldr	r0, [pc, #520]	@ (8009094 <_strtod_l+0x58c>)
 8008e8a:	f000 fd8d 	bl	80099a8 <nan>
 8008e8e:	ec5b ab10 	vmov	sl, fp, d0
 8008e92:	e672      	b.n	8008b7a <_strtod_l+0x72>
 8008e94:	eba8 0309 	sub.w	r3, r8, r9
 8008e98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	bf08      	it	eq
 8008ea0:	462f      	moveq	r7, r5
 8008ea2:	2d10      	cmp	r5, #16
 8008ea4:	462c      	mov	r4, r5
 8008ea6:	bfa8      	it	ge
 8008ea8:	2410      	movge	r4, #16
 8008eaa:	f7f7 fb2b 	bl	8000504 <__aeabi_ui2d>
 8008eae:	2d09      	cmp	r5, #9
 8008eb0:	4682      	mov	sl, r0
 8008eb2:	468b      	mov	fp, r1
 8008eb4:	dc13      	bgt.n	8008ede <_strtod_l+0x3d6>
 8008eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f43f ae5e 	beq.w	8008b7a <_strtod_l+0x72>
 8008ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec0:	dd78      	ble.n	8008fb4 <_strtod_l+0x4ac>
 8008ec2:	2b16      	cmp	r3, #22
 8008ec4:	dc5f      	bgt.n	8008f86 <_strtod_l+0x47e>
 8008ec6:	4974      	ldr	r1, [pc, #464]	@ (8009098 <_strtod_l+0x590>)
 8008ec8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	465b      	mov	r3, fp
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	4682      	mov	sl, r0
 8008eda:	468b      	mov	fp, r1
 8008edc:	e64d      	b.n	8008b7a <_strtod_l+0x72>
 8008ede:	4b6e      	ldr	r3, [pc, #440]	@ (8009098 <_strtod_l+0x590>)
 8008ee0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ee4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ee8:	f7f7 fb86 	bl	80005f8 <__aeabi_dmul>
 8008eec:	4682      	mov	sl, r0
 8008eee:	9808      	ldr	r0, [sp, #32]
 8008ef0:	468b      	mov	fp, r1
 8008ef2:	f7f7 fb07 	bl	8000504 <__aeabi_ui2d>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4650      	mov	r0, sl
 8008efc:	4659      	mov	r1, fp
 8008efe:	f7f7 f9c5 	bl	800028c <__adddf3>
 8008f02:	2d0f      	cmp	r5, #15
 8008f04:	4682      	mov	sl, r0
 8008f06:	468b      	mov	fp, r1
 8008f08:	ddd5      	ble.n	8008eb6 <_strtod_l+0x3ae>
 8008f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f0c:	1b2c      	subs	r4, r5, r4
 8008f0e:	441c      	add	r4, r3
 8008f10:	2c00      	cmp	r4, #0
 8008f12:	f340 8096 	ble.w	8009042 <_strtod_l+0x53a>
 8008f16:	f014 030f 	ands.w	r3, r4, #15
 8008f1a:	d00a      	beq.n	8008f32 <_strtod_l+0x42a>
 8008f1c:	495e      	ldr	r1, [pc, #376]	@ (8009098 <_strtod_l+0x590>)
 8008f1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f22:	4652      	mov	r2, sl
 8008f24:	465b      	mov	r3, fp
 8008f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f2a:	f7f7 fb65 	bl	80005f8 <__aeabi_dmul>
 8008f2e:	4682      	mov	sl, r0
 8008f30:	468b      	mov	fp, r1
 8008f32:	f034 040f 	bics.w	r4, r4, #15
 8008f36:	d073      	beq.n	8009020 <_strtod_l+0x518>
 8008f38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008f3c:	dd48      	ble.n	8008fd0 <_strtod_l+0x4c8>
 8008f3e:	2400      	movs	r4, #0
 8008f40:	46a0      	mov	r8, r4
 8008f42:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f44:	46a1      	mov	r9, r4
 8008f46:	9a05      	ldr	r2, [sp, #20]
 8008f48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80090a0 <_strtod_l+0x598>
 8008f4c:	2322      	movs	r3, #34	@ 0x22
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	f04f 0a00 	mov.w	sl, #0
 8008f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f43f ae0f 	beq.w	8008b7a <_strtod_l+0x72>
 8008f5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f5e:	9805      	ldr	r0, [sp, #20]
 8008f60:	f002 fb04 	bl	800b56c <_Bfree>
 8008f64:	9805      	ldr	r0, [sp, #20]
 8008f66:	4649      	mov	r1, r9
 8008f68:	f002 fb00 	bl	800b56c <_Bfree>
 8008f6c:	9805      	ldr	r0, [sp, #20]
 8008f6e:	4641      	mov	r1, r8
 8008f70:	f002 fafc 	bl	800b56c <_Bfree>
 8008f74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f76:	9805      	ldr	r0, [sp, #20]
 8008f78:	f002 faf8 	bl	800b56c <_Bfree>
 8008f7c:	9805      	ldr	r0, [sp, #20]
 8008f7e:	4621      	mov	r1, r4
 8008f80:	f002 faf4 	bl	800b56c <_Bfree>
 8008f84:	e5f9      	b.n	8008b7a <_strtod_l+0x72>
 8008f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	dbbc      	blt.n	8008f0a <_strtod_l+0x402>
 8008f90:	4c41      	ldr	r4, [pc, #260]	@ (8009098 <_strtod_l+0x590>)
 8008f92:	f1c5 050f 	rsb	r5, r5, #15
 8008f96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008f9a:	4652      	mov	r2, sl
 8008f9c:	465b      	mov	r3, fp
 8008f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa2:	f7f7 fb29 	bl	80005f8 <__aeabi_dmul>
 8008fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa8:	1b5d      	subs	r5, r3, r5
 8008faa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008fae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008fb2:	e78f      	b.n	8008ed4 <_strtod_l+0x3cc>
 8008fb4:	3316      	adds	r3, #22
 8008fb6:	dba8      	blt.n	8008f0a <_strtod_l+0x402>
 8008fb8:	4b37      	ldr	r3, [pc, #220]	@ (8009098 <_strtod_l+0x590>)
 8008fba:	eba9 0808 	sub.w	r8, r9, r8
 8008fbe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008fc2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008fc6:	4650      	mov	r0, sl
 8008fc8:	4659      	mov	r1, fp
 8008fca:	f7f7 fc3f 	bl	800084c <__aeabi_ddiv>
 8008fce:	e783      	b.n	8008ed8 <_strtod_l+0x3d0>
 8008fd0:	4b32      	ldr	r3, [pc, #200]	@ (800909c <_strtod_l+0x594>)
 8008fd2:	9308      	str	r3, [sp, #32]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	1124      	asrs	r4, r4, #4
 8008fd8:	4650      	mov	r0, sl
 8008fda:	4659      	mov	r1, fp
 8008fdc:	461e      	mov	r6, r3
 8008fde:	2c01      	cmp	r4, #1
 8008fe0:	dc21      	bgt.n	8009026 <_strtod_l+0x51e>
 8008fe2:	b10b      	cbz	r3, 8008fe8 <_strtod_l+0x4e0>
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	468b      	mov	fp, r1
 8008fe8:	492c      	ldr	r1, [pc, #176]	@ (800909c <_strtod_l+0x594>)
 8008fea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008fee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008ff2:	4652      	mov	r2, sl
 8008ff4:	465b      	mov	r3, fp
 8008ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ffa:	f7f7 fafd 	bl	80005f8 <__aeabi_dmul>
 8008ffe:	4b28      	ldr	r3, [pc, #160]	@ (80090a0 <_strtod_l+0x598>)
 8009000:	460a      	mov	r2, r1
 8009002:	400b      	ands	r3, r1
 8009004:	4927      	ldr	r1, [pc, #156]	@ (80090a4 <_strtod_l+0x59c>)
 8009006:	428b      	cmp	r3, r1
 8009008:	4682      	mov	sl, r0
 800900a:	d898      	bhi.n	8008f3e <_strtod_l+0x436>
 800900c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009010:	428b      	cmp	r3, r1
 8009012:	bf86      	itte	hi
 8009014:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80090a8 <_strtod_l+0x5a0>
 8009018:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800901c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009020:	2300      	movs	r3, #0
 8009022:	9308      	str	r3, [sp, #32]
 8009024:	e07a      	b.n	800911c <_strtod_l+0x614>
 8009026:	07e2      	lsls	r2, r4, #31
 8009028:	d505      	bpl.n	8009036 <_strtod_l+0x52e>
 800902a:	9b08      	ldr	r3, [sp, #32]
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	f7f7 fae2 	bl	80005f8 <__aeabi_dmul>
 8009034:	2301      	movs	r3, #1
 8009036:	9a08      	ldr	r2, [sp, #32]
 8009038:	3208      	adds	r2, #8
 800903a:	3601      	adds	r6, #1
 800903c:	1064      	asrs	r4, r4, #1
 800903e:	9208      	str	r2, [sp, #32]
 8009040:	e7cd      	b.n	8008fde <_strtod_l+0x4d6>
 8009042:	d0ed      	beq.n	8009020 <_strtod_l+0x518>
 8009044:	4264      	negs	r4, r4
 8009046:	f014 020f 	ands.w	r2, r4, #15
 800904a:	d00a      	beq.n	8009062 <_strtod_l+0x55a>
 800904c:	4b12      	ldr	r3, [pc, #72]	@ (8009098 <_strtod_l+0x590>)
 800904e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009052:	4650      	mov	r0, sl
 8009054:	4659      	mov	r1, fp
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	f7f7 fbf7 	bl	800084c <__aeabi_ddiv>
 800905e:	4682      	mov	sl, r0
 8009060:	468b      	mov	fp, r1
 8009062:	1124      	asrs	r4, r4, #4
 8009064:	d0dc      	beq.n	8009020 <_strtod_l+0x518>
 8009066:	2c1f      	cmp	r4, #31
 8009068:	dd20      	ble.n	80090ac <_strtod_l+0x5a4>
 800906a:	2400      	movs	r4, #0
 800906c:	46a0      	mov	r8, r4
 800906e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009070:	46a1      	mov	r9, r4
 8009072:	9a05      	ldr	r2, [sp, #20]
 8009074:	2322      	movs	r3, #34	@ 0x22
 8009076:	f04f 0a00 	mov.w	sl, #0
 800907a:	f04f 0b00 	mov.w	fp, #0
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	e768      	b.n	8008f54 <_strtod_l+0x44c>
 8009082:	bf00      	nop
 8009084:	0800c601 	.word	0x0800c601
 8009088:	0800c630 	.word	0x0800c630
 800908c:	0800c5f9 	.word	0x0800c5f9
 8009090:	0800c78c 	.word	0x0800c78c
 8009094:	0800ca1b 	.word	0x0800ca1b
 8009098:	0800c918 	.word	0x0800c918
 800909c:	0800c8f0 	.word	0x0800c8f0
 80090a0:	7ff00000 	.word	0x7ff00000
 80090a4:	7ca00000 	.word	0x7ca00000
 80090a8:	7fefffff 	.word	0x7fefffff
 80090ac:	f014 0310 	ands.w	r3, r4, #16
 80090b0:	bf18      	it	ne
 80090b2:	236a      	movne	r3, #106	@ 0x6a
 80090b4:	4ea9      	ldr	r6, [pc, #676]	@ (800935c <_strtod_l+0x854>)
 80090b6:	9308      	str	r3, [sp, #32]
 80090b8:	4650      	mov	r0, sl
 80090ba:	4659      	mov	r1, fp
 80090bc:	2300      	movs	r3, #0
 80090be:	07e2      	lsls	r2, r4, #31
 80090c0:	d504      	bpl.n	80090cc <_strtod_l+0x5c4>
 80090c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090c6:	f7f7 fa97 	bl	80005f8 <__aeabi_dmul>
 80090ca:	2301      	movs	r3, #1
 80090cc:	1064      	asrs	r4, r4, #1
 80090ce:	f106 0608 	add.w	r6, r6, #8
 80090d2:	d1f4      	bne.n	80090be <_strtod_l+0x5b6>
 80090d4:	b10b      	cbz	r3, 80090da <_strtod_l+0x5d2>
 80090d6:	4682      	mov	sl, r0
 80090d8:	468b      	mov	fp, r1
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	b1b3      	cbz	r3, 800910c <_strtod_l+0x604>
 80090de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80090e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	4659      	mov	r1, fp
 80090ea:	dd0f      	ble.n	800910c <_strtod_l+0x604>
 80090ec:	2b1f      	cmp	r3, #31
 80090ee:	dd55      	ble.n	800919c <_strtod_l+0x694>
 80090f0:	2b34      	cmp	r3, #52	@ 0x34
 80090f2:	bfde      	ittt	le
 80090f4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80090f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80090fc:	4093      	lslle	r3, r2
 80090fe:	f04f 0a00 	mov.w	sl, #0
 8009102:	bfcc      	ite	gt
 8009104:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009108:	ea03 0b01 	andle.w	fp, r3, r1
 800910c:	2200      	movs	r2, #0
 800910e:	2300      	movs	r3, #0
 8009110:	4650      	mov	r0, sl
 8009112:	4659      	mov	r1, fp
 8009114:	f7f7 fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009118:	2800      	cmp	r0, #0
 800911a:	d1a6      	bne.n	800906a <_strtod_l+0x562>
 800911c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009122:	9805      	ldr	r0, [sp, #20]
 8009124:	462b      	mov	r3, r5
 8009126:	463a      	mov	r2, r7
 8009128:	f002 fa88 	bl	800b63c <__s2b>
 800912c:	900a      	str	r0, [sp, #40]	@ 0x28
 800912e:	2800      	cmp	r0, #0
 8009130:	f43f af05 	beq.w	8008f3e <_strtod_l+0x436>
 8009134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009136:	2a00      	cmp	r2, #0
 8009138:	eba9 0308 	sub.w	r3, r9, r8
 800913c:	bfa8      	it	ge
 800913e:	2300      	movge	r3, #0
 8009140:	9312      	str	r3, [sp, #72]	@ 0x48
 8009142:	2400      	movs	r4, #0
 8009144:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009148:	9316      	str	r3, [sp, #88]	@ 0x58
 800914a:	46a0      	mov	r8, r4
 800914c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800914e:	9805      	ldr	r0, [sp, #20]
 8009150:	6859      	ldr	r1, [r3, #4]
 8009152:	f002 f9cb 	bl	800b4ec <_Balloc>
 8009156:	4681      	mov	r9, r0
 8009158:	2800      	cmp	r0, #0
 800915a:	f43f aef4 	beq.w	8008f46 <_strtod_l+0x43e>
 800915e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	3202      	adds	r2, #2
 8009164:	f103 010c 	add.w	r1, r3, #12
 8009168:	0092      	lsls	r2, r2, #2
 800916a:	300c      	adds	r0, #12
 800916c:	f000 fc0b 	bl	8009986 <memcpy>
 8009170:	ec4b ab10 	vmov	d0, sl, fp
 8009174:	9805      	ldr	r0, [sp, #20]
 8009176:	aa1c      	add	r2, sp, #112	@ 0x70
 8009178:	a91b      	add	r1, sp, #108	@ 0x6c
 800917a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800917e:	f002 fd99 	bl	800bcb4 <__d2b>
 8009182:	901a      	str	r0, [sp, #104]	@ 0x68
 8009184:	2800      	cmp	r0, #0
 8009186:	f43f aede 	beq.w	8008f46 <_strtod_l+0x43e>
 800918a:	9805      	ldr	r0, [sp, #20]
 800918c:	2101      	movs	r1, #1
 800918e:	f002 faeb 	bl	800b768 <__i2b>
 8009192:	4680      	mov	r8, r0
 8009194:	b948      	cbnz	r0, 80091aa <_strtod_l+0x6a2>
 8009196:	f04f 0800 	mov.w	r8, #0
 800919a:	e6d4      	b.n	8008f46 <_strtod_l+0x43e>
 800919c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	ea03 0a0a 	and.w	sl, r3, sl
 80091a8:	e7b0      	b.n	800910c <_strtod_l+0x604>
 80091aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80091ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	bfab      	itete	ge
 80091b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80091b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80091b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80091b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80091ba:	bfac      	ite	ge
 80091bc:	18ef      	addge	r7, r5, r3
 80091be:	1b5e      	sublt	r6, r3, r5
 80091c0:	9b08      	ldr	r3, [sp, #32]
 80091c2:	1aed      	subs	r5, r5, r3
 80091c4:	4415      	add	r5, r2
 80091c6:	4b66      	ldr	r3, [pc, #408]	@ (8009360 <_strtod_l+0x858>)
 80091c8:	3d01      	subs	r5, #1
 80091ca:	429d      	cmp	r5, r3
 80091cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80091d0:	da50      	bge.n	8009274 <_strtod_l+0x76c>
 80091d2:	1b5b      	subs	r3, r3, r5
 80091d4:	2b1f      	cmp	r3, #31
 80091d6:	eba2 0203 	sub.w	r2, r2, r3
 80091da:	f04f 0101 	mov.w	r1, #1
 80091de:	dc3d      	bgt.n	800925c <_strtod_l+0x754>
 80091e0:	fa01 f303 	lsl.w	r3, r1, r3
 80091e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091e6:	2300      	movs	r3, #0
 80091e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80091ea:	18bd      	adds	r5, r7, r2
 80091ec:	9b08      	ldr	r3, [sp, #32]
 80091ee:	42af      	cmp	r7, r5
 80091f0:	4416      	add	r6, r2
 80091f2:	441e      	add	r6, r3
 80091f4:	463b      	mov	r3, r7
 80091f6:	bfa8      	it	ge
 80091f8:	462b      	movge	r3, r5
 80091fa:	42b3      	cmp	r3, r6
 80091fc:	bfa8      	it	ge
 80091fe:	4633      	movge	r3, r6
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfc2      	ittt	gt
 8009204:	1aed      	subgt	r5, r5, r3
 8009206:	1af6      	subgt	r6, r6, r3
 8009208:	1aff      	subgt	r7, r7, r3
 800920a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800920c:	2b00      	cmp	r3, #0
 800920e:	dd16      	ble.n	800923e <_strtod_l+0x736>
 8009210:	4641      	mov	r1, r8
 8009212:	9805      	ldr	r0, [sp, #20]
 8009214:	461a      	mov	r2, r3
 8009216:	f002 fb67 	bl	800b8e8 <__pow5mult>
 800921a:	4680      	mov	r8, r0
 800921c:	2800      	cmp	r0, #0
 800921e:	d0ba      	beq.n	8009196 <_strtod_l+0x68e>
 8009220:	4601      	mov	r1, r0
 8009222:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009224:	9805      	ldr	r0, [sp, #20]
 8009226:	f002 fab5 	bl	800b794 <__multiply>
 800922a:	900e      	str	r0, [sp, #56]	@ 0x38
 800922c:	2800      	cmp	r0, #0
 800922e:	f43f ae8a 	beq.w	8008f46 <_strtod_l+0x43e>
 8009232:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009234:	9805      	ldr	r0, [sp, #20]
 8009236:	f002 f999 	bl	800b56c <_Bfree>
 800923a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800923c:	931a      	str	r3, [sp, #104]	@ 0x68
 800923e:	2d00      	cmp	r5, #0
 8009240:	dc1d      	bgt.n	800927e <_strtod_l+0x776>
 8009242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd23      	ble.n	8009290 <_strtod_l+0x788>
 8009248:	4649      	mov	r1, r9
 800924a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800924c:	9805      	ldr	r0, [sp, #20]
 800924e:	f002 fb4b 	bl	800b8e8 <__pow5mult>
 8009252:	4681      	mov	r9, r0
 8009254:	b9e0      	cbnz	r0, 8009290 <_strtod_l+0x788>
 8009256:	f04f 0900 	mov.w	r9, #0
 800925a:	e674      	b.n	8008f46 <_strtod_l+0x43e>
 800925c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009260:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009264:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009268:	35e2      	adds	r5, #226	@ 0xe2
 800926a:	fa01 f305 	lsl.w	r3, r1, r5
 800926e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009270:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009272:	e7ba      	b.n	80091ea <_strtod_l+0x6e2>
 8009274:	2300      	movs	r3, #0
 8009276:	9310      	str	r3, [sp, #64]	@ 0x40
 8009278:	2301      	movs	r3, #1
 800927a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800927c:	e7b5      	b.n	80091ea <_strtod_l+0x6e2>
 800927e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009280:	9805      	ldr	r0, [sp, #20]
 8009282:	462a      	mov	r2, r5
 8009284:	f002 fb8a 	bl	800b99c <__lshift>
 8009288:	901a      	str	r0, [sp, #104]	@ 0x68
 800928a:	2800      	cmp	r0, #0
 800928c:	d1d9      	bne.n	8009242 <_strtod_l+0x73a>
 800928e:	e65a      	b.n	8008f46 <_strtod_l+0x43e>
 8009290:	2e00      	cmp	r6, #0
 8009292:	dd07      	ble.n	80092a4 <_strtod_l+0x79c>
 8009294:	4649      	mov	r1, r9
 8009296:	9805      	ldr	r0, [sp, #20]
 8009298:	4632      	mov	r2, r6
 800929a:	f002 fb7f 	bl	800b99c <__lshift>
 800929e:	4681      	mov	r9, r0
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d0d8      	beq.n	8009256 <_strtod_l+0x74e>
 80092a4:	2f00      	cmp	r7, #0
 80092a6:	dd08      	ble.n	80092ba <_strtod_l+0x7b2>
 80092a8:	4641      	mov	r1, r8
 80092aa:	9805      	ldr	r0, [sp, #20]
 80092ac:	463a      	mov	r2, r7
 80092ae:	f002 fb75 	bl	800b99c <__lshift>
 80092b2:	4680      	mov	r8, r0
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f43f ae46 	beq.w	8008f46 <_strtod_l+0x43e>
 80092ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092bc:	9805      	ldr	r0, [sp, #20]
 80092be:	464a      	mov	r2, r9
 80092c0:	f002 fbf4 	bl	800baac <__mdiff>
 80092c4:	4604      	mov	r4, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f ae3d 	beq.w	8008f46 <_strtod_l+0x43e>
 80092cc:	68c3      	ldr	r3, [r0, #12]
 80092ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092d0:	2300      	movs	r3, #0
 80092d2:	60c3      	str	r3, [r0, #12]
 80092d4:	4641      	mov	r1, r8
 80092d6:	f002 fbcd 	bl	800ba74 <__mcmp>
 80092da:	2800      	cmp	r0, #0
 80092dc:	da46      	bge.n	800936c <_strtod_l+0x864>
 80092de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e0:	ea53 030a 	orrs.w	r3, r3, sl
 80092e4:	d16c      	bne.n	80093c0 <_strtod_l+0x8b8>
 80092e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d168      	bne.n	80093c0 <_strtod_l+0x8b8>
 80092ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092f2:	0d1b      	lsrs	r3, r3, #20
 80092f4:	051b      	lsls	r3, r3, #20
 80092f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092fa:	d961      	bls.n	80093c0 <_strtod_l+0x8b8>
 80092fc:	6963      	ldr	r3, [r4, #20]
 80092fe:	b913      	cbnz	r3, 8009306 <_strtod_l+0x7fe>
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	2b01      	cmp	r3, #1
 8009304:	dd5c      	ble.n	80093c0 <_strtod_l+0x8b8>
 8009306:	4621      	mov	r1, r4
 8009308:	2201      	movs	r2, #1
 800930a:	9805      	ldr	r0, [sp, #20]
 800930c:	f002 fb46 	bl	800b99c <__lshift>
 8009310:	4641      	mov	r1, r8
 8009312:	4604      	mov	r4, r0
 8009314:	f002 fbae 	bl	800ba74 <__mcmp>
 8009318:	2800      	cmp	r0, #0
 800931a:	dd51      	ble.n	80093c0 <_strtod_l+0x8b8>
 800931c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009320:	9a08      	ldr	r2, [sp, #32]
 8009322:	0d1b      	lsrs	r3, r3, #20
 8009324:	051b      	lsls	r3, r3, #20
 8009326:	2a00      	cmp	r2, #0
 8009328:	d06b      	beq.n	8009402 <_strtod_l+0x8fa>
 800932a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800932e:	d868      	bhi.n	8009402 <_strtod_l+0x8fa>
 8009330:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009334:	f67f ae9d 	bls.w	8009072 <_strtod_l+0x56a>
 8009338:	4b0a      	ldr	r3, [pc, #40]	@ (8009364 <_strtod_l+0x85c>)
 800933a:	4650      	mov	r0, sl
 800933c:	4659      	mov	r1, fp
 800933e:	2200      	movs	r2, #0
 8009340:	f7f7 f95a 	bl	80005f8 <__aeabi_dmul>
 8009344:	4b08      	ldr	r3, [pc, #32]	@ (8009368 <_strtod_l+0x860>)
 8009346:	400b      	ands	r3, r1
 8009348:	4682      	mov	sl, r0
 800934a:	468b      	mov	fp, r1
 800934c:	2b00      	cmp	r3, #0
 800934e:	f47f ae05 	bne.w	8008f5c <_strtod_l+0x454>
 8009352:	9a05      	ldr	r2, [sp, #20]
 8009354:	2322      	movs	r3, #34	@ 0x22
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	e600      	b.n	8008f5c <_strtod_l+0x454>
 800935a:	bf00      	nop
 800935c:	0800c658 	.word	0x0800c658
 8009360:	fffffc02 	.word	0xfffffc02
 8009364:	39500000 	.word	0x39500000
 8009368:	7ff00000 	.word	0x7ff00000
 800936c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009370:	d165      	bne.n	800943e <_strtod_l+0x936>
 8009372:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009378:	b35a      	cbz	r2, 80093d2 <_strtod_l+0x8ca>
 800937a:	4a9f      	ldr	r2, [pc, #636]	@ (80095f8 <_strtod_l+0xaf0>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d12b      	bne.n	80093d8 <_strtod_l+0x8d0>
 8009380:	9b08      	ldr	r3, [sp, #32]
 8009382:	4651      	mov	r1, sl
 8009384:	b303      	cbz	r3, 80093c8 <_strtod_l+0x8c0>
 8009386:	4b9d      	ldr	r3, [pc, #628]	@ (80095fc <_strtod_l+0xaf4>)
 8009388:	465a      	mov	r2, fp
 800938a:	4013      	ands	r3, r2
 800938c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009390:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009394:	d81b      	bhi.n	80093ce <_strtod_l+0x8c6>
 8009396:	0d1b      	lsrs	r3, r3, #20
 8009398:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	4299      	cmp	r1, r3
 80093a2:	d119      	bne.n	80093d8 <_strtod_l+0x8d0>
 80093a4:	4b96      	ldr	r3, [pc, #600]	@ (8009600 <_strtod_l+0xaf8>)
 80093a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d102      	bne.n	80093b2 <_strtod_l+0x8aa>
 80093ac:	3101      	adds	r1, #1
 80093ae:	f43f adca 	beq.w	8008f46 <_strtod_l+0x43e>
 80093b2:	4b92      	ldr	r3, [pc, #584]	@ (80095fc <_strtod_l+0xaf4>)
 80093b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093b6:	401a      	ands	r2, r3
 80093b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80093bc:	f04f 0a00 	mov.w	sl, #0
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1b8      	bne.n	8009338 <_strtod_l+0x830>
 80093c6:	e5c9      	b.n	8008f5c <_strtod_l+0x454>
 80093c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093cc:	e7e8      	b.n	80093a0 <_strtod_l+0x898>
 80093ce:	4613      	mov	r3, r2
 80093d0:	e7e6      	b.n	80093a0 <_strtod_l+0x898>
 80093d2:	ea53 030a 	orrs.w	r3, r3, sl
 80093d6:	d0a1      	beq.n	800931c <_strtod_l+0x814>
 80093d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093da:	b1db      	cbz	r3, 8009414 <_strtod_l+0x90c>
 80093dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093de:	4213      	tst	r3, r2
 80093e0:	d0ee      	beq.n	80093c0 <_strtod_l+0x8b8>
 80093e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093e4:	9a08      	ldr	r2, [sp, #32]
 80093e6:	4650      	mov	r0, sl
 80093e8:	4659      	mov	r1, fp
 80093ea:	b1bb      	cbz	r3, 800941c <_strtod_l+0x914>
 80093ec:	f7ff fb6c 	bl	8008ac8 <sulp>
 80093f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093f4:	ec53 2b10 	vmov	r2, r3, d0
 80093f8:	f7f6 ff48 	bl	800028c <__adddf3>
 80093fc:	4682      	mov	sl, r0
 80093fe:	468b      	mov	fp, r1
 8009400:	e7de      	b.n	80093c0 <_strtod_l+0x8b8>
 8009402:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009406:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800940a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800940e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009412:	e7d5      	b.n	80093c0 <_strtod_l+0x8b8>
 8009414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009416:	ea13 0f0a 	tst.w	r3, sl
 800941a:	e7e1      	b.n	80093e0 <_strtod_l+0x8d8>
 800941c:	f7ff fb54 	bl	8008ac8 <sulp>
 8009420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009424:	ec53 2b10 	vmov	r2, r3, d0
 8009428:	f7f6 ff2e 	bl	8000288 <__aeabi_dsub>
 800942c:	2200      	movs	r2, #0
 800942e:	2300      	movs	r3, #0
 8009430:	4682      	mov	sl, r0
 8009432:	468b      	mov	fp, r1
 8009434:	f7f7 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009438:	2800      	cmp	r0, #0
 800943a:	d0c1      	beq.n	80093c0 <_strtod_l+0x8b8>
 800943c:	e619      	b.n	8009072 <_strtod_l+0x56a>
 800943e:	4641      	mov	r1, r8
 8009440:	4620      	mov	r0, r4
 8009442:	f002 fc8f 	bl	800bd64 <__ratio>
 8009446:	ec57 6b10 	vmov	r6, r7, d0
 800944a:	2200      	movs	r2, #0
 800944c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 fb4c 	bl	8000af0 <__aeabi_dcmple>
 8009458:	2800      	cmp	r0, #0
 800945a:	d06f      	beq.n	800953c <_strtod_l+0xa34>
 800945c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d17a      	bne.n	8009558 <_strtod_l+0xa50>
 8009462:	f1ba 0f00 	cmp.w	sl, #0
 8009466:	d158      	bne.n	800951a <_strtod_l+0xa12>
 8009468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800946a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800946e:	2b00      	cmp	r3, #0
 8009470:	d15a      	bne.n	8009528 <_strtod_l+0xa20>
 8009472:	4b64      	ldr	r3, [pc, #400]	@ (8009604 <_strtod_l+0xafc>)
 8009474:	2200      	movs	r2, #0
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	f7f7 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800947e:	2800      	cmp	r0, #0
 8009480:	d159      	bne.n	8009536 <_strtod_l+0xa2e>
 8009482:	4630      	mov	r0, r6
 8009484:	4639      	mov	r1, r7
 8009486:	4b60      	ldr	r3, [pc, #384]	@ (8009608 <_strtod_l+0xb00>)
 8009488:	2200      	movs	r2, #0
 800948a:	f7f7 f8b5 	bl	80005f8 <__aeabi_dmul>
 800948e:	4606      	mov	r6, r0
 8009490:	460f      	mov	r7, r1
 8009492:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009496:	9606      	str	r6, [sp, #24]
 8009498:	9307      	str	r3, [sp, #28]
 800949a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800949e:	4d57      	ldr	r5, [pc, #348]	@ (80095fc <_strtod_l+0xaf4>)
 80094a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80094a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094a6:	401d      	ands	r5, r3
 80094a8:	4b58      	ldr	r3, [pc, #352]	@ (800960c <_strtod_l+0xb04>)
 80094aa:	429d      	cmp	r5, r3
 80094ac:	f040 80b2 	bne.w	8009614 <_strtod_l+0xb0c>
 80094b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80094b6:	ec4b ab10 	vmov	d0, sl, fp
 80094ba:	f002 fb8b 	bl	800bbd4 <__ulp>
 80094be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094c2:	ec51 0b10 	vmov	r0, r1, d0
 80094c6:	f7f7 f897 	bl	80005f8 <__aeabi_dmul>
 80094ca:	4652      	mov	r2, sl
 80094cc:	465b      	mov	r3, fp
 80094ce:	f7f6 fedd 	bl	800028c <__adddf3>
 80094d2:	460b      	mov	r3, r1
 80094d4:	4949      	ldr	r1, [pc, #292]	@ (80095fc <_strtod_l+0xaf4>)
 80094d6:	4a4e      	ldr	r2, [pc, #312]	@ (8009610 <_strtod_l+0xb08>)
 80094d8:	4019      	ands	r1, r3
 80094da:	4291      	cmp	r1, r2
 80094dc:	4682      	mov	sl, r0
 80094de:	d942      	bls.n	8009566 <_strtod_l+0xa5e>
 80094e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094e2:	4b47      	ldr	r3, [pc, #284]	@ (8009600 <_strtod_l+0xaf8>)
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d103      	bne.n	80094f0 <_strtod_l+0x9e8>
 80094e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094ea:	3301      	adds	r3, #1
 80094ec:	f43f ad2b 	beq.w	8008f46 <_strtod_l+0x43e>
 80094f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009600 <_strtod_l+0xaf8>
 80094f4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80094f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094fa:	9805      	ldr	r0, [sp, #20]
 80094fc:	f002 f836 	bl	800b56c <_Bfree>
 8009500:	9805      	ldr	r0, [sp, #20]
 8009502:	4649      	mov	r1, r9
 8009504:	f002 f832 	bl	800b56c <_Bfree>
 8009508:	9805      	ldr	r0, [sp, #20]
 800950a:	4641      	mov	r1, r8
 800950c:	f002 f82e 	bl	800b56c <_Bfree>
 8009510:	9805      	ldr	r0, [sp, #20]
 8009512:	4621      	mov	r1, r4
 8009514:	f002 f82a 	bl	800b56c <_Bfree>
 8009518:	e618      	b.n	800914c <_strtod_l+0x644>
 800951a:	f1ba 0f01 	cmp.w	sl, #1
 800951e:	d103      	bne.n	8009528 <_strtod_l+0xa20>
 8009520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009522:	2b00      	cmp	r3, #0
 8009524:	f43f ada5 	beq.w	8009072 <_strtod_l+0x56a>
 8009528:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80095d8 <_strtod_l+0xad0>
 800952c:	4f35      	ldr	r7, [pc, #212]	@ (8009604 <_strtod_l+0xafc>)
 800952e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009532:	2600      	movs	r6, #0
 8009534:	e7b1      	b.n	800949a <_strtod_l+0x992>
 8009536:	4f34      	ldr	r7, [pc, #208]	@ (8009608 <_strtod_l+0xb00>)
 8009538:	2600      	movs	r6, #0
 800953a:	e7aa      	b.n	8009492 <_strtod_l+0x98a>
 800953c:	4b32      	ldr	r3, [pc, #200]	@ (8009608 <_strtod_l+0xb00>)
 800953e:	4630      	mov	r0, r6
 8009540:	4639      	mov	r1, r7
 8009542:	2200      	movs	r2, #0
 8009544:	f7f7 f858 	bl	80005f8 <__aeabi_dmul>
 8009548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d09f      	beq.n	8009492 <_strtod_l+0x98a>
 8009552:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009556:	e7a0      	b.n	800949a <_strtod_l+0x992>
 8009558:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80095e0 <_strtod_l+0xad8>
 800955c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009560:	ec57 6b17 	vmov	r6, r7, d7
 8009564:	e799      	b.n	800949a <_strtod_l+0x992>
 8009566:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800956a:	9b08      	ldr	r3, [sp, #32]
 800956c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1c1      	bne.n	80094f8 <_strtod_l+0x9f0>
 8009574:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009578:	0d1b      	lsrs	r3, r3, #20
 800957a:	051b      	lsls	r3, r3, #20
 800957c:	429d      	cmp	r5, r3
 800957e:	d1bb      	bne.n	80094f8 <_strtod_l+0x9f0>
 8009580:	4630      	mov	r0, r6
 8009582:	4639      	mov	r1, r7
 8009584:	f7f7 fb98 	bl	8000cb8 <__aeabi_d2lz>
 8009588:	f7f7 f808 	bl	800059c <__aeabi_l2d>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f7f6 fe78 	bl	8000288 <__aeabi_dsub>
 8009598:	460b      	mov	r3, r1
 800959a:	4602      	mov	r2, r0
 800959c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80095a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80095a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095a6:	ea46 060a 	orr.w	r6, r6, sl
 80095aa:	431e      	orrs	r6, r3
 80095ac:	d06f      	beq.n	800968e <_strtod_l+0xb86>
 80095ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80095e8 <_strtod_l+0xae0>)
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f7f7 fa92 	bl	8000adc <__aeabi_dcmplt>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	f47f accf 	bne.w	8008f5c <_strtod_l+0x454>
 80095be:	a30c      	add	r3, pc, #48	@ (adr r3, 80095f0 <_strtod_l+0xae8>)
 80095c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095c8:	f7f7 faa6 	bl	8000b18 <__aeabi_dcmpgt>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d093      	beq.n	80094f8 <_strtod_l+0x9f0>
 80095d0:	e4c4      	b.n	8008f5c <_strtod_l+0x454>
 80095d2:	bf00      	nop
 80095d4:	f3af 8000 	nop.w
 80095d8:	00000000 	.word	0x00000000
 80095dc:	bff00000 	.word	0xbff00000
 80095e0:	00000000 	.word	0x00000000
 80095e4:	3ff00000 	.word	0x3ff00000
 80095e8:	94a03595 	.word	0x94a03595
 80095ec:	3fdfffff 	.word	0x3fdfffff
 80095f0:	35afe535 	.word	0x35afe535
 80095f4:	3fe00000 	.word	0x3fe00000
 80095f8:	000fffff 	.word	0x000fffff
 80095fc:	7ff00000 	.word	0x7ff00000
 8009600:	7fefffff 	.word	0x7fefffff
 8009604:	3ff00000 	.word	0x3ff00000
 8009608:	3fe00000 	.word	0x3fe00000
 800960c:	7fe00000 	.word	0x7fe00000
 8009610:	7c9fffff 	.word	0x7c9fffff
 8009614:	9b08      	ldr	r3, [sp, #32]
 8009616:	b323      	cbz	r3, 8009662 <_strtod_l+0xb5a>
 8009618:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800961c:	d821      	bhi.n	8009662 <_strtod_l+0xb5a>
 800961e:	a328      	add	r3, pc, #160	@ (adr r3, 80096c0 <_strtod_l+0xbb8>)
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f7 fa62 	bl	8000af0 <__aeabi_dcmple>
 800962c:	b1a0      	cbz	r0, 8009658 <_strtod_l+0xb50>
 800962e:	4639      	mov	r1, r7
 8009630:	4630      	mov	r0, r6
 8009632:	f7f7 fab9 	bl	8000ba8 <__aeabi_d2uiz>
 8009636:	2801      	cmp	r0, #1
 8009638:	bf38      	it	cc
 800963a:	2001      	movcc	r0, #1
 800963c:	f7f6 ff62 	bl	8000504 <__aeabi_ui2d>
 8009640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009642:	4606      	mov	r6, r0
 8009644:	460f      	mov	r7, r1
 8009646:	b9fb      	cbnz	r3, 8009688 <_strtod_l+0xb80>
 8009648:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800964c:	9014      	str	r0, [sp, #80]	@ 0x50
 800964e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009650:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009654:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009658:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800965a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800965e:	1b5b      	subs	r3, r3, r5
 8009660:	9311      	str	r3, [sp, #68]	@ 0x44
 8009662:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009666:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800966a:	f002 fab3 	bl	800bbd4 <__ulp>
 800966e:	4650      	mov	r0, sl
 8009670:	ec53 2b10 	vmov	r2, r3, d0
 8009674:	4659      	mov	r1, fp
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800967e:	f7f6 fe05 	bl	800028c <__adddf3>
 8009682:	4682      	mov	sl, r0
 8009684:	468b      	mov	fp, r1
 8009686:	e770      	b.n	800956a <_strtod_l+0xa62>
 8009688:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800968c:	e7e0      	b.n	8009650 <_strtod_l+0xb48>
 800968e:	a30e      	add	r3, pc, #56	@ (adr r3, 80096c8 <_strtod_l+0xbc0>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f7 fa22 	bl	8000adc <__aeabi_dcmplt>
 8009698:	e798      	b.n	80095cc <_strtod_l+0xac4>
 800969a:	2300      	movs	r3, #0
 800969c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800969e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80096a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	f7ff ba6d 	b.w	8008b82 <_strtod_l+0x7a>
 80096a8:	2a65      	cmp	r2, #101	@ 0x65
 80096aa:	f43f ab66 	beq.w	8008d7a <_strtod_l+0x272>
 80096ae:	2a45      	cmp	r2, #69	@ 0x45
 80096b0:	f43f ab63 	beq.w	8008d7a <_strtod_l+0x272>
 80096b4:	2301      	movs	r3, #1
 80096b6:	f7ff bb9e 	b.w	8008df6 <_strtod_l+0x2ee>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	ffc00000 	.word	0xffc00000
 80096c4:	41dfffff 	.word	0x41dfffff
 80096c8:	94a03595 	.word	0x94a03595
 80096cc:	3fcfffff 	.word	0x3fcfffff

080096d0 <_strtod_r>:
 80096d0:	4b01      	ldr	r3, [pc, #4]	@ (80096d8 <_strtod_r+0x8>)
 80096d2:	f7ff ba19 	b.w	8008b08 <_strtod_l>
 80096d6:	bf00      	nop
 80096d8:	2000001c 	.word	0x2000001c

080096dc <_strtol_l.constprop.0>:
 80096dc:	2b24      	cmp	r3, #36	@ 0x24
 80096de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e2:	4686      	mov	lr, r0
 80096e4:	4690      	mov	r8, r2
 80096e6:	d801      	bhi.n	80096ec <_strtol_l.constprop.0+0x10>
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d106      	bne.n	80096fa <_strtol_l.constprop.0+0x1e>
 80096ec:	f000 f91e 	bl	800992c <__errno>
 80096f0:	2316      	movs	r3, #22
 80096f2:	6003      	str	r3, [r0, #0]
 80096f4:	2000      	movs	r0, #0
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fa:	4834      	ldr	r0, [pc, #208]	@ (80097cc <_strtol_l.constprop.0+0xf0>)
 80096fc:	460d      	mov	r5, r1
 80096fe:	462a      	mov	r2, r5
 8009700:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009704:	5d06      	ldrb	r6, [r0, r4]
 8009706:	f016 0608 	ands.w	r6, r6, #8
 800970a:	d1f8      	bne.n	80096fe <_strtol_l.constprop.0+0x22>
 800970c:	2c2d      	cmp	r4, #45	@ 0x2d
 800970e:	d12d      	bne.n	800976c <_strtol_l.constprop.0+0x90>
 8009710:	782c      	ldrb	r4, [r5, #0]
 8009712:	2601      	movs	r6, #1
 8009714:	1c95      	adds	r5, r2, #2
 8009716:	f033 0210 	bics.w	r2, r3, #16
 800971a:	d109      	bne.n	8009730 <_strtol_l.constprop.0+0x54>
 800971c:	2c30      	cmp	r4, #48	@ 0x30
 800971e:	d12a      	bne.n	8009776 <_strtol_l.constprop.0+0x9a>
 8009720:	782a      	ldrb	r2, [r5, #0]
 8009722:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009726:	2a58      	cmp	r2, #88	@ 0x58
 8009728:	d125      	bne.n	8009776 <_strtol_l.constprop.0+0x9a>
 800972a:	786c      	ldrb	r4, [r5, #1]
 800972c:	2310      	movs	r3, #16
 800972e:	3502      	adds	r5, #2
 8009730:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009734:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009738:	2200      	movs	r2, #0
 800973a:	fbbc f9f3 	udiv	r9, ip, r3
 800973e:	4610      	mov	r0, r2
 8009740:	fb03 ca19 	mls	sl, r3, r9, ip
 8009744:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009748:	2f09      	cmp	r7, #9
 800974a:	d81b      	bhi.n	8009784 <_strtol_l.constprop.0+0xa8>
 800974c:	463c      	mov	r4, r7
 800974e:	42a3      	cmp	r3, r4
 8009750:	dd27      	ble.n	80097a2 <_strtol_l.constprop.0+0xc6>
 8009752:	1c57      	adds	r7, r2, #1
 8009754:	d007      	beq.n	8009766 <_strtol_l.constprop.0+0x8a>
 8009756:	4581      	cmp	r9, r0
 8009758:	d320      	bcc.n	800979c <_strtol_l.constprop.0+0xc0>
 800975a:	d101      	bne.n	8009760 <_strtol_l.constprop.0+0x84>
 800975c:	45a2      	cmp	sl, r4
 800975e:	db1d      	blt.n	800979c <_strtol_l.constprop.0+0xc0>
 8009760:	fb00 4003 	mla	r0, r0, r3, r4
 8009764:	2201      	movs	r2, #1
 8009766:	f815 4b01 	ldrb.w	r4, [r5], #1
 800976a:	e7eb      	b.n	8009744 <_strtol_l.constprop.0+0x68>
 800976c:	2c2b      	cmp	r4, #43	@ 0x2b
 800976e:	bf04      	itt	eq
 8009770:	782c      	ldrbeq	r4, [r5, #0]
 8009772:	1c95      	addeq	r5, r2, #2
 8009774:	e7cf      	b.n	8009716 <_strtol_l.constprop.0+0x3a>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1da      	bne.n	8009730 <_strtol_l.constprop.0+0x54>
 800977a:	2c30      	cmp	r4, #48	@ 0x30
 800977c:	bf0c      	ite	eq
 800977e:	2308      	moveq	r3, #8
 8009780:	230a      	movne	r3, #10
 8009782:	e7d5      	b.n	8009730 <_strtol_l.constprop.0+0x54>
 8009784:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009788:	2f19      	cmp	r7, #25
 800978a:	d801      	bhi.n	8009790 <_strtol_l.constprop.0+0xb4>
 800978c:	3c37      	subs	r4, #55	@ 0x37
 800978e:	e7de      	b.n	800974e <_strtol_l.constprop.0+0x72>
 8009790:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009794:	2f19      	cmp	r7, #25
 8009796:	d804      	bhi.n	80097a2 <_strtol_l.constprop.0+0xc6>
 8009798:	3c57      	subs	r4, #87	@ 0x57
 800979a:	e7d8      	b.n	800974e <_strtol_l.constprop.0+0x72>
 800979c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097a0:	e7e1      	b.n	8009766 <_strtol_l.constprop.0+0x8a>
 80097a2:	1c53      	adds	r3, r2, #1
 80097a4:	d108      	bne.n	80097b8 <_strtol_l.constprop.0+0xdc>
 80097a6:	2322      	movs	r3, #34	@ 0x22
 80097a8:	f8ce 3000 	str.w	r3, [lr]
 80097ac:	4660      	mov	r0, ip
 80097ae:	f1b8 0f00 	cmp.w	r8, #0
 80097b2:	d0a0      	beq.n	80096f6 <_strtol_l.constprop.0+0x1a>
 80097b4:	1e69      	subs	r1, r5, #1
 80097b6:	e006      	b.n	80097c6 <_strtol_l.constprop.0+0xea>
 80097b8:	b106      	cbz	r6, 80097bc <_strtol_l.constprop.0+0xe0>
 80097ba:	4240      	negs	r0, r0
 80097bc:	f1b8 0f00 	cmp.w	r8, #0
 80097c0:	d099      	beq.n	80096f6 <_strtol_l.constprop.0+0x1a>
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d1f6      	bne.n	80097b4 <_strtol_l.constprop.0+0xd8>
 80097c6:	f8c8 1000 	str.w	r1, [r8]
 80097ca:	e794      	b.n	80096f6 <_strtol_l.constprop.0+0x1a>
 80097cc:	0800c689 	.word	0x0800c689

080097d0 <_strtol_r>:
 80097d0:	f7ff bf84 	b.w	80096dc <_strtol_l.constprop.0>

080097d4 <_fwalk_sglue>:
 80097d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d8:	4607      	mov	r7, r0
 80097da:	4688      	mov	r8, r1
 80097dc:	4614      	mov	r4, r2
 80097de:	2600      	movs	r6, #0
 80097e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097e4:	f1b9 0901 	subs.w	r9, r9, #1
 80097e8:	d505      	bpl.n	80097f6 <_fwalk_sglue+0x22>
 80097ea:	6824      	ldr	r4, [r4, #0]
 80097ec:	2c00      	cmp	r4, #0
 80097ee:	d1f7      	bne.n	80097e0 <_fwalk_sglue+0xc>
 80097f0:	4630      	mov	r0, r6
 80097f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f6:	89ab      	ldrh	r3, [r5, #12]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d907      	bls.n	800980c <_fwalk_sglue+0x38>
 80097fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009800:	3301      	adds	r3, #1
 8009802:	d003      	beq.n	800980c <_fwalk_sglue+0x38>
 8009804:	4629      	mov	r1, r5
 8009806:	4638      	mov	r0, r7
 8009808:	47c0      	blx	r8
 800980a:	4306      	orrs	r6, r0
 800980c:	3568      	adds	r5, #104	@ 0x68
 800980e:	e7e9      	b.n	80097e4 <_fwalk_sglue+0x10>

08009810 <iprintf>:
 8009810:	b40f      	push	{r0, r1, r2, r3}
 8009812:	b507      	push	{r0, r1, r2, lr}
 8009814:	4906      	ldr	r1, [pc, #24]	@ (8009830 <iprintf+0x20>)
 8009816:	ab04      	add	r3, sp, #16
 8009818:	6808      	ldr	r0, [r1, #0]
 800981a:	f853 2b04 	ldr.w	r2, [r3], #4
 800981e:	6881      	ldr	r1, [r0, #8]
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	f001 fbd7 	bl	800afd4 <_vfiprintf_r>
 8009826:	b003      	add	sp, #12
 8009828:	f85d eb04 	ldr.w	lr, [sp], #4
 800982c:	b004      	add	sp, #16
 800982e:	4770      	bx	lr
 8009830:	20000188 	.word	0x20000188

08009834 <_puts_r>:
 8009834:	6a03      	ldr	r3, [r0, #32]
 8009836:	b570      	push	{r4, r5, r6, lr}
 8009838:	6884      	ldr	r4, [r0, #8]
 800983a:	4605      	mov	r5, r0
 800983c:	460e      	mov	r6, r1
 800983e:	b90b      	cbnz	r3, 8009844 <_puts_r+0x10>
 8009840:	f7ff f92a 	bl	8008a98 <__sinit>
 8009844:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009846:	07db      	lsls	r3, r3, #31
 8009848:	d405      	bmi.n	8009856 <_puts_r+0x22>
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	0598      	lsls	r0, r3, #22
 800984e:	d402      	bmi.n	8009856 <_puts_r+0x22>
 8009850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009852:	f000 f896 	bl	8009982 <__retarget_lock_acquire_recursive>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	0719      	lsls	r1, r3, #28
 800985a:	d502      	bpl.n	8009862 <_puts_r+0x2e>
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d135      	bne.n	80098ce <_puts_r+0x9a>
 8009862:	4621      	mov	r1, r4
 8009864:	4628      	mov	r0, r5
 8009866:	f002 fba3 	bl	800bfb0 <__swsetup_r>
 800986a:	b380      	cbz	r0, 80098ce <_puts_r+0x9a>
 800986c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009872:	07da      	lsls	r2, r3, #31
 8009874:	d405      	bmi.n	8009882 <_puts_r+0x4e>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	059b      	lsls	r3, r3, #22
 800987a:	d402      	bmi.n	8009882 <_puts_r+0x4e>
 800987c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800987e:	f000 f881 	bl	8009984 <__retarget_lock_release_recursive>
 8009882:	4628      	mov	r0, r5
 8009884:	bd70      	pop	{r4, r5, r6, pc}
 8009886:	2b00      	cmp	r3, #0
 8009888:	da04      	bge.n	8009894 <_puts_r+0x60>
 800988a:	69a2      	ldr	r2, [r4, #24]
 800988c:	429a      	cmp	r2, r3
 800988e:	dc17      	bgt.n	80098c0 <_puts_r+0x8c>
 8009890:	290a      	cmp	r1, #10
 8009892:	d015      	beq.n	80098c0 <_puts_r+0x8c>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	6022      	str	r2, [r4, #0]
 800989a:	7019      	strb	r1, [r3, #0]
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098a2:	3b01      	subs	r3, #1
 80098a4:	60a3      	str	r3, [r4, #8]
 80098a6:	2900      	cmp	r1, #0
 80098a8:	d1ed      	bne.n	8009886 <_puts_r+0x52>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da11      	bge.n	80098d2 <_puts_r+0x9e>
 80098ae:	4622      	mov	r2, r4
 80098b0:	210a      	movs	r1, #10
 80098b2:	4628      	mov	r0, r5
 80098b4:	f002 fb3d 	bl	800bf32 <__swbuf_r>
 80098b8:	3001      	adds	r0, #1
 80098ba:	d0d7      	beq.n	800986c <_puts_r+0x38>
 80098bc:	250a      	movs	r5, #10
 80098be:	e7d7      	b.n	8009870 <_puts_r+0x3c>
 80098c0:	4622      	mov	r2, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	f002 fb35 	bl	800bf32 <__swbuf_r>
 80098c8:	3001      	adds	r0, #1
 80098ca:	d1e7      	bne.n	800989c <_puts_r+0x68>
 80098cc:	e7ce      	b.n	800986c <_puts_r+0x38>
 80098ce:	3e01      	subs	r6, #1
 80098d0:	e7e4      	b.n	800989c <_puts_r+0x68>
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	6022      	str	r2, [r4, #0]
 80098d8:	220a      	movs	r2, #10
 80098da:	701a      	strb	r2, [r3, #0]
 80098dc:	e7ee      	b.n	80098bc <_puts_r+0x88>
	...

080098e0 <puts>:
 80098e0:	4b02      	ldr	r3, [pc, #8]	@ (80098ec <puts+0xc>)
 80098e2:	4601      	mov	r1, r0
 80098e4:	6818      	ldr	r0, [r3, #0]
 80098e6:	f7ff bfa5 	b.w	8009834 <_puts_r>
 80098ea:	bf00      	nop
 80098ec:	20000188 	.word	0x20000188

080098f0 <strncmp>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	b16a      	cbz	r2, 8009910 <strncmp+0x20>
 80098f4:	3901      	subs	r1, #1
 80098f6:	1884      	adds	r4, r0, r2
 80098f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009900:	429a      	cmp	r2, r3
 8009902:	d103      	bne.n	800990c <strncmp+0x1c>
 8009904:	42a0      	cmp	r0, r4
 8009906:	d001      	beq.n	800990c <strncmp+0x1c>
 8009908:	2a00      	cmp	r2, #0
 800990a:	d1f5      	bne.n	80098f8 <strncmp+0x8>
 800990c:	1ad0      	subs	r0, r2, r3
 800990e:	bd10      	pop	{r4, pc}
 8009910:	4610      	mov	r0, r2
 8009912:	e7fc      	b.n	800990e <strncmp+0x1e>

08009914 <memset>:
 8009914:	4402      	add	r2, r0
 8009916:	4603      	mov	r3, r0
 8009918:	4293      	cmp	r3, r2
 800991a:	d100      	bne.n	800991e <memset+0xa>
 800991c:	4770      	bx	lr
 800991e:	f803 1b01 	strb.w	r1, [r3], #1
 8009922:	e7f9      	b.n	8009918 <memset+0x4>

08009924 <_localeconv_r>:
 8009924:	4800      	ldr	r0, [pc, #0]	@ (8009928 <_localeconv_r+0x4>)
 8009926:	4770      	bx	lr
 8009928:	2000010c 	.word	0x2000010c

0800992c <__errno>:
 800992c:	4b01      	ldr	r3, [pc, #4]	@ (8009934 <__errno+0x8>)
 800992e:	6818      	ldr	r0, [r3, #0]
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	20000188 	.word	0x20000188

08009938 <__libc_init_array>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	4d0d      	ldr	r5, [pc, #52]	@ (8009970 <__libc_init_array+0x38>)
 800993c:	4c0d      	ldr	r4, [pc, #52]	@ (8009974 <__libc_init_array+0x3c>)
 800993e:	1b64      	subs	r4, r4, r5
 8009940:	10a4      	asrs	r4, r4, #2
 8009942:	2600      	movs	r6, #0
 8009944:	42a6      	cmp	r6, r4
 8009946:	d109      	bne.n	800995c <__libc_init_array+0x24>
 8009948:	4d0b      	ldr	r5, [pc, #44]	@ (8009978 <__libc_init_array+0x40>)
 800994a:	4c0c      	ldr	r4, [pc, #48]	@ (800997c <__libc_init_array+0x44>)
 800994c:	f002 fd6a 	bl	800c424 <_init>
 8009950:	1b64      	subs	r4, r4, r5
 8009952:	10a4      	asrs	r4, r4, #2
 8009954:	2600      	movs	r6, #0
 8009956:	42a6      	cmp	r6, r4
 8009958:	d105      	bne.n	8009966 <__libc_init_array+0x2e>
 800995a:	bd70      	pop	{r4, r5, r6, pc}
 800995c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009960:	4798      	blx	r3
 8009962:	3601      	adds	r6, #1
 8009964:	e7ee      	b.n	8009944 <__libc_init_array+0xc>
 8009966:	f855 3b04 	ldr.w	r3, [r5], #4
 800996a:	4798      	blx	r3
 800996c:	3601      	adds	r6, #1
 800996e:	e7f2      	b.n	8009956 <__libc_init_array+0x1e>
 8009970:	0800ca24 	.word	0x0800ca24
 8009974:	0800ca24 	.word	0x0800ca24
 8009978:	0800ca24 	.word	0x0800ca24
 800997c:	0800ca28 	.word	0x0800ca28

08009980 <__retarget_lock_init_recursive>:
 8009980:	4770      	bx	lr

08009982 <__retarget_lock_acquire_recursive>:
 8009982:	4770      	bx	lr

08009984 <__retarget_lock_release_recursive>:
 8009984:	4770      	bx	lr

08009986 <memcpy>:
 8009986:	440a      	add	r2, r1
 8009988:	4291      	cmp	r1, r2
 800998a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800998e:	d100      	bne.n	8009992 <memcpy+0xc>
 8009990:	4770      	bx	lr
 8009992:	b510      	push	{r4, lr}
 8009994:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800999c:	4291      	cmp	r1, r2
 800999e:	d1f9      	bne.n	8009994 <memcpy+0xe>
 80099a0:	bd10      	pop	{r4, pc}
 80099a2:	0000      	movs	r0, r0
 80099a4:	0000      	movs	r0, r0
	...

080099a8 <nan>:
 80099a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80099b0 <nan+0x8>
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	00000000 	.word	0x00000000
 80099b4:	7ff80000 	.word	0x7ff80000

080099b8 <nanf>:
 80099b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80099c0 <nanf+0x8>
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	7fc00000 	.word	0x7fc00000

080099c4 <quorem>:
 80099c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	6903      	ldr	r3, [r0, #16]
 80099ca:	690c      	ldr	r4, [r1, #16]
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	4607      	mov	r7, r0
 80099d0:	db7e      	blt.n	8009ad0 <quorem+0x10c>
 80099d2:	3c01      	subs	r4, #1
 80099d4:	f101 0814 	add.w	r8, r1, #20
 80099d8:	00a3      	lsls	r3, r4, #2
 80099da:	f100 0514 	add.w	r5, r0, #20
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099ee:	3301      	adds	r3, #1
 80099f0:	429a      	cmp	r2, r3
 80099f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80099fa:	d32e      	bcc.n	8009a5a <quorem+0x96>
 80099fc:	f04f 0a00 	mov.w	sl, #0
 8009a00:	46c4      	mov	ip, r8
 8009a02:	46ae      	mov	lr, r5
 8009a04:	46d3      	mov	fp, sl
 8009a06:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a0a:	b298      	uxth	r0, r3
 8009a0c:	fb06 a000 	mla	r0, r6, r0, sl
 8009a10:	0c02      	lsrs	r2, r0, #16
 8009a12:	0c1b      	lsrs	r3, r3, #16
 8009a14:	fb06 2303 	mla	r3, r6, r3, r2
 8009a18:	f8de 2000 	ldr.w	r2, [lr]
 8009a1c:	b280      	uxth	r0, r0
 8009a1e:	b292      	uxth	r2, r2
 8009a20:	1a12      	subs	r2, r2, r0
 8009a22:	445a      	add	r2, fp
 8009a24:	f8de 0000 	ldr.w	r0, [lr]
 8009a28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009a32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009a36:	b292      	uxth	r2, r2
 8009a38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009a3c:	45e1      	cmp	r9, ip
 8009a3e:	f84e 2b04 	str.w	r2, [lr], #4
 8009a42:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009a46:	d2de      	bcs.n	8009a06 <quorem+0x42>
 8009a48:	9b00      	ldr	r3, [sp, #0]
 8009a4a:	58eb      	ldr	r3, [r5, r3]
 8009a4c:	b92b      	cbnz	r3, 8009a5a <quorem+0x96>
 8009a4e:	9b01      	ldr	r3, [sp, #4]
 8009a50:	3b04      	subs	r3, #4
 8009a52:	429d      	cmp	r5, r3
 8009a54:	461a      	mov	r2, r3
 8009a56:	d32f      	bcc.n	8009ab8 <quorem+0xf4>
 8009a58:	613c      	str	r4, [r7, #16]
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f002 f80a 	bl	800ba74 <__mcmp>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	db25      	blt.n	8009ab0 <quorem+0xec>
 8009a64:	4629      	mov	r1, r5
 8009a66:	2000      	movs	r0, #0
 8009a68:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a6c:	f8d1 c000 	ldr.w	ip, [r1]
 8009a70:	fa1f fe82 	uxth.w	lr, r2
 8009a74:	fa1f f38c 	uxth.w	r3, ip
 8009a78:	eba3 030e 	sub.w	r3, r3, lr
 8009a7c:	4403      	add	r3, r0
 8009a7e:	0c12      	lsrs	r2, r2, #16
 8009a80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009a84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a8e:	45c1      	cmp	r9, r8
 8009a90:	f841 3b04 	str.w	r3, [r1], #4
 8009a94:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009a98:	d2e6      	bcs.n	8009a68 <quorem+0xa4>
 8009a9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009aa2:	b922      	cbnz	r2, 8009aae <quorem+0xea>
 8009aa4:	3b04      	subs	r3, #4
 8009aa6:	429d      	cmp	r5, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	d30b      	bcc.n	8009ac4 <quorem+0x100>
 8009aac:	613c      	str	r4, [r7, #16]
 8009aae:	3601      	adds	r6, #1
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	b003      	add	sp, #12
 8009ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab8:	6812      	ldr	r2, [r2, #0]
 8009aba:	3b04      	subs	r3, #4
 8009abc:	2a00      	cmp	r2, #0
 8009abe:	d1cb      	bne.n	8009a58 <quorem+0x94>
 8009ac0:	3c01      	subs	r4, #1
 8009ac2:	e7c6      	b.n	8009a52 <quorem+0x8e>
 8009ac4:	6812      	ldr	r2, [r2, #0]
 8009ac6:	3b04      	subs	r3, #4
 8009ac8:	2a00      	cmp	r2, #0
 8009aca:	d1ef      	bne.n	8009aac <quorem+0xe8>
 8009acc:	3c01      	subs	r4, #1
 8009ace:	e7ea      	b.n	8009aa6 <quorem+0xe2>
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e7ee      	b.n	8009ab2 <quorem+0xee>
 8009ad4:	0000      	movs	r0, r0
	...

08009ad8 <_dtoa_r>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	69c7      	ldr	r7, [r0, #28]
 8009ade:	b099      	sub	sp, #100	@ 0x64
 8009ae0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ae4:	ec55 4b10 	vmov	r4, r5, d0
 8009ae8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009aea:	9109      	str	r1, [sp, #36]	@ 0x24
 8009aec:	4683      	mov	fp, r0
 8009aee:	920e      	str	r2, [sp, #56]	@ 0x38
 8009af0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009af2:	b97f      	cbnz	r7, 8009b14 <_dtoa_r+0x3c>
 8009af4:	2010      	movs	r0, #16
 8009af6:	f001 fb85 	bl	800b204 <malloc>
 8009afa:	4602      	mov	r2, r0
 8009afc:	f8cb 001c 	str.w	r0, [fp, #28]
 8009b00:	b920      	cbnz	r0, 8009b0c <_dtoa_r+0x34>
 8009b02:	4ba7      	ldr	r3, [pc, #668]	@ (8009da0 <_dtoa_r+0x2c8>)
 8009b04:	21ef      	movs	r1, #239	@ 0xef
 8009b06:	48a7      	ldr	r0, [pc, #668]	@ (8009da4 <_dtoa_r+0x2cc>)
 8009b08:	f002 fbaa 	bl	800c260 <__assert_func>
 8009b0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009b10:	6007      	str	r7, [r0, #0]
 8009b12:	60c7      	str	r7, [r0, #12]
 8009b14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b18:	6819      	ldr	r1, [r3, #0]
 8009b1a:	b159      	cbz	r1, 8009b34 <_dtoa_r+0x5c>
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	604a      	str	r2, [r1, #4]
 8009b20:	2301      	movs	r3, #1
 8009b22:	4093      	lsls	r3, r2
 8009b24:	608b      	str	r3, [r1, #8]
 8009b26:	4658      	mov	r0, fp
 8009b28:	f001 fd20 	bl	800b56c <_Bfree>
 8009b2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b30:	2200      	movs	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	1e2b      	subs	r3, r5, #0
 8009b36:	bfb9      	ittee	lt
 8009b38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009b3c:	9303      	strlt	r3, [sp, #12]
 8009b3e:	2300      	movge	r3, #0
 8009b40:	6033      	strge	r3, [r6, #0]
 8009b42:	9f03      	ldr	r7, [sp, #12]
 8009b44:	4b98      	ldr	r3, [pc, #608]	@ (8009da8 <_dtoa_r+0x2d0>)
 8009b46:	bfbc      	itt	lt
 8009b48:	2201      	movlt	r2, #1
 8009b4a:	6032      	strlt	r2, [r6, #0]
 8009b4c:	43bb      	bics	r3, r7
 8009b4e:	d112      	bne.n	8009b76 <_dtoa_r+0x9e>
 8009b50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009b52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009b56:	6013      	str	r3, [r2, #0]
 8009b58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b5c:	4323      	orrs	r3, r4
 8009b5e:	f000 854d 	beq.w	800a5fc <_dtoa_r+0xb24>
 8009b62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009dbc <_dtoa_r+0x2e4>
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 854f 	beq.w	800a60c <_dtoa_r+0xb34>
 8009b6e:	f10a 0303 	add.w	r3, sl, #3
 8009b72:	f000 bd49 	b.w	800a608 <_dtoa_r+0xb30>
 8009b76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	ec51 0b17 	vmov	r0, r1, d7
 8009b80:	2300      	movs	r3, #0
 8009b82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009b86:	f7f6 ff9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b8a:	4680      	mov	r8, r0
 8009b8c:	b158      	cbz	r0, 8009ba6 <_dtoa_r+0xce>
 8009b8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009b90:	2301      	movs	r3, #1
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b96:	b113      	cbz	r3, 8009b9e <_dtoa_r+0xc6>
 8009b98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b9a:	4b84      	ldr	r3, [pc, #528]	@ (8009dac <_dtoa_r+0x2d4>)
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009dc0 <_dtoa_r+0x2e8>
 8009ba2:	f000 bd33 	b.w	800a60c <_dtoa_r+0xb34>
 8009ba6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009baa:	aa16      	add	r2, sp, #88	@ 0x58
 8009bac:	a917      	add	r1, sp, #92	@ 0x5c
 8009bae:	4658      	mov	r0, fp
 8009bb0:	f002 f880 	bl	800bcb4 <__d2b>
 8009bb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009bb8:	4681      	mov	r9, r0
 8009bba:	2e00      	cmp	r6, #0
 8009bbc:	d077      	beq.n	8009cae <_dtoa_r+0x1d6>
 8009bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009bd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009bd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009bd8:	4619      	mov	r1, r3
 8009bda:	2200      	movs	r2, #0
 8009bdc:	4b74      	ldr	r3, [pc, #464]	@ (8009db0 <_dtoa_r+0x2d8>)
 8009bde:	f7f6 fb53 	bl	8000288 <__aeabi_dsub>
 8009be2:	a369      	add	r3, pc, #420	@ (adr r3, 8009d88 <_dtoa_r+0x2b0>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f7f6 fd06 	bl	80005f8 <__aeabi_dmul>
 8009bec:	a368      	add	r3, pc, #416	@ (adr r3, 8009d90 <_dtoa_r+0x2b8>)
 8009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf2:	f7f6 fb4b 	bl	800028c <__adddf3>
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	460d      	mov	r5, r1
 8009bfc:	f7f6 fc92 	bl	8000524 <__aeabi_i2d>
 8009c00:	a365      	add	r3, pc, #404	@ (adr r3, 8009d98 <_dtoa_r+0x2c0>)
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	f7f6 fcf7 	bl	80005f8 <__aeabi_dmul>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4629      	mov	r1, r5
 8009c12:	f7f6 fb3b 	bl	800028c <__adddf3>
 8009c16:	4604      	mov	r4, r0
 8009c18:	460d      	mov	r5, r1
 8009c1a:	f7f6 ff9d 	bl	8000b58 <__aeabi_d2iz>
 8009c1e:	2200      	movs	r2, #0
 8009c20:	4607      	mov	r7, r0
 8009c22:	2300      	movs	r3, #0
 8009c24:	4620      	mov	r0, r4
 8009c26:	4629      	mov	r1, r5
 8009c28:	f7f6 ff58 	bl	8000adc <__aeabi_dcmplt>
 8009c2c:	b140      	cbz	r0, 8009c40 <_dtoa_r+0x168>
 8009c2e:	4638      	mov	r0, r7
 8009c30:	f7f6 fc78 	bl	8000524 <__aeabi_i2d>
 8009c34:	4622      	mov	r2, r4
 8009c36:	462b      	mov	r3, r5
 8009c38:	f7f6 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c3c:	b900      	cbnz	r0, 8009c40 <_dtoa_r+0x168>
 8009c3e:	3f01      	subs	r7, #1
 8009c40:	2f16      	cmp	r7, #22
 8009c42:	d851      	bhi.n	8009ce8 <_dtoa_r+0x210>
 8009c44:	4b5b      	ldr	r3, [pc, #364]	@ (8009db4 <_dtoa_r+0x2dc>)
 8009c46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c52:	f7f6 ff43 	bl	8000adc <__aeabi_dcmplt>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d048      	beq.n	8009cec <_dtoa_r+0x214>
 8009c5a:	3f01      	subs	r7, #1
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c62:	1b9b      	subs	r3, r3, r6
 8009c64:	1e5a      	subs	r2, r3, #1
 8009c66:	bf44      	itt	mi
 8009c68:	f1c3 0801 	rsbmi	r8, r3, #1
 8009c6c:	2300      	movmi	r3, #0
 8009c6e:	9208      	str	r2, [sp, #32]
 8009c70:	bf54      	ite	pl
 8009c72:	f04f 0800 	movpl.w	r8, #0
 8009c76:	9308      	strmi	r3, [sp, #32]
 8009c78:	2f00      	cmp	r7, #0
 8009c7a:	db39      	blt.n	8009cf0 <_dtoa_r+0x218>
 8009c7c:	9b08      	ldr	r3, [sp, #32]
 8009c7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009c80:	443b      	add	r3, r7
 8009c82:	9308      	str	r3, [sp, #32]
 8009c84:	2300      	movs	r3, #0
 8009c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c8a:	2b09      	cmp	r3, #9
 8009c8c:	d864      	bhi.n	8009d58 <_dtoa_r+0x280>
 8009c8e:	2b05      	cmp	r3, #5
 8009c90:	bfc4      	itt	gt
 8009c92:	3b04      	subgt	r3, #4
 8009c94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c98:	f1a3 0302 	sub.w	r3, r3, #2
 8009c9c:	bfcc      	ite	gt
 8009c9e:	2400      	movgt	r4, #0
 8009ca0:	2401      	movle	r4, #1
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	d863      	bhi.n	8009d6e <_dtoa_r+0x296>
 8009ca6:	e8df f003 	tbb	[pc, r3]
 8009caa:	372a      	.short	0x372a
 8009cac:	5535      	.short	0x5535
 8009cae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009cb2:	441e      	add	r6, r3
 8009cb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	bfc1      	itttt	gt
 8009cbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009cc0:	409f      	lslgt	r7, r3
 8009cc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009cc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009cca:	bfd6      	itet	le
 8009ccc:	f1c3 0320 	rsble	r3, r3, #32
 8009cd0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009cd4:	fa04 f003 	lslle.w	r0, r4, r3
 8009cd8:	f7f6 fc14 	bl	8000504 <__aeabi_ui2d>
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ce2:	3e01      	subs	r6, #1
 8009ce4:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ce6:	e777      	b.n	8009bd8 <_dtoa_r+0x100>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e7b8      	b.n	8009c5e <_dtoa_r+0x186>
 8009cec:	9012      	str	r0, [sp, #72]	@ 0x48
 8009cee:	e7b7      	b.n	8009c60 <_dtoa_r+0x188>
 8009cf0:	427b      	negs	r3, r7
 8009cf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	eba8 0807 	sub.w	r8, r8, r7
 8009cfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009cfc:	e7c4      	b.n	8009c88 <_dtoa_r+0x1b0>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	dc35      	bgt.n	8009d74 <_dtoa_r+0x29c>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	9307      	str	r3, [sp, #28]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d12:	e00b      	b.n	8009d2c <_dtoa_r+0x254>
 8009d14:	2301      	movs	r3, #1
 8009d16:	e7f3      	b.n	8009d00 <_dtoa_r+0x228>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	9307      	str	r3, [sp, #28]
 8009d28:	bfb8      	it	lt
 8009d2a:	2301      	movlt	r3, #1
 8009d2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009d30:	2100      	movs	r1, #0
 8009d32:	2204      	movs	r2, #4
 8009d34:	f102 0514 	add.w	r5, r2, #20
 8009d38:	429d      	cmp	r5, r3
 8009d3a:	d91f      	bls.n	8009d7c <_dtoa_r+0x2a4>
 8009d3c:	6041      	str	r1, [r0, #4]
 8009d3e:	4658      	mov	r0, fp
 8009d40:	f001 fbd4 	bl	800b4ec <_Balloc>
 8009d44:	4682      	mov	sl, r0
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d13c      	bne.n	8009dc4 <_dtoa_r+0x2ec>
 8009d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8009db8 <_dtoa_r+0x2e0>)
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009d52:	e6d8      	b.n	8009b06 <_dtoa_r+0x2e>
 8009d54:	2301      	movs	r3, #1
 8009d56:	e7e0      	b.n	8009d1a <_dtoa_r+0x242>
 8009d58:	2401      	movs	r4, #1
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009d60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	9307      	str	r3, [sp, #28]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2312      	movs	r3, #18
 8009d6c:	e7d0      	b.n	8009d10 <_dtoa_r+0x238>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d72:	e7f5      	b.n	8009d60 <_dtoa_r+0x288>
 8009d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	9307      	str	r3, [sp, #28]
 8009d7a:	e7d7      	b.n	8009d2c <_dtoa_r+0x254>
 8009d7c:	3101      	adds	r1, #1
 8009d7e:	0052      	lsls	r2, r2, #1
 8009d80:	e7d8      	b.n	8009d34 <_dtoa_r+0x25c>
 8009d82:	bf00      	nop
 8009d84:	f3af 8000 	nop.w
 8009d88:	636f4361 	.word	0x636f4361
 8009d8c:	3fd287a7 	.word	0x3fd287a7
 8009d90:	8b60c8b3 	.word	0x8b60c8b3
 8009d94:	3fc68a28 	.word	0x3fc68a28
 8009d98:	509f79fb 	.word	0x509f79fb
 8009d9c:	3fd34413 	.word	0x3fd34413
 8009da0:	0800c796 	.word	0x0800c796
 8009da4:	0800c7ad 	.word	0x0800c7ad
 8009da8:	7ff00000 	.word	0x7ff00000
 8009dac:	0800c605 	.word	0x0800c605
 8009db0:	3ff80000 	.word	0x3ff80000
 8009db4:	0800c918 	.word	0x0800c918
 8009db8:	0800c805 	.word	0x0800c805
 8009dbc:	0800c792 	.word	0x0800c792
 8009dc0:	0800c604 	.word	0x0800c604
 8009dc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009dc8:	6018      	str	r0, [r3, #0]
 8009dca:	9b07      	ldr	r3, [sp, #28]
 8009dcc:	2b0e      	cmp	r3, #14
 8009dce:	f200 80a4 	bhi.w	8009f1a <_dtoa_r+0x442>
 8009dd2:	2c00      	cmp	r4, #0
 8009dd4:	f000 80a1 	beq.w	8009f1a <_dtoa_r+0x442>
 8009dd8:	2f00      	cmp	r7, #0
 8009dda:	dd33      	ble.n	8009e44 <_dtoa_r+0x36c>
 8009ddc:	4bad      	ldr	r3, [pc, #692]	@ (800a094 <_dtoa_r+0x5bc>)
 8009dde:	f007 020f 	and.w	r2, r7, #15
 8009de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009de6:	ed93 7b00 	vldr	d7, [r3]
 8009dea:	05f8      	lsls	r0, r7, #23
 8009dec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009df0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009df4:	d516      	bpl.n	8009e24 <_dtoa_r+0x34c>
 8009df6:	4ba8      	ldr	r3, [pc, #672]	@ (800a098 <_dtoa_r+0x5c0>)
 8009df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e00:	f7f6 fd24 	bl	800084c <__aeabi_ddiv>
 8009e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e08:	f004 040f 	and.w	r4, r4, #15
 8009e0c:	2603      	movs	r6, #3
 8009e0e:	4da2      	ldr	r5, [pc, #648]	@ (800a098 <_dtoa_r+0x5c0>)
 8009e10:	b954      	cbnz	r4, 8009e28 <_dtoa_r+0x350>
 8009e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e1a:	f7f6 fd17 	bl	800084c <__aeabi_ddiv>
 8009e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e22:	e028      	b.n	8009e76 <_dtoa_r+0x39e>
 8009e24:	2602      	movs	r6, #2
 8009e26:	e7f2      	b.n	8009e0e <_dtoa_r+0x336>
 8009e28:	07e1      	lsls	r1, r4, #31
 8009e2a:	d508      	bpl.n	8009e3e <_dtoa_r+0x366>
 8009e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e34:	f7f6 fbe0 	bl	80005f8 <__aeabi_dmul>
 8009e38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e3c:	3601      	adds	r6, #1
 8009e3e:	1064      	asrs	r4, r4, #1
 8009e40:	3508      	adds	r5, #8
 8009e42:	e7e5      	b.n	8009e10 <_dtoa_r+0x338>
 8009e44:	f000 80d2 	beq.w	8009fec <_dtoa_r+0x514>
 8009e48:	427c      	negs	r4, r7
 8009e4a:	4b92      	ldr	r3, [pc, #584]	@ (800a094 <_dtoa_r+0x5bc>)
 8009e4c:	4d92      	ldr	r5, [pc, #584]	@ (800a098 <_dtoa_r+0x5c0>)
 8009e4e:	f004 020f 	and.w	r2, r4, #15
 8009e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e5e:	f7f6 fbcb 	bl	80005f8 <__aeabi_dmul>
 8009e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e66:	1124      	asrs	r4, r4, #4
 8009e68:	2300      	movs	r3, #0
 8009e6a:	2602      	movs	r6, #2
 8009e6c:	2c00      	cmp	r4, #0
 8009e6e:	f040 80b2 	bne.w	8009fd6 <_dtoa_r+0x4fe>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1d3      	bne.n	8009e1e <_dtoa_r+0x346>
 8009e76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 80b7 	beq.w	8009ff0 <_dtoa_r+0x518>
 8009e82:	4b86      	ldr	r3, [pc, #536]	@ (800a09c <_dtoa_r+0x5c4>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	4620      	mov	r0, r4
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7f6 fe27 	bl	8000adc <__aeabi_dcmplt>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	f000 80ae 	beq.w	8009ff0 <_dtoa_r+0x518>
 8009e94:	9b07      	ldr	r3, [sp, #28]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f000 80aa 	beq.w	8009ff0 <_dtoa_r+0x518>
 8009e9c:	9b00      	ldr	r3, [sp, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	dd37      	ble.n	8009f12 <_dtoa_r+0x43a>
 8009ea2:	1e7b      	subs	r3, r7, #1
 8009ea4:	9304      	str	r3, [sp, #16]
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	4b7d      	ldr	r3, [pc, #500]	@ (800a0a0 <_dtoa_r+0x5c8>)
 8009eaa:	2200      	movs	r2, #0
 8009eac:	4629      	mov	r1, r5
 8009eae:	f7f6 fba3 	bl	80005f8 <__aeabi_dmul>
 8009eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eb6:	9c00      	ldr	r4, [sp, #0]
 8009eb8:	3601      	adds	r6, #1
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7f6 fb32 	bl	8000524 <__aeabi_i2d>
 8009ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ec4:	f7f6 fb98 	bl	80005f8 <__aeabi_dmul>
 8009ec8:	4b76      	ldr	r3, [pc, #472]	@ (800a0a4 <_dtoa_r+0x5cc>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f7f6 f9de 	bl	800028c <__adddf3>
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009ed6:	2c00      	cmp	r4, #0
 8009ed8:	f040 808d 	bne.w	8009ff6 <_dtoa_r+0x51e>
 8009edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ee0:	4b71      	ldr	r3, [pc, #452]	@ (800a0a8 <_dtoa_r+0x5d0>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f7f6 f9d0 	bl	8000288 <__aeabi_dsub>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ef0:	462a      	mov	r2, r5
 8009ef2:	4633      	mov	r3, r6
 8009ef4:	f7f6 fe10 	bl	8000b18 <__aeabi_dcmpgt>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	f040 828b 	bne.w	800a414 <_dtoa_r+0x93c>
 8009efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f02:	462a      	mov	r2, r5
 8009f04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009f08:	f7f6 fde8 	bl	8000adc <__aeabi_dcmplt>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f040 8128 	bne.w	800a162 <_dtoa_r+0x68a>
 8009f12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009f16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009f1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f2c0 815a 	blt.w	800a1d6 <_dtoa_r+0x6fe>
 8009f22:	2f0e      	cmp	r7, #14
 8009f24:	f300 8157 	bgt.w	800a1d6 <_dtoa_r+0x6fe>
 8009f28:	4b5a      	ldr	r3, [pc, #360]	@ (800a094 <_dtoa_r+0x5bc>)
 8009f2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f2e:	ed93 7b00 	vldr	d7, [r3]
 8009f32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	ed8d 7b00 	vstr	d7, [sp]
 8009f3a:	da03      	bge.n	8009f44 <_dtoa_r+0x46c>
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f340 8101 	ble.w	800a146 <_dtoa_r+0x66e>
 8009f44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f48:	4656      	mov	r6, sl
 8009f4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f4e:	4620      	mov	r0, r4
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7f6 fc7b 	bl	800084c <__aeabi_ddiv>
 8009f56:	f7f6 fdff 	bl	8000b58 <__aeabi_d2iz>
 8009f5a:	4680      	mov	r8, r0
 8009f5c:	f7f6 fae2 	bl	8000524 <__aeabi_i2d>
 8009f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f64:	f7f6 fb48 	bl	80005f8 <__aeabi_dmul>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	4629      	mov	r1, r5
 8009f70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009f74:	f7f6 f988 	bl	8000288 <__aeabi_dsub>
 8009f78:	f806 4b01 	strb.w	r4, [r6], #1
 8009f7c:	9d07      	ldr	r5, [sp, #28]
 8009f7e:	eba6 040a 	sub.w	r4, r6, sl
 8009f82:	42a5      	cmp	r5, r4
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	f040 8117 	bne.w	800a1ba <_dtoa_r+0x6e2>
 8009f8c:	f7f6 f97e 	bl	800028c <__adddf3>
 8009f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f94:	4604      	mov	r4, r0
 8009f96:	460d      	mov	r5, r1
 8009f98:	f7f6 fdbe 	bl	8000b18 <__aeabi_dcmpgt>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f040 80f9 	bne.w	800a194 <_dtoa_r+0x6bc>
 8009fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7f6 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fae:	b118      	cbz	r0, 8009fb8 <_dtoa_r+0x4e0>
 8009fb0:	f018 0f01 	tst.w	r8, #1
 8009fb4:	f040 80ee 	bne.w	800a194 <_dtoa_r+0x6bc>
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4658      	mov	r0, fp
 8009fbc:	f001 fad6 	bl	800b56c <_Bfree>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	7033      	strb	r3, [r6, #0]
 8009fc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fc6:	3701      	adds	r7, #1
 8009fc8:	601f      	str	r7, [r3, #0]
 8009fca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 831d 	beq.w	800a60c <_dtoa_r+0xb34>
 8009fd2:	601e      	str	r6, [r3, #0]
 8009fd4:	e31a      	b.n	800a60c <_dtoa_r+0xb34>
 8009fd6:	07e2      	lsls	r2, r4, #31
 8009fd8:	d505      	bpl.n	8009fe6 <_dtoa_r+0x50e>
 8009fda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fde:	f7f6 fb0b 	bl	80005f8 <__aeabi_dmul>
 8009fe2:	3601      	adds	r6, #1
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	1064      	asrs	r4, r4, #1
 8009fe8:	3508      	adds	r5, #8
 8009fea:	e73f      	b.n	8009e6c <_dtoa_r+0x394>
 8009fec:	2602      	movs	r6, #2
 8009fee:	e742      	b.n	8009e76 <_dtoa_r+0x39e>
 8009ff0:	9c07      	ldr	r4, [sp, #28]
 8009ff2:	9704      	str	r7, [sp, #16]
 8009ff4:	e761      	b.n	8009eba <_dtoa_r+0x3e2>
 8009ff6:	4b27      	ldr	r3, [pc, #156]	@ (800a094 <_dtoa_r+0x5bc>)
 8009ff8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ffa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ffe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a002:	4454      	add	r4, sl
 800a004:	2900      	cmp	r1, #0
 800a006:	d053      	beq.n	800a0b0 <_dtoa_r+0x5d8>
 800a008:	4928      	ldr	r1, [pc, #160]	@ (800a0ac <_dtoa_r+0x5d4>)
 800a00a:	2000      	movs	r0, #0
 800a00c:	f7f6 fc1e 	bl	800084c <__aeabi_ddiv>
 800a010:	4633      	mov	r3, r6
 800a012:	462a      	mov	r2, r5
 800a014:	f7f6 f938 	bl	8000288 <__aeabi_dsub>
 800a018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a01c:	4656      	mov	r6, sl
 800a01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a022:	f7f6 fd99 	bl	8000b58 <__aeabi_d2iz>
 800a026:	4605      	mov	r5, r0
 800a028:	f7f6 fa7c 	bl	8000524 <__aeabi_i2d>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a034:	f7f6 f928 	bl	8000288 <__aeabi_dsub>
 800a038:	3530      	adds	r5, #48	@ 0x30
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a042:	f806 5b01 	strb.w	r5, [r6], #1
 800a046:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a04a:	f7f6 fd47 	bl	8000adc <__aeabi_dcmplt>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d171      	bne.n	800a136 <_dtoa_r+0x65e>
 800a052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a056:	4911      	ldr	r1, [pc, #68]	@ (800a09c <_dtoa_r+0x5c4>)
 800a058:	2000      	movs	r0, #0
 800a05a:	f7f6 f915 	bl	8000288 <__aeabi_dsub>
 800a05e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a062:	f7f6 fd3b 	bl	8000adc <__aeabi_dcmplt>
 800a066:	2800      	cmp	r0, #0
 800a068:	f040 8095 	bne.w	800a196 <_dtoa_r+0x6be>
 800a06c:	42a6      	cmp	r6, r4
 800a06e:	f43f af50 	beq.w	8009f12 <_dtoa_r+0x43a>
 800a072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a076:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a0 <_dtoa_r+0x5c8>)
 800a078:	2200      	movs	r2, #0
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	4b08      	ldr	r3, [pc, #32]	@ (800a0a0 <_dtoa_r+0x5c8>)
 800a080:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a084:	2200      	movs	r2, #0
 800a086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08a:	f7f6 fab5 	bl	80005f8 <__aeabi_dmul>
 800a08e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a092:	e7c4      	b.n	800a01e <_dtoa_r+0x546>
 800a094:	0800c918 	.word	0x0800c918
 800a098:	0800c8f0 	.word	0x0800c8f0
 800a09c:	3ff00000 	.word	0x3ff00000
 800a0a0:	40240000 	.word	0x40240000
 800a0a4:	401c0000 	.word	0x401c0000
 800a0a8:	40140000 	.word	0x40140000
 800a0ac:	3fe00000 	.word	0x3fe00000
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	f7f6 faa0 	bl	80005f8 <__aeabi_dmul>
 800a0b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0bc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a0be:	4656      	mov	r6, sl
 800a0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c4:	f7f6 fd48 	bl	8000b58 <__aeabi_d2iz>
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	f7f6 fa2b 	bl	8000524 <__aeabi_i2d>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0d6:	f7f6 f8d7 	bl	8000288 <__aeabi_dsub>
 800a0da:	3530      	adds	r5, #48	@ 0x30
 800a0dc:	f806 5b01 	strb.w	r5, [r6], #1
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	42a6      	cmp	r6, r4
 800a0e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0ea:	f04f 0200 	mov.w	r2, #0
 800a0ee:	d124      	bne.n	800a13a <_dtoa_r+0x662>
 800a0f0:	4bac      	ldr	r3, [pc, #688]	@ (800a3a4 <_dtoa_r+0x8cc>)
 800a0f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a0f6:	f7f6 f8c9 	bl	800028c <__adddf3>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a102:	f7f6 fd09 	bl	8000b18 <__aeabi_dcmpgt>
 800a106:	2800      	cmp	r0, #0
 800a108:	d145      	bne.n	800a196 <_dtoa_r+0x6be>
 800a10a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a10e:	49a5      	ldr	r1, [pc, #660]	@ (800a3a4 <_dtoa_r+0x8cc>)
 800a110:	2000      	movs	r0, #0
 800a112:	f7f6 f8b9 	bl	8000288 <__aeabi_dsub>
 800a116:	4602      	mov	r2, r0
 800a118:	460b      	mov	r3, r1
 800a11a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a11e:	f7f6 fcdd 	bl	8000adc <__aeabi_dcmplt>
 800a122:	2800      	cmp	r0, #0
 800a124:	f43f aef5 	beq.w	8009f12 <_dtoa_r+0x43a>
 800a128:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a12a:	1e73      	subs	r3, r6, #1
 800a12c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a12e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a132:	2b30      	cmp	r3, #48	@ 0x30
 800a134:	d0f8      	beq.n	800a128 <_dtoa_r+0x650>
 800a136:	9f04      	ldr	r7, [sp, #16]
 800a138:	e73e      	b.n	8009fb8 <_dtoa_r+0x4e0>
 800a13a:	4b9b      	ldr	r3, [pc, #620]	@ (800a3a8 <_dtoa_r+0x8d0>)
 800a13c:	f7f6 fa5c 	bl	80005f8 <__aeabi_dmul>
 800a140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a144:	e7bc      	b.n	800a0c0 <_dtoa_r+0x5e8>
 800a146:	d10c      	bne.n	800a162 <_dtoa_r+0x68a>
 800a148:	4b98      	ldr	r3, [pc, #608]	@ (800a3ac <_dtoa_r+0x8d4>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a150:	f7f6 fa52 	bl	80005f8 <__aeabi_dmul>
 800a154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a158:	f7f6 fcd4 	bl	8000b04 <__aeabi_dcmpge>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f000 8157 	beq.w	800a410 <_dtoa_r+0x938>
 800a162:	2400      	movs	r4, #0
 800a164:	4625      	mov	r5, r4
 800a166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a168:	43db      	mvns	r3, r3
 800a16a:	9304      	str	r3, [sp, #16]
 800a16c:	4656      	mov	r6, sl
 800a16e:	2700      	movs	r7, #0
 800a170:	4621      	mov	r1, r4
 800a172:	4658      	mov	r0, fp
 800a174:	f001 f9fa 	bl	800b56c <_Bfree>
 800a178:	2d00      	cmp	r5, #0
 800a17a:	d0dc      	beq.n	800a136 <_dtoa_r+0x65e>
 800a17c:	b12f      	cbz	r7, 800a18a <_dtoa_r+0x6b2>
 800a17e:	42af      	cmp	r7, r5
 800a180:	d003      	beq.n	800a18a <_dtoa_r+0x6b2>
 800a182:	4639      	mov	r1, r7
 800a184:	4658      	mov	r0, fp
 800a186:	f001 f9f1 	bl	800b56c <_Bfree>
 800a18a:	4629      	mov	r1, r5
 800a18c:	4658      	mov	r0, fp
 800a18e:	f001 f9ed 	bl	800b56c <_Bfree>
 800a192:	e7d0      	b.n	800a136 <_dtoa_r+0x65e>
 800a194:	9704      	str	r7, [sp, #16]
 800a196:	4633      	mov	r3, r6
 800a198:	461e      	mov	r6, r3
 800a19a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a19e:	2a39      	cmp	r2, #57	@ 0x39
 800a1a0:	d107      	bne.n	800a1b2 <_dtoa_r+0x6da>
 800a1a2:	459a      	cmp	sl, r3
 800a1a4:	d1f8      	bne.n	800a198 <_dtoa_r+0x6c0>
 800a1a6:	9a04      	ldr	r2, [sp, #16]
 800a1a8:	3201      	adds	r2, #1
 800a1aa:	9204      	str	r2, [sp, #16]
 800a1ac:	2230      	movs	r2, #48	@ 0x30
 800a1ae:	f88a 2000 	strb.w	r2, [sl]
 800a1b2:	781a      	ldrb	r2, [r3, #0]
 800a1b4:	3201      	adds	r2, #1
 800a1b6:	701a      	strb	r2, [r3, #0]
 800a1b8:	e7bd      	b.n	800a136 <_dtoa_r+0x65e>
 800a1ba:	4b7b      	ldr	r3, [pc, #492]	@ (800a3a8 <_dtoa_r+0x8d0>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f7f6 fa1b 	bl	80005f8 <__aeabi_dmul>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	460d      	mov	r5, r1
 800a1ca:	f7f6 fc7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f43f aebb 	beq.w	8009f4a <_dtoa_r+0x472>
 800a1d4:	e6f0      	b.n	8009fb8 <_dtoa_r+0x4e0>
 800a1d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a1d8:	2a00      	cmp	r2, #0
 800a1da:	f000 80db 	beq.w	800a394 <_dtoa_r+0x8bc>
 800a1de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1e0:	2a01      	cmp	r2, #1
 800a1e2:	f300 80bf 	bgt.w	800a364 <_dtoa_r+0x88c>
 800a1e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a1e8:	2a00      	cmp	r2, #0
 800a1ea:	f000 80b7 	beq.w	800a35c <_dtoa_r+0x884>
 800a1ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a1f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a1f4:	4646      	mov	r6, r8
 800a1f6:	9a08      	ldr	r2, [sp, #32]
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	441a      	add	r2, r3
 800a1fc:	4658      	mov	r0, fp
 800a1fe:	4498      	add	r8, r3
 800a200:	9208      	str	r2, [sp, #32]
 800a202:	f001 fab1 	bl	800b768 <__i2b>
 800a206:	4605      	mov	r5, r0
 800a208:	b15e      	cbz	r6, 800a222 <_dtoa_r+0x74a>
 800a20a:	9b08      	ldr	r3, [sp, #32]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd08      	ble.n	800a222 <_dtoa_r+0x74a>
 800a210:	42b3      	cmp	r3, r6
 800a212:	9a08      	ldr	r2, [sp, #32]
 800a214:	bfa8      	it	ge
 800a216:	4633      	movge	r3, r6
 800a218:	eba8 0803 	sub.w	r8, r8, r3
 800a21c:	1af6      	subs	r6, r6, r3
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	9308      	str	r3, [sp, #32]
 800a222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a224:	b1f3      	cbz	r3, 800a264 <_dtoa_r+0x78c>
 800a226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 80b7 	beq.w	800a39c <_dtoa_r+0x8c4>
 800a22e:	b18c      	cbz	r4, 800a254 <_dtoa_r+0x77c>
 800a230:	4629      	mov	r1, r5
 800a232:	4622      	mov	r2, r4
 800a234:	4658      	mov	r0, fp
 800a236:	f001 fb57 	bl	800b8e8 <__pow5mult>
 800a23a:	464a      	mov	r2, r9
 800a23c:	4601      	mov	r1, r0
 800a23e:	4605      	mov	r5, r0
 800a240:	4658      	mov	r0, fp
 800a242:	f001 faa7 	bl	800b794 <__multiply>
 800a246:	4649      	mov	r1, r9
 800a248:	9004      	str	r0, [sp, #16]
 800a24a:	4658      	mov	r0, fp
 800a24c:	f001 f98e 	bl	800b56c <_Bfree>
 800a250:	9b04      	ldr	r3, [sp, #16]
 800a252:	4699      	mov	r9, r3
 800a254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a256:	1b1a      	subs	r2, r3, r4
 800a258:	d004      	beq.n	800a264 <_dtoa_r+0x78c>
 800a25a:	4649      	mov	r1, r9
 800a25c:	4658      	mov	r0, fp
 800a25e:	f001 fb43 	bl	800b8e8 <__pow5mult>
 800a262:	4681      	mov	r9, r0
 800a264:	2101      	movs	r1, #1
 800a266:	4658      	mov	r0, fp
 800a268:	f001 fa7e 	bl	800b768 <__i2b>
 800a26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a26e:	4604      	mov	r4, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 81cf 	beq.w	800a614 <_dtoa_r+0xb3c>
 800a276:	461a      	mov	r2, r3
 800a278:	4601      	mov	r1, r0
 800a27a:	4658      	mov	r0, fp
 800a27c:	f001 fb34 	bl	800b8e8 <__pow5mult>
 800a280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a282:	2b01      	cmp	r3, #1
 800a284:	4604      	mov	r4, r0
 800a286:	f300 8095 	bgt.w	800a3b4 <_dtoa_r+0x8dc>
 800a28a:	9b02      	ldr	r3, [sp, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f040 8087 	bne.w	800a3a0 <_dtoa_r+0x8c8>
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f040 8089 	bne.w	800a3b0 <_dtoa_r+0x8d8>
 800a29e:	9b03      	ldr	r3, [sp, #12]
 800a2a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a2a4:	0d1b      	lsrs	r3, r3, #20
 800a2a6:	051b      	lsls	r3, r3, #20
 800a2a8:	b12b      	cbz	r3, 800a2b6 <_dtoa_r+0x7de>
 800a2aa:	9b08      	ldr	r3, [sp, #32]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	9308      	str	r3, [sp, #32]
 800a2b0:	f108 0801 	add.w	r8, r8, #1
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 81b0 	beq.w	800a620 <_dtoa_r+0xb48>
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2c6:	6918      	ldr	r0, [r3, #16]
 800a2c8:	f001 fa02 	bl	800b6d0 <__hi0bits>
 800a2cc:	f1c0 0020 	rsb	r0, r0, #32
 800a2d0:	9b08      	ldr	r3, [sp, #32]
 800a2d2:	4418      	add	r0, r3
 800a2d4:	f010 001f 	ands.w	r0, r0, #31
 800a2d8:	d077      	beq.n	800a3ca <_dtoa_r+0x8f2>
 800a2da:	f1c0 0320 	rsb	r3, r0, #32
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	dd6b      	ble.n	800a3ba <_dtoa_r+0x8e2>
 800a2e2:	9b08      	ldr	r3, [sp, #32]
 800a2e4:	f1c0 001c 	rsb	r0, r0, #28
 800a2e8:	4403      	add	r3, r0
 800a2ea:	4480      	add	r8, r0
 800a2ec:	4406      	add	r6, r0
 800a2ee:	9308      	str	r3, [sp, #32]
 800a2f0:	f1b8 0f00 	cmp.w	r8, #0
 800a2f4:	dd05      	ble.n	800a302 <_dtoa_r+0x82a>
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	4658      	mov	r0, fp
 800a2fc:	f001 fb4e 	bl	800b99c <__lshift>
 800a300:	4681      	mov	r9, r0
 800a302:	9b08      	ldr	r3, [sp, #32]
 800a304:	2b00      	cmp	r3, #0
 800a306:	dd05      	ble.n	800a314 <_dtoa_r+0x83c>
 800a308:	4621      	mov	r1, r4
 800a30a:	461a      	mov	r2, r3
 800a30c:	4658      	mov	r0, fp
 800a30e:	f001 fb45 	bl	800b99c <__lshift>
 800a312:	4604      	mov	r4, r0
 800a314:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a316:	2b00      	cmp	r3, #0
 800a318:	d059      	beq.n	800a3ce <_dtoa_r+0x8f6>
 800a31a:	4621      	mov	r1, r4
 800a31c:	4648      	mov	r0, r9
 800a31e:	f001 fba9 	bl	800ba74 <__mcmp>
 800a322:	2800      	cmp	r0, #0
 800a324:	da53      	bge.n	800a3ce <_dtoa_r+0x8f6>
 800a326:	1e7b      	subs	r3, r7, #1
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	4649      	mov	r1, r9
 800a32c:	2300      	movs	r3, #0
 800a32e:	220a      	movs	r2, #10
 800a330:	4658      	mov	r0, fp
 800a332:	f001 f93d 	bl	800b5b0 <__multadd>
 800a336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a338:	4681      	mov	r9, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 8172 	beq.w	800a624 <_dtoa_r+0xb4c>
 800a340:	2300      	movs	r3, #0
 800a342:	4629      	mov	r1, r5
 800a344:	220a      	movs	r2, #10
 800a346:	4658      	mov	r0, fp
 800a348:	f001 f932 	bl	800b5b0 <__multadd>
 800a34c:	9b00      	ldr	r3, [sp, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	4605      	mov	r5, r0
 800a352:	dc67      	bgt.n	800a424 <_dtoa_r+0x94c>
 800a354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a356:	2b02      	cmp	r3, #2
 800a358:	dc41      	bgt.n	800a3de <_dtoa_r+0x906>
 800a35a:	e063      	b.n	800a424 <_dtoa_r+0x94c>
 800a35c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a35e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a362:	e746      	b.n	800a1f2 <_dtoa_r+0x71a>
 800a364:	9b07      	ldr	r3, [sp, #28]
 800a366:	1e5c      	subs	r4, r3, #1
 800a368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	bfbf      	itttt	lt
 800a36e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a370:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a372:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a374:	1ae3      	sublt	r3, r4, r3
 800a376:	bfb4      	ite	lt
 800a378:	18d2      	addlt	r2, r2, r3
 800a37a:	1b1c      	subge	r4, r3, r4
 800a37c:	9b07      	ldr	r3, [sp, #28]
 800a37e:	bfbc      	itt	lt
 800a380:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a382:	2400      	movlt	r4, #0
 800a384:	2b00      	cmp	r3, #0
 800a386:	bfb5      	itete	lt
 800a388:	eba8 0603 	sublt.w	r6, r8, r3
 800a38c:	9b07      	ldrge	r3, [sp, #28]
 800a38e:	2300      	movlt	r3, #0
 800a390:	4646      	movge	r6, r8
 800a392:	e730      	b.n	800a1f6 <_dtoa_r+0x71e>
 800a394:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a396:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a398:	4646      	mov	r6, r8
 800a39a:	e735      	b.n	800a208 <_dtoa_r+0x730>
 800a39c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a39e:	e75c      	b.n	800a25a <_dtoa_r+0x782>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e788      	b.n	800a2b6 <_dtoa_r+0x7de>
 800a3a4:	3fe00000 	.word	0x3fe00000
 800a3a8:	40240000 	.word	0x40240000
 800a3ac:	40140000 	.word	0x40140000
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	e780      	b.n	800a2b6 <_dtoa_r+0x7de>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3b8:	e782      	b.n	800a2c0 <_dtoa_r+0x7e8>
 800a3ba:	d099      	beq.n	800a2f0 <_dtoa_r+0x818>
 800a3bc:	9a08      	ldr	r2, [sp, #32]
 800a3be:	331c      	adds	r3, #28
 800a3c0:	441a      	add	r2, r3
 800a3c2:	4498      	add	r8, r3
 800a3c4:	441e      	add	r6, r3
 800a3c6:	9208      	str	r2, [sp, #32]
 800a3c8:	e792      	b.n	800a2f0 <_dtoa_r+0x818>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	e7f6      	b.n	800a3bc <_dtoa_r+0x8e4>
 800a3ce:	9b07      	ldr	r3, [sp, #28]
 800a3d0:	9704      	str	r7, [sp, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	dc20      	bgt.n	800a418 <_dtoa_r+0x940>
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	dd1e      	ble.n	800a41c <_dtoa_r+0x944>
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f47f aec0 	bne.w	800a166 <_dtoa_r+0x68e>
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	2205      	movs	r2, #5
 800a3ea:	4658      	mov	r0, fp
 800a3ec:	f001 f8e0 	bl	800b5b0 <__multadd>
 800a3f0:	4601      	mov	r1, r0
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	4648      	mov	r0, r9
 800a3f6:	f001 fb3d 	bl	800ba74 <__mcmp>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	f77f aeb3 	ble.w	800a166 <_dtoa_r+0x68e>
 800a400:	4656      	mov	r6, sl
 800a402:	2331      	movs	r3, #49	@ 0x31
 800a404:	f806 3b01 	strb.w	r3, [r6], #1
 800a408:	9b04      	ldr	r3, [sp, #16]
 800a40a:	3301      	adds	r3, #1
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	e6ae      	b.n	800a16e <_dtoa_r+0x696>
 800a410:	9c07      	ldr	r4, [sp, #28]
 800a412:	9704      	str	r7, [sp, #16]
 800a414:	4625      	mov	r5, r4
 800a416:	e7f3      	b.n	800a400 <_dtoa_r+0x928>
 800a418:	9b07      	ldr	r3, [sp, #28]
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f000 8104 	beq.w	800a62c <_dtoa_r+0xb54>
 800a424:	2e00      	cmp	r6, #0
 800a426:	dd05      	ble.n	800a434 <_dtoa_r+0x95c>
 800a428:	4629      	mov	r1, r5
 800a42a:	4632      	mov	r2, r6
 800a42c:	4658      	mov	r0, fp
 800a42e:	f001 fab5 	bl	800b99c <__lshift>
 800a432:	4605      	mov	r5, r0
 800a434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a436:	2b00      	cmp	r3, #0
 800a438:	d05a      	beq.n	800a4f0 <_dtoa_r+0xa18>
 800a43a:	6869      	ldr	r1, [r5, #4]
 800a43c:	4658      	mov	r0, fp
 800a43e:	f001 f855 	bl	800b4ec <_Balloc>
 800a442:	4606      	mov	r6, r0
 800a444:	b928      	cbnz	r0, 800a452 <_dtoa_r+0x97a>
 800a446:	4b84      	ldr	r3, [pc, #528]	@ (800a658 <_dtoa_r+0xb80>)
 800a448:	4602      	mov	r2, r0
 800a44a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a44e:	f7ff bb5a 	b.w	8009b06 <_dtoa_r+0x2e>
 800a452:	692a      	ldr	r2, [r5, #16]
 800a454:	3202      	adds	r2, #2
 800a456:	0092      	lsls	r2, r2, #2
 800a458:	f105 010c 	add.w	r1, r5, #12
 800a45c:	300c      	adds	r0, #12
 800a45e:	f7ff fa92 	bl	8009986 <memcpy>
 800a462:	2201      	movs	r2, #1
 800a464:	4631      	mov	r1, r6
 800a466:	4658      	mov	r0, fp
 800a468:	f001 fa98 	bl	800b99c <__lshift>
 800a46c:	f10a 0301 	add.w	r3, sl, #1
 800a470:	9307      	str	r3, [sp, #28]
 800a472:	9b00      	ldr	r3, [sp, #0]
 800a474:	4453      	add	r3, sl
 800a476:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a478:	9b02      	ldr	r3, [sp, #8]
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	462f      	mov	r7, r5
 800a480:	930a      	str	r3, [sp, #40]	@ 0x28
 800a482:	4605      	mov	r5, r0
 800a484:	9b07      	ldr	r3, [sp, #28]
 800a486:	4621      	mov	r1, r4
 800a488:	3b01      	subs	r3, #1
 800a48a:	4648      	mov	r0, r9
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	f7ff fa99 	bl	80099c4 <quorem>
 800a492:	4639      	mov	r1, r7
 800a494:	9002      	str	r0, [sp, #8]
 800a496:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a49a:	4648      	mov	r0, r9
 800a49c:	f001 faea 	bl	800ba74 <__mcmp>
 800a4a0:	462a      	mov	r2, r5
 800a4a2:	9008      	str	r0, [sp, #32]
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4658      	mov	r0, fp
 800a4a8:	f001 fb00 	bl	800baac <__mdiff>
 800a4ac:	68c2      	ldr	r2, [r0, #12]
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	bb02      	cbnz	r2, 800a4f4 <_dtoa_r+0xa1c>
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	4648      	mov	r0, r9
 800a4b6:	f001 fadd 	bl	800ba74 <__mcmp>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	4631      	mov	r1, r6
 800a4be:	4658      	mov	r0, fp
 800a4c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4c2:	f001 f853 	bl	800b56c <_Bfree>
 800a4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4ca:	9e07      	ldr	r6, [sp, #28]
 800a4cc:	ea43 0102 	orr.w	r1, r3, r2
 800a4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d2:	4319      	orrs	r1, r3
 800a4d4:	d110      	bne.n	800a4f8 <_dtoa_r+0xa20>
 800a4d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a4da:	d029      	beq.n	800a530 <_dtoa_r+0xa58>
 800a4dc:	9b08      	ldr	r3, [sp, #32]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	dd02      	ble.n	800a4e8 <_dtoa_r+0xa10>
 800a4e2:	9b02      	ldr	r3, [sp, #8]
 800a4e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a4e8:	9b00      	ldr	r3, [sp, #0]
 800a4ea:	f883 8000 	strb.w	r8, [r3]
 800a4ee:	e63f      	b.n	800a170 <_dtoa_r+0x698>
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	e7bb      	b.n	800a46c <_dtoa_r+0x994>
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	e7e1      	b.n	800a4bc <_dtoa_r+0x9e4>
 800a4f8:	9b08      	ldr	r3, [sp, #32]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	db04      	blt.n	800a508 <_dtoa_r+0xa30>
 800a4fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a500:	430b      	orrs	r3, r1
 800a502:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a504:	430b      	orrs	r3, r1
 800a506:	d120      	bne.n	800a54a <_dtoa_r+0xa72>
 800a508:	2a00      	cmp	r2, #0
 800a50a:	dded      	ble.n	800a4e8 <_dtoa_r+0xa10>
 800a50c:	4649      	mov	r1, r9
 800a50e:	2201      	movs	r2, #1
 800a510:	4658      	mov	r0, fp
 800a512:	f001 fa43 	bl	800b99c <__lshift>
 800a516:	4621      	mov	r1, r4
 800a518:	4681      	mov	r9, r0
 800a51a:	f001 faab 	bl	800ba74 <__mcmp>
 800a51e:	2800      	cmp	r0, #0
 800a520:	dc03      	bgt.n	800a52a <_dtoa_r+0xa52>
 800a522:	d1e1      	bne.n	800a4e8 <_dtoa_r+0xa10>
 800a524:	f018 0f01 	tst.w	r8, #1
 800a528:	d0de      	beq.n	800a4e8 <_dtoa_r+0xa10>
 800a52a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a52e:	d1d8      	bne.n	800a4e2 <_dtoa_r+0xa0a>
 800a530:	9a00      	ldr	r2, [sp, #0]
 800a532:	2339      	movs	r3, #57	@ 0x39
 800a534:	7013      	strb	r3, [r2, #0]
 800a536:	4633      	mov	r3, r6
 800a538:	461e      	mov	r6, r3
 800a53a:	3b01      	subs	r3, #1
 800a53c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a540:	2a39      	cmp	r2, #57	@ 0x39
 800a542:	d052      	beq.n	800a5ea <_dtoa_r+0xb12>
 800a544:	3201      	adds	r2, #1
 800a546:	701a      	strb	r2, [r3, #0]
 800a548:	e612      	b.n	800a170 <_dtoa_r+0x698>
 800a54a:	2a00      	cmp	r2, #0
 800a54c:	dd07      	ble.n	800a55e <_dtoa_r+0xa86>
 800a54e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a552:	d0ed      	beq.n	800a530 <_dtoa_r+0xa58>
 800a554:	9a00      	ldr	r2, [sp, #0]
 800a556:	f108 0301 	add.w	r3, r8, #1
 800a55a:	7013      	strb	r3, [r2, #0]
 800a55c:	e608      	b.n	800a170 <_dtoa_r+0x698>
 800a55e:	9b07      	ldr	r3, [sp, #28]
 800a560:	9a07      	ldr	r2, [sp, #28]
 800a562:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a568:	4293      	cmp	r3, r2
 800a56a:	d028      	beq.n	800a5be <_dtoa_r+0xae6>
 800a56c:	4649      	mov	r1, r9
 800a56e:	2300      	movs	r3, #0
 800a570:	220a      	movs	r2, #10
 800a572:	4658      	mov	r0, fp
 800a574:	f001 f81c 	bl	800b5b0 <__multadd>
 800a578:	42af      	cmp	r7, r5
 800a57a:	4681      	mov	r9, r0
 800a57c:	f04f 0300 	mov.w	r3, #0
 800a580:	f04f 020a 	mov.w	r2, #10
 800a584:	4639      	mov	r1, r7
 800a586:	4658      	mov	r0, fp
 800a588:	d107      	bne.n	800a59a <_dtoa_r+0xac2>
 800a58a:	f001 f811 	bl	800b5b0 <__multadd>
 800a58e:	4607      	mov	r7, r0
 800a590:	4605      	mov	r5, r0
 800a592:	9b07      	ldr	r3, [sp, #28]
 800a594:	3301      	adds	r3, #1
 800a596:	9307      	str	r3, [sp, #28]
 800a598:	e774      	b.n	800a484 <_dtoa_r+0x9ac>
 800a59a:	f001 f809 	bl	800b5b0 <__multadd>
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	220a      	movs	r2, #10
 800a5a6:	4658      	mov	r0, fp
 800a5a8:	f001 f802 	bl	800b5b0 <__multadd>
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	e7f0      	b.n	800a592 <_dtoa_r+0xaba>
 800a5b0:	9b00      	ldr	r3, [sp, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	bfcc      	ite	gt
 800a5b6:	461e      	movgt	r6, r3
 800a5b8:	2601      	movle	r6, #1
 800a5ba:	4456      	add	r6, sl
 800a5bc:	2700      	movs	r7, #0
 800a5be:	4649      	mov	r1, r9
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	4658      	mov	r0, fp
 800a5c4:	f001 f9ea 	bl	800b99c <__lshift>
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	4681      	mov	r9, r0
 800a5cc:	f001 fa52 	bl	800ba74 <__mcmp>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	dcb0      	bgt.n	800a536 <_dtoa_r+0xa5e>
 800a5d4:	d102      	bne.n	800a5dc <_dtoa_r+0xb04>
 800a5d6:	f018 0f01 	tst.w	r8, #1
 800a5da:	d1ac      	bne.n	800a536 <_dtoa_r+0xa5e>
 800a5dc:	4633      	mov	r3, r6
 800a5de:	461e      	mov	r6, r3
 800a5e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5e4:	2a30      	cmp	r2, #48	@ 0x30
 800a5e6:	d0fa      	beq.n	800a5de <_dtoa_r+0xb06>
 800a5e8:	e5c2      	b.n	800a170 <_dtoa_r+0x698>
 800a5ea:	459a      	cmp	sl, r3
 800a5ec:	d1a4      	bne.n	800a538 <_dtoa_r+0xa60>
 800a5ee:	9b04      	ldr	r3, [sp, #16]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	9304      	str	r3, [sp, #16]
 800a5f4:	2331      	movs	r3, #49	@ 0x31
 800a5f6:	f88a 3000 	strb.w	r3, [sl]
 800a5fa:	e5b9      	b.n	800a170 <_dtoa_r+0x698>
 800a5fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a65c <_dtoa_r+0xb84>
 800a602:	b11b      	cbz	r3, 800a60c <_dtoa_r+0xb34>
 800a604:	f10a 0308 	add.w	r3, sl, #8
 800a608:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	4650      	mov	r0, sl
 800a60e:	b019      	add	sp, #100	@ 0x64
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a616:	2b01      	cmp	r3, #1
 800a618:	f77f ae37 	ble.w	800a28a <_dtoa_r+0x7b2>
 800a61c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a620:	2001      	movs	r0, #1
 800a622:	e655      	b.n	800a2d0 <_dtoa_r+0x7f8>
 800a624:	9b00      	ldr	r3, [sp, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	f77f aed6 	ble.w	800a3d8 <_dtoa_r+0x900>
 800a62c:	4656      	mov	r6, sl
 800a62e:	4621      	mov	r1, r4
 800a630:	4648      	mov	r0, r9
 800a632:	f7ff f9c7 	bl	80099c4 <quorem>
 800a636:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a63a:	f806 8b01 	strb.w	r8, [r6], #1
 800a63e:	9b00      	ldr	r3, [sp, #0]
 800a640:	eba6 020a 	sub.w	r2, r6, sl
 800a644:	4293      	cmp	r3, r2
 800a646:	ddb3      	ble.n	800a5b0 <_dtoa_r+0xad8>
 800a648:	4649      	mov	r1, r9
 800a64a:	2300      	movs	r3, #0
 800a64c:	220a      	movs	r2, #10
 800a64e:	4658      	mov	r0, fp
 800a650:	f000 ffae 	bl	800b5b0 <__multadd>
 800a654:	4681      	mov	r9, r0
 800a656:	e7ea      	b.n	800a62e <_dtoa_r+0xb56>
 800a658:	0800c805 	.word	0x0800c805
 800a65c:	0800c789 	.word	0x0800c789

0800a660 <rshift>:
 800a660:	6903      	ldr	r3, [r0, #16]
 800a662:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a666:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a66a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a66e:	f100 0414 	add.w	r4, r0, #20
 800a672:	dd45      	ble.n	800a700 <rshift+0xa0>
 800a674:	f011 011f 	ands.w	r1, r1, #31
 800a678:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a67c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a680:	d10c      	bne.n	800a69c <rshift+0x3c>
 800a682:	f100 0710 	add.w	r7, r0, #16
 800a686:	4629      	mov	r1, r5
 800a688:	42b1      	cmp	r1, r6
 800a68a:	d334      	bcc.n	800a6f6 <rshift+0x96>
 800a68c:	1a9b      	subs	r3, r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	1eea      	subs	r2, r5, #3
 800a692:	4296      	cmp	r6, r2
 800a694:	bf38      	it	cc
 800a696:	2300      	movcc	r3, #0
 800a698:	4423      	add	r3, r4
 800a69a:	e015      	b.n	800a6c8 <rshift+0x68>
 800a69c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6a0:	f1c1 0820 	rsb	r8, r1, #32
 800a6a4:	40cf      	lsrs	r7, r1
 800a6a6:	f105 0e04 	add.w	lr, r5, #4
 800a6aa:	46a1      	mov	r9, r4
 800a6ac:	4576      	cmp	r6, lr
 800a6ae:	46f4      	mov	ip, lr
 800a6b0:	d815      	bhi.n	800a6de <rshift+0x7e>
 800a6b2:	1a9a      	subs	r2, r3, r2
 800a6b4:	0092      	lsls	r2, r2, #2
 800a6b6:	3a04      	subs	r2, #4
 800a6b8:	3501      	adds	r5, #1
 800a6ba:	42ae      	cmp	r6, r5
 800a6bc:	bf38      	it	cc
 800a6be:	2200      	movcc	r2, #0
 800a6c0:	18a3      	adds	r3, r4, r2
 800a6c2:	50a7      	str	r7, [r4, r2]
 800a6c4:	b107      	cbz	r7, 800a6c8 <rshift+0x68>
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	1b1a      	subs	r2, r3, r4
 800a6ca:	42a3      	cmp	r3, r4
 800a6cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6d0:	bf08      	it	eq
 800a6d2:	2300      	moveq	r3, #0
 800a6d4:	6102      	str	r2, [r0, #16]
 800a6d6:	bf08      	it	eq
 800a6d8:	6143      	streq	r3, [r0, #20]
 800a6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6de:	f8dc c000 	ldr.w	ip, [ip]
 800a6e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6e6:	ea4c 0707 	orr.w	r7, ip, r7
 800a6ea:	f849 7b04 	str.w	r7, [r9], #4
 800a6ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6f2:	40cf      	lsrs	r7, r1
 800a6f4:	e7da      	b.n	800a6ac <rshift+0x4c>
 800a6f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800a6fe:	e7c3      	b.n	800a688 <rshift+0x28>
 800a700:	4623      	mov	r3, r4
 800a702:	e7e1      	b.n	800a6c8 <rshift+0x68>

0800a704 <__hexdig_fun>:
 800a704:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a708:	2b09      	cmp	r3, #9
 800a70a:	d802      	bhi.n	800a712 <__hexdig_fun+0xe>
 800a70c:	3820      	subs	r0, #32
 800a70e:	b2c0      	uxtb	r0, r0
 800a710:	4770      	bx	lr
 800a712:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a716:	2b05      	cmp	r3, #5
 800a718:	d801      	bhi.n	800a71e <__hexdig_fun+0x1a>
 800a71a:	3847      	subs	r0, #71	@ 0x47
 800a71c:	e7f7      	b.n	800a70e <__hexdig_fun+0xa>
 800a71e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a722:	2b05      	cmp	r3, #5
 800a724:	d801      	bhi.n	800a72a <__hexdig_fun+0x26>
 800a726:	3827      	subs	r0, #39	@ 0x27
 800a728:	e7f1      	b.n	800a70e <__hexdig_fun+0xa>
 800a72a:	2000      	movs	r0, #0
 800a72c:	4770      	bx	lr
	...

0800a730 <__gethex>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	b085      	sub	sp, #20
 800a736:	468a      	mov	sl, r1
 800a738:	9302      	str	r3, [sp, #8]
 800a73a:	680b      	ldr	r3, [r1, #0]
 800a73c:	9001      	str	r0, [sp, #4]
 800a73e:	4690      	mov	r8, r2
 800a740:	1c9c      	adds	r4, r3, #2
 800a742:	46a1      	mov	r9, r4
 800a744:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a748:	2830      	cmp	r0, #48	@ 0x30
 800a74a:	d0fa      	beq.n	800a742 <__gethex+0x12>
 800a74c:	eba9 0303 	sub.w	r3, r9, r3
 800a750:	f1a3 0b02 	sub.w	fp, r3, #2
 800a754:	f7ff ffd6 	bl	800a704 <__hexdig_fun>
 800a758:	4605      	mov	r5, r0
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d168      	bne.n	800a830 <__gethex+0x100>
 800a75e:	49a0      	ldr	r1, [pc, #640]	@ (800a9e0 <__gethex+0x2b0>)
 800a760:	2201      	movs	r2, #1
 800a762:	4648      	mov	r0, r9
 800a764:	f7ff f8c4 	bl	80098f0 <strncmp>
 800a768:	4607      	mov	r7, r0
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d167      	bne.n	800a83e <__gethex+0x10e>
 800a76e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a772:	4626      	mov	r6, r4
 800a774:	f7ff ffc6 	bl	800a704 <__hexdig_fun>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d062      	beq.n	800a842 <__gethex+0x112>
 800a77c:	4623      	mov	r3, r4
 800a77e:	7818      	ldrb	r0, [r3, #0]
 800a780:	2830      	cmp	r0, #48	@ 0x30
 800a782:	4699      	mov	r9, r3
 800a784:	f103 0301 	add.w	r3, r3, #1
 800a788:	d0f9      	beq.n	800a77e <__gethex+0x4e>
 800a78a:	f7ff ffbb 	bl	800a704 <__hexdig_fun>
 800a78e:	fab0 f580 	clz	r5, r0
 800a792:	096d      	lsrs	r5, r5, #5
 800a794:	f04f 0b01 	mov.w	fp, #1
 800a798:	464a      	mov	r2, r9
 800a79a:	4616      	mov	r6, r2
 800a79c:	3201      	adds	r2, #1
 800a79e:	7830      	ldrb	r0, [r6, #0]
 800a7a0:	f7ff ffb0 	bl	800a704 <__hexdig_fun>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d1f8      	bne.n	800a79a <__gethex+0x6a>
 800a7a8:	498d      	ldr	r1, [pc, #564]	@ (800a9e0 <__gethex+0x2b0>)
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f7ff f89f 	bl	80098f0 <strncmp>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d13f      	bne.n	800a836 <__gethex+0x106>
 800a7b6:	b944      	cbnz	r4, 800a7ca <__gethex+0x9a>
 800a7b8:	1c74      	adds	r4, r6, #1
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	4616      	mov	r6, r2
 800a7be:	3201      	adds	r2, #1
 800a7c0:	7830      	ldrb	r0, [r6, #0]
 800a7c2:	f7ff ff9f 	bl	800a704 <__hexdig_fun>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d1f8      	bne.n	800a7bc <__gethex+0x8c>
 800a7ca:	1ba4      	subs	r4, r4, r6
 800a7cc:	00a7      	lsls	r7, r4, #2
 800a7ce:	7833      	ldrb	r3, [r6, #0]
 800a7d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a7d4:	2b50      	cmp	r3, #80	@ 0x50
 800a7d6:	d13e      	bne.n	800a856 <__gethex+0x126>
 800a7d8:	7873      	ldrb	r3, [r6, #1]
 800a7da:	2b2b      	cmp	r3, #43	@ 0x2b
 800a7dc:	d033      	beq.n	800a846 <__gethex+0x116>
 800a7de:	2b2d      	cmp	r3, #45	@ 0x2d
 800a7e0:	d034      	beq.n	800a84c <__gethex+0x11c>
 800a7e2:	1c71      	adds	r1, r6, #1
 800a7e4:	2400      	movs	r4, #0
 800a7e6:	7808      	ldrb	r0, [r1, #0]
 800a7e8:	f7ff ff8c 	bl	800a704 <__hexdig_fun>
 800a7ec:	1e43      	subs	r3, r0, #1
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b18      	cmp	r3, #24
 800a7f2:	d830      	bhi.n	800a856 <__gethex+0x126>
 800a7f4:	f1a0 0210 	sub.w	r2, r0, #16
 800a7f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a7fc:	f7ff ff82 	bl	800a704 <__hexdig_fun>
 800a800:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a804:	fa5f fc8c 	uxtb.w	ip, ip
 800a808:	f1bc 0f18 	cmp.w	ip, #24
 800a80c:	f04f 030a 	mov.w	r3, #10
 800a810:	d91e      	bls.n	800a850 <__gethex+0x120>
 800a812:	b104      	cbz	r4, 800a816 <__gethex+0xe6>
 800a814:	4252      	negs	r2, r2
 800a816:	4417      	add	r7, r2
 800a818:	f8ca 1000 	str.w	r1, [sl]
 800a81c:	b1ed      	cbz	r5, 800a85a <__gethex+0x12a>
 800a81e:	f1bb 0f00 	cmp.w	fp, #0
 800a822:	bf0c      	ite	eq
 800a824:	2506      	moveq	r5, #6
 800a826:	2500      	movne	r5, #0
 800a828:	4628      	mov	r0, r5
 800a82a:	b005      	add	sp, #20
 800a82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a830:	2500      	movs	r5, #0
 800a832:	462c      	mov	r4, r5
 800a834:	e7b0      	b.n	800a798 <__gethex+0x68>
 800a836:	2c00      	cmp	r4, #0
 800a838:	d1c7      	bne.n	800a7ca <__gethex+0x9a>
 800a83a:	4627      	mov	r7, r4
 800a83c:	e7c7      	b.n	800a7ce <__gethex+0x9e>
 800a83e:	464e      	mov	r6, r9
 800a840:	462f      	mov	r7, r5
 800a842:	2501      	movs	r5, #1
 800a844:	e7c3      	b.n	800a7ce <__gethex+0x9e>
 800a846:	2400      	movs	r4, #0
 800a848:	1cb1      	adds	r1, r6, #2
 800a84a:	e7cc      	b.n	800a7e6 <__gethex+0xb6>
 800a84c:	2401      	movs	r4, #1
 800a84e:	e7fb      	b.n	800a848 <__gethex+0x118>
 800a850:	fb03 0002 	mla	r0, r3, r2, r0
 800a854:	e7ce      	b.n	800a7f4 <__gethex+0xc4>
 800a856:	4631      	mov	r1, r6
 800a858:	e7de      	b.n	800a818 <__gethex+0xe8>
 800a85a:	eba6 0309 	sub.w	r3, r6, r9
 800a85e:	3b01      	subs	r3, #1
 800a860:	4629      	mov	r1, r5
 800a862:	2b07      	cmp	r3, #7
 800a864:	dc0a      	bgt.n	800a87c <__gethex+0x14c>
 800a866:	9801      	ldr	r0, [sp, #4]
 800a868:	f000 fe40 	bl	800b4ec <_Balloc>
 800a86c:	4604      	mov	r4, r0
 800a86e:	b940      	cbnz	r0, 800a882 <__gethex+0x152>
 800a870:	4b5c      	ldr	r3, [pc, #368]	@ (800a9e4 <__gethex+0x2b4>)
 800a872:	4602      	mov	r2, r0
 800a874:	21e4      	movs	r1, #228	@ 0xe4
 800a876:	485c      	ldr	r0, [pc, #368]	@ (800a9e8 <__gethex+0x2b8>)
 800a878:	f001 fcf2 	bl	800c260 <__assert_func>
 800a87c:	3101      	adds	r1, #1
 800a87e:	105b      	asrs	r3, r3, #1
 800a880:	e7ef      	b.n	800a862 <__gethex+0x132>
 800a882:	f100 0a14 	add.w	sl, r0, #20
 800a886:	2300      	movs	r3, #0
 800a888:	4655      	mov	r5, sl
 800a88a:	469b      	mov	fp, r3
 800a88c:	45b1      	cmp	r9, r6
 800a88e:	d337      	bcc.n	800a900 <__gethex+0x1d0>
 800a890:	f845 bb04 	str.w	fp, [r5], #4
 800a894:	eba5 050a 	sub.w	r5, r5, sl
 800a898:	10ad      	asrs	r5, r5, #2
 800a89a:	6125      	str	r5, [r4, #16]
 800a89c:	4658      	mov	r0, fp
 800a89e:	f000 ff17 	bl	800b6d0 <__hi0bits>
 800a8a2:	016d      	lsls	r5, r5, #5
 800a8a4:	f8d8 6000 	ldr.w	r6, [r8]
 800a8a8:	1a2d      	subs	r5, r5, r0
 800a8aa:	42b5      	cmp	r5, r6
 800a8ac:	dd54      	ble.n	800a958 <__gethex+0x228>
 800a8ae:	1bad      	subs	r5, r5, r6
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f001 faab 	bl	800be0e <__any_on>
 800a8b8:	4681      	mov	r9, r0
 800a8ba:	b178      	cbz	r0, 800a8dc <__gethex+0x1ac>
 800a8bc:	1e6b      	subs	r3, r5, #1
 800a8be:	1159      	asrs	r1, r3, #5
 800a8c0:	f003 021f 	and.w	r2, r3, #31
 800a8c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a8c8:	f04f 0901 	mov.w	r9, #1
 800a8cc:	fa09 f202 	lsl.w	r2, r9, r2
 800a8d0:	420a      	tst	r2, r1
 800a8d2:	d003      	beq.n	800a8dc <__gethex+0x1ac>
 800a8d4:	454b      	cmp	r3, r9
 800a8d6:	dc36      	bgt.n	800a946 <__gethex+0x216>
 800a8d8:	f04f 0902 	mov.w	r9, #2
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f7ff febe 	bl	800a660 <rshift>
 800a8e4:	442f      	add	r7, r5
 800a8e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8ea:	42bb      	cmp	r3, r7
 800a8ec:	da42      	bge.n	800a974 <__gethex+0x244>
 800a8ee:	9801      	ldr	r0, [sp, #4]
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	f000 fe3b 	bl	800b56c <_Bfree>
 800a8f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	25a3      	movs	r5, #163	@ 0xa3
 800a8fe:	e793      	b.n	800a828 <__gethex+0xf8>
 800a900:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a904:	2a2e      	cmp	r2, #46	@ 0x2e
 800a906:	d012      	beq.n	800a92e <__gethex+0x1fe>
 800a908:	2b20      	cmp	r3, #32
 800a90a:	d104      	bne.n	800a916 <__gethex+0x1e6>
 800a90c:	f845 bb04 	str.w	fp, [r5], #4
 800a910:	f04f 0b00 	mov.w	fp, #0
 800a914:	465b      	mov	r3, fp
 800a916:	7830      	ldrb	r0, [r6, #0]
 800a918:	9303      	str	r3, [sp, #12]
 800a91a:	f7ff fef3 	bl	800a704 <__hexdig_fun>
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	f000 000f 	and.w	r0, r0, #15
 800a924:	4098      	lsls	r0, r3
 800a926:	ea4b 0b00 	orr.w	fp, fp, r0
 800a92a:	3304      	adds	r3, #4
 800a92c:	e7ae      	b.n	800a88c <__gethex+0x15c>
 800a92e:	45b1      	cmp	r9, r6
 800a930:	d8ea      	bhi.n	800a908 <__gethex+0x1d8>
 800a932:	492b      	ldr	r1, [pc, #172]	@ (800a9e0 <__gethex+0x2b0>)
 800a934:	9303      	str	r3, [sp, #12]
 800a936:	2201      	movs	r2, #1
 800a938:	4630      	mov	r0, r6
 800a93a:	f7fe ffd9 	bl	80098f0 <strncmp>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	2800      	cmp	r0, #0
 800a942:	d1e1      	bne.n	800a908 <__gethex+0x1d8>
 800a944:	e7a2      	b.n	800a88c <__gethex+0x15c>
 800a946:	1ea9      	subs	r1, r5, #2
 800a948:	4620      	mov	r0, r4
 800a94a:	f001 fa60 	bl	800be0e <__any_on>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d0c2      	beq.n	800a8d8 <__gethex+0x1a8>
 800a952:	f04f 0903 	mov.w	r9, #3
 800a956:	e7c1      	b.n	800a8dc <__gethex+0x1ac>
 800a958:	da09      	bge.n	800a96e <__gethex+0x23e>
 800a95a:	1b75      	subs	r5, r6, r5
 800a95c:	4621      	mov	r1, r4
 800a95e:	9801      	ldr	r0, [sp, #4]
 800a960:	462a      	mov	r2, r5
 800a962:	f001 f81b 	bl	800b99c <__lshift>
 800a966:	1b7f      	subs	r7, r7, r5
 800a968:	4604      	mov	r4, r0
 800a96a:	f100 0a14 	add.w	sl, r0, #20
 800a96e:	f04f 0900 	mov.w	r9, #0
 800a972:	e7b8      	b.n	800a8e6 <__gethex+0x1b6>
 800a974:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a978:	42bd      	cmp	r5, r7
 800a97a:	dd6f      	ble.n	800aa5c <__gethex+0x32c>
 800a97c:	1bed      	subs	r5, r5, r7
 800a97e:	42ae      	cmp	r6, r5
 800a980:	dc34      	bgt.n	800a9ec <__gethex+0x2bc>
 800a982:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d022      	beq.n	800a9d0 <__gethex+0x2a0>
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d024      	beq.n	800a9d8 <__gethex+0x2a8>
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d115      	bne.n	800a9be <__gethex+0x28e>
 800a992:	42ae      	cmp	r6, r5
 800a994:	d113      	bne.n	800a9be <__gethex+0x28e>
 800a996:	2e01      	cmp	r6, #1
 800a998:	d10b      	bne.n	800a9b2 <__gethex+0x282>
 800a99a:	9a02      	ldr	r2, [sp, #8]
 800a99c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	f8ca 3000 	str.w	r3, [sl]
 800a9aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ac:	2562      	movs	r5, #98	@ 0x62
 800a9ae:	601c      	str	r4, [r3, #0]
 800a9b0:	e73a      	b.n	800a828 <__gethex+0xf8>
 800a9b2:	1e71      	subs	r1, r6, #1
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f001 fa2a 	bl	800be0e <__any_on>
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	d1ed      	bne.n	800a99a <__gethex+0x26a>
 800a9be:	9801      	ldr	r0, [sp, #4]
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	f000 fdd3 	bl	800b56c <_Bfree>
 800a9c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	2550      	movs	r5, #80	@ 0x50
 800a9ce:	e72b      	b.n	800a828 <__gethex+0xf8>
 800a9d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1f3      	bne.n	800a9be <__gethex+0x28e>
 800a9d6:	e7e0      	b.n	800a99a <__gethex+0x26a>
 800a9d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1dd      	bne.n	800a99a <__gethex+0x26a>
 800a9de:	e7ee      	b.n	800a9be <__gethex+0x28e>
 800a9e0:	0800c62d 	.word	0x0800c62d
 800a9e4:	0800c805 	.word	0x0800c805
 800a9e8:	0800c816 	.word	0x0800c816
 800a9ec:	1e6f      	subs	r7, r5, #1
 800a9ee:	f1b9 0f00 	cmp.w	r9, #0
 800a9f2:	d130      	bne.n	800aa56 <__gethex+0x326>
 800a9f4:	b127      	cbz	r7, 800aa00 <__gethex+0x2d0>
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f001 fa08 	bl	800be0e <__any_on>
 800a9fe:	4681      	mov	r9, r0
 800aa00:	117a      	asrs	r2, r7, #5
 800aa02:	2301      	movs	r3, #1
 800aa04:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aa08:	f007 071f 	and.w	r7, r7, #31
 800aa0c:	40bb      	lsls	r3, r7
 800aa0e:	4213      	tst	r3, r2
 800aa10:	4629      	mov	r1, r5
 800aa12:	4620      	mov	r0, r4
 800aa14:	bf18      	it	ne
 800aa16:	f049 0902 	orrne.w	r9, r9, #2
 800aa1a:	f7ff fe21 	bl	800a660 <rshift>
 800aa1e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aa22:	1b76      	subs	r6, r6, r5
 800aa24:	2502      	movs	r5, #2
 800aa26:	f1b9 0f00 	cmp.w	r9, #0
 800aa2a:	d047      	beq.n	800aabc <__gethex+0x38c>
 800aa2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d015      	beq.n	800aa60 <__gethex+0x330>
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d017      	beq.n	800aa68 <__gethex+0x338>
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d109      	bne.n	800aa50 <__gethex+0x320>
 800aa3c:	f019 0f02 	tst.w	r9, #2
 800aa40:	d006      	beq.n	800aa50 <__gethex+0x320>
 800aa42:	f8da 3000 	ldr.w	r3, [sl]
 800aa46:	ea49 0903 	orr.w	r9, r9, r3
 800aa4a:	f019 0f01 	tst.w	r9, #1
 800aa4e:	d10e      	bne.n	800aa6e <__gethex+0x33e>
 800aa50:	f045 0510 	orr.w	r5, r5, #16
 800aa54:	e032      	b.n	800aabc <__gethex+0x38c>
 800aa56:	f04f 0901 	mov.w	r9, #1
 800aa5a:	e7d1      	b.n	800aa00 <__gethex+0x2d0>
 800aa5c:	2501      	movs	r5, #1
 800aa5e:	e7e2      	b.n	800aa26 <__gethex+0x2f6>
 800aa60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa62:	f1c3 0301 	rsb	r3, r3, #1
 800aa66:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d0f0      	beq.n	800aa50 <__gethex+0x320>
 800aa6e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aa72:	f104 0314 	add.w	r3, r4, #20
 800aa76:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aa7a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aa7e:	f04f 0c00 	mov.w	ip, #0
 800aa82:	4618      	mov	r0, r3
 800aa84:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa88:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800aa8c:	d01b      	beq.n	800aac6 <__gethex+0x396>
 800aa8e:	3201      	adds	r2, #1
 800aa90:	6002      	str	r2, [r0, #0]
 800aa92:	2d02      	cmp	r5, #2
 800aa94:	f104 0314 	add.w	r3, r4, #20
 800aa98:	d13c      	bne.n	800ab14 <__gethex+0x3e4>
 800aa9a:	f8d8 2000 	ldr.w	r2, [r8]
 800aa9e:	3a01      	subs	r2, #1
 800aaa0:	42b2      	cmp	r2, r6
 800aaa2:	d109      	bne.n	800aab8 <__gethex+0x388>
 800aaa4:	1171      	asrs	r1, r6, #5
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaac:	f006 061f 	and.w	r6, r6, #31
 800aab0:	fa02 f606 	lsl.w	r6, r2, r6
 800aab4:	421e      	tst	r6, r3
 800aab6:	d13a      	bne.n	800ab2e <__gethex+0x3fe>
 800aab8:	f045 0520 	orr.w	r5, r5, #32
 800aabc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aabe:	601c      	str	r4, [r3, #0]
 800aac0:	9b02      	ldr	r3, [sp, #8]
 800aac2:	601f      	str	r7, [r3, #0]
 800aac4:	e6b0      	b.n	800a828 <__gethex+0xf8>
 800aac6:	4299      	cmp	r1, r3
 800aac8:	f843 cc04 	str.w	ip, [r3, #-4]
 800aacc:	d8d9      	bhi.n	800aa82 <__gethex+0x352>
 800aace:	68a3      	ldr	r3, [r4, #8]
 800aad0:	459b      	cmp	fp, r3
 800aad2:	db17      	blt.n	800ab04 <__gethex+0x3d4>
 800aad4:	6861      	ldr	r1, [r4, #4]
 800aad6:	9801      	ldr	r0, [sp, #4]
 800aad8:	3101      	adds	r1, #1
 800aada:	f000 fd07 	bl	800b4ec <_Balloc>
 800aade:	4681      	mov	r9, r0
 800aae0:	b918      	cbnz	r0, 800aaea <__gethex+0x3ba>
 800aae2:	4b1a      	ldr	r3, [pc, #104]	@ (800ab4c <__gethex+0x41c>)
 800aae4:	4602      	mov	r2, r0
 800aae6:	2184      	movs	r1, #132	@ 0x84
 800aae8:	e6c5      	b.n	800a876 <__gethex+0x146>
 800aaea:	6922      	ldr	r2, [r4, #16]
 800aaec:	3202      	adds	r2, #2
 800aaee:	f104 010c 	add.w	r1, r4, #12
 800aaf2:	0092      	lsls	r2, r2, #2
 800aaf4:	300c      	adds	r0, #12
 800aaf6:	f7fe ff46 	bl	8009986 <memcpy>
 800aafa:	4621      	mov	r1, r4
 800aafc:	9801      	ldr	r0, [sp, #4]
 800aafe:	f000 fd35 	bl	800b56c <_Bfree>
 800ab02:	464c      	mov	r4, r9
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab0c:	6122      	str	r2, [r4, #16]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	615a      	str	r2, [r3, #20]
 800ab12:	e7be      	b.n	800aa92 <__gethex+0x362>
 800ab14:	6922      	ldr	r2, [r4, #16]
 800ab16:	455a      	cmp	r2, fp
 800ab18:	dd0b      	ble.n	800ab32 <__gethex+0x402>
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f7ff fd9f 	bl	800a660 <rshift>
 800ab22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab26:	3701      	adds	r7, #1
 800ab28:	42bb      	cmp	r3, r7
 800ab2a:	f6ff aee0 	blt.w	800a8ee <__gethex+0x1be>
 800ab2e:	2501      	movs	r5, #1
 800ab30:	e7c2      	b.n	800aab8 <__gethex+0x388>
 800ab32:	f016 061f 	ands.w	r6, r6, #31
 800ab36:	d0fa      	beq.n	800ab2e <__gethex+0x3fe>
 800ab38:	4453      	add	r3, sl
 800ab3a:	f1c6 0620 	rsb	r6, r6, #32
 800ab3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab42:	f000 fdc5 	bl	800b6d0 <__hi0bits>
 800ab46:	42b0      	cmp	r0, r6
 800ab48:	dbe7      	blt.n	800ab1a <__gethex+0x3ea>
 800ab4a:	e7f0      	b.n	800ab2e <__gethex+0x3fe>
 800ab4c:	0800c805 	.word	0x0800c805

0800ab50 <L_shift>:
 800ab50:	f1c2 0208 	rsb	r2, r2, #8
 800ab54:	0092      	lsls	r2, r2, #2
 800ab56:	b570      	push	{r4, r5, r6, lr}
 800ab58:	f1c2 0620 	rsb	r6, r2, #32
 800ab5c:	6843      	ldr	r3, [r0, #4]
 800ab5e:	6804      	ldr	r4, [r0, #0]
 800ab60:	fa03 f506 	lsl.w	r5, r3, r6
 800ab64:	432c      	orrs	r4, r5
 800ab66:	40d3      	lsrs	r3, r2
 800ab68:	6004      	str	r4, [r0, #0]
 800ab6a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab6e:	4288      	cmp	r0, r1
 800ab70:	d3f4      	bcc.n	800ab5c <L_shift+0xc>
 800ab72:	bd70      	pop	{r4, r5, r6, pc}

0800ab74 <__match>:
 800ab74:	b530      	push	{r4, r5, lr}
 800ab76:	6803      	ldr	r3, [r0, #0]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab7e:	b914      	cbnz	r4, 800ab86 <__match+0x12>
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	2001      	movs	r0, #1
 800ab84:	bd30      	pop	{r4, r5, pc}
 800ab86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ab8e:	2d19      	cmp	r5, #25
 800ab90:	bf98      	it	ls
 800ab92:	3220      	addls	r2, #32
 800ab94:	42a2      	cmp	r2, r4
 800ab96:	d0f0      	beq.n	800ab7a <__match+0x6>
 800ab98:	2000      	movs	r0, #0
 800ab9a:	e7f3      	b.n	800ab84 <__match+0x10>

0800ab9c <__hexnan>:
 800ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	680b      	ldr	r3, [r1, #0]
 800aba2:	6801      	ldr	r1, [r0, #0]
 800aba4:	115e      	asrs	r6, r3, #5
 800aba6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800abaa:	f013 031f 	ands.w	r3, r3, #31
 800abae:	b087      	sub	sp, #28
 800abb0:	bf18      	it	ne
 800abb2:	3604      	addne	r6, #4
 800abb4:	2500      	movs	r5, #0
 800abb6:	1f37      	subs	r7, r6, #4
 800abb8:	4682      	mov	sl, r0
 800abba:	4690      	mov	r8, r2
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	f846 5c04 	str.w	r5, [r6, #-4]
 800abc2:	46b9      	mov	r9, r7
 800abc4:	463c      	mov	r4, r7
 800abc6:	9502      	str	r5, [sp, #8]
 800abc8:	46ab      	mov	fp, r5
 800abca:	784a      	ldrb	r2, [r1, #1]
 800abcc:	1c4b      	adds	r3, r1, #1
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	b342      	cbz	r2, 800ac24 <__hexnan+0x88>
 800abd2:	4610      	mov	r0, r2
 800abd4:	9105      	str	r1, [sp, #20]
 800abd6:	9204      	str	r2, [sp, #16]
 800abd8:	f7ff fd94 	bl	800a704 <__hexdig_fun>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d151      	bne.n	800ac84 <__hexnan+0xe8>
 800abe0:	9a04      	ldr	r2, [sp, #16]
 800abe2:	9905      	ldr	r1, [sp, #20]
 800abe4:	2a20      	cmp	r2, #32
 800abe6:	d818      	bhi.n	800ac1a <__hexnan+0x7e>
 800abe8:	9b02      	ldr	r3, [sp, #8]
 800abea:	459b      	cmp	fp, r3
 800abec:	dd13      	ble.n	800ac16 <__hexnan+0x7a>
 800abee:	454c      	cmp	r4, r9
 800abf0:	d206      	bcs.n	800ac00 <__hexnan+0x64>
 800abf2:	2d07      	cmp	r5, #7
 800abf4:	dc04      	bgt.n	800ac00 <__hexnan+0x64>
 800abf6:	462a      	mov	r2, r5
 800abf8:	4649      	mov	r1, r9
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7ff ffa8 	bl	800ab50 <L_shift>
 800ac00:	4544      	cmp	r4, r8
 800ac02:	d952      	bls.n	800acaa <__hexnan+0x10e>
 800ac04:	2300      	movs	r3, #0
 800ac06:	f1a4 0904 	sub.w	r9, r4, #4
 800ac0a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac0e:	f8cd b008 	str.w	fp, [sp, #8]
 800ac12:	464c      	mov	r4, r9
 800ac14:	461d      	mov	r5, r3
 800ac16:	9903      	ldr	r1, [sp, #12]
 800ac18:	e7d7      	b.n	800abca <__hexnan+0x2e>
 800ac1a:	2a29      	cmp	r2, #41	@ 0x29
 800ac1c:	d157      	bne.n	800acce <__hexnan+0x132>
 800ac1e:	3102      	adds	r1, #2
 800ac20:	f8ca 1000 	str.w	r1, [sl]
 800ac24:	f1bb 0f00 	cmp.w	fp, #0
 800ac28:	d051      	beq.n	800acce <__hexnan+0x132>
 800ac2a:	454c      	cmp	r4, r9
 800ac2c:	d206      	bcs.n	800ac3c <__hexnan+0xa0>
 800ac2e:	2d07      	cmp	r5, #7
 800ac30:	dc04      	bgt.n	800ac3c <__hexnan+0xa0>
 800ac32:	462a      	mov	r2, r5
 800ac34:	4649      	mov	r1, r9
 800ac36:	4620      	mov	r0, r4
 800ac38:	f7ff ff8a 	bl	800ab50 <L_shift>
 800ac3c:	4544      	cmp	r4, r8
 800ac3e:	d936      	bls.n	800acae <__hexnan+0x112>
 800ac40:	f1a8 0204 	sub.w	r2, r8, #4
 800ac44:	4623      	mov	r3, r4
 800ac46:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac4a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac4e:	429f      	cmp	r7, r3
 800ac50:	d2f9      	bcs.n	800ac46 <__hexnan+0xaa>
 800ac52:	1b3b      	subs	r3, r7, r4
 800ac54:	f023 0303 	bic.w	r3, r3, #3
 800ac58:	3304      	adds	r3, #4
 800ac5a:	3401      	adds	r4, #1
 800ac5c:	3e03      	subs	r6, #3
 800ac5e:	42b4      	cmp	r4, r6
 800ac60:	bf88      	it	hi
 800ac62:	2304      	movhi	r3, #4
 800ac64:	4443      	add	r3, r8
 800ac66:	2200      	movs	r2, #0
 800ac68:	f843 2b04 	str.w	r2, [r3], #4
 800ac6c:	429f      	cmp	r7, r3
 800ac6e:	d2fb      	bcs.n	800ac68 <__hexnan+0xcc>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	b91b      	cbnz	r3, 800ac7c <__hexnan+0xe0>
 800ac74:	4547      	cmp	r7, r8
 800ac76:	d128      	bne.n	800acca <__hexnan+0x12e>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	603b      	str	r3, [r7, #0]
 800ac7c:	2005      	movs	r0, #5
 800ac7e:	b007      	add	sp, #28
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	3501      	adds	r5, #1
 800ac86:	2d08      	cmp	r5, #8
 800ac88:	f10b 0b01 	add.w	fp, fp, #1
 800ac8c:	dd06      	ble.n	800ac9c <__hexnan+0x100>
 800ac8e:	4544      	cmp	r4, r8
 800ac90:	d9c1      	bls.n	800ac16 <__hexnan+0x7a>
 800ac92:	2300      	movs	r3, #0
 800ac94:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac98:	2501      	movs	r5, #1
 800ac9a:	3c04      	subs	r4, #4
 800ac9c:	6822      	ldr	r2, [r4, #0]
 800ac9e:	f000 000f 	and.w	r0, r0, #15
 800aca2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aca6:	6020      	str	r0, [r4, #0]
 800aca8:	e7b5      	b.n	800ac16 <__hexnan+0x7a>
 800acaa:	2508      	movs	r5, #8
 800acac:	e7b3      	b.n	800ac16 <__hexnan+0x7a>
 800acae:	9b01      	ldr	r3, [sp, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d0dd      	beq.n	800ac70 <__hexnan+0xd4>
 800acb4:	f1c3 0320 	rsb	r3, r3, #32
 800acb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acbc:	40da      	lsrs	r2, r3
 800acbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800acc2:	4013      	ands	r3, r2
 800acc4:	f846 3c04 	str.w	r3, [r6, #-4]
 800acc8:	e7d2      	b.n	800ac70 <__hexnan+0xd4>
 800acca:	3f04      	subs	r7, #4
 800accc:	e7d0      	b.n	800ac70 <__hexnan+0xd4>
 800acce:	2004      	movs	r0, #4
 800acd0:	e7d5      	b.n	800ac7e <__hexnan+0xe2>

0800acd2 <__ssputs_r>:
 800acd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd6:	688e      	ldr	r6, [r1, #8]
 800acd8:	461f      	mov	r7, r3
 800acda:	42be      	cmp	r6, r7
 800acdc:	680b      	ldr	r3, [r1, #0]
 800acde:	4682      	mov	sl, r0
 800ace0:	460c      	mov	r4, r1
 800ace2:	4690      	mov	r8, r2
 800ace4:	d82d      	bhi.n	800ad42 <__ssputs_r+0x70>
 800ace6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acea:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acee:	d026      	beq.n	800ad3e <__ssputs_r+0x6c>
 800acf0:	6965      	ldr	r5, [r4, #20]
 800acf2:	6909      	ldr	r1, [r1, #16]
 800acf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf8:	eba3 0901 	sub.w	r9, r3, r1
 800acfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad00:	1c7b      	adds	r3, r7, #1
 800ad02:	444b      	add	r3, r9
 800ad04:	106d      	asrs	r5, r5, #1
 800ad06:	429d      	cmp	r5, r3
 800ad08:	bf38      	it	cc
 800ad0a:	461d      	movcc	r5, r3
 800ad0c:	0553      	lsls	r3, r2, #21
 800ad0e:	d527      	bpl.n	800ad60 <__ssputs_r+0x8e>
 800ad10:	4629      	mov	r1, r5
 800ad12:	f000 faa1 	bl	800b258 <_malloc_r>
 800ad16:	4606      	mov	r6, r0
 800ad18:	b360      	cbz	r0, 800ad74 <__ssputs_r+0xa2>
 800ad1a:	6921      	ldr	r1, [r4, #16]
 800ad1c:	464a      	mov	r2, r9
 800ad1e:	f7fe fe32 	bl	8009986 <memcpy>
 800ad22:	89a3      	ldrh	r3, [r4, #12]
 800ad24:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	6126      	str	r6, [r4, #16]
 800ad30:	6165      	str	r5, [r4, #20]
 800ad32:	444e      	add	r6, r9
 800ad34:	eba5 0509 	sub.w	r5, r5, r9
 800ad38:	6026      	str	r6, [r4, #0]
 800ad3a:	60a5      	str	r5, [r4, #8]
 800ad3c:	463e      	mov	r6, r7
 800ad3e:	42be      	cmp	r6, r7
 800ad40:	d900      	bls.n	800ad44 <__ssputs_r+0x72>
 800ad42:	463e      	mov	r6, r7
 800ad44:	6820      	ldr	r0, [r4, #0]
 800ad46:	4632      	mov	r2, r6
 800ad48:	4641      	mov	r1, r8
 800ad4a:	f001 f9f6 	bl	800c13a <memmove>
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	1b9b      	subs	r3, r3, r6
 800ad52:	60a3      	str	r3, [r4, #8]
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	4433      	add	r3, r6
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad60:	462a      	mov	r2, r5
 800ad62:	f001 f8b8 	bl	800bed6 <_realloc_r>
 800ad66:	4606      	mov	r6, r0
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d1e0      	bne.n	800ad2e <__ssputs_r+0x5c>
 800ad6c:	6921      	ldr	r1, [r4, #16]
 800ad6e:	4650      	mov	r0, sl
 800ad70:	f001 faa8 	bl	800c2c4 <_free_r>
 800ad74:	230c      	movs	r3, #12
 800ad76:	f8ca 3000 	str.w	r3, [sl]
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad80:	81a3      	strh	r3, [r4, #12]
 800ad82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad86:	e7e9      	b.n	800ad5c <__ssputs_r+0x8a>

0800ad88 <_svfiprintf_r>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	4698      	mov	r8, r3
 800ad8e:	898b      	ldrh	r3, [r1, #12]
 800ad90:	061b      	lsls	r3, r3, #24
 800ad92:	b09d      	sub	sp, #116	@ 0x74
 800ad94:	4607      	mov	r7, r0
 800ad96:	460d      	mov	r5, r1
 800ad98:	4614      	mov	r4, r2
 800ad9a:	d510      	bpl.n	800adbe <_svfiprintf_r+0x36>
 800ad9c:	690b      	ldr	r3, [r1, #16]
 800ad9e:	b973      	cbnz	r3, 800adbe <_svfiprintf_r+0x36>
 800ada0:	2140      	movs	r1, #64	@ 0x40
 800ada2:	f000 fa59 	bl	800b258 <_malloc_r>
 800ada6:	6028      	str	r0, [r5, #0]
 800ada8:	6128      	str	r0, [r5, #16]
 800adaa:	b930      	cbnz	r0, 800adba <_svfiprintf_r+0x32>
 800adac:	230c      	movs	r3, #12
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adb4:	b01d      	add	sp, #116	@ 0x74
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	2340      	movs	r3, #64	@ 0x40
 800adbc:	616b      	str	r3, [r5, #20]
 800adbe:	2300      	movs	r3, #0
 800adc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800adc2:	2320      	movs	r3, #32
 800adc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800adcc:	2330      	movs	r3, #48	@ 0x30
 800adce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af6c <_svfiprintf_r+0x1e4>
 800add2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800add6:	f04f 0901 	mov.w	r9, #1
 800adda:	4623      	mov	r3, r4
 800addc:	469a      	mov	sl, r3
 800adde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ade2:	b10a      	cbz	r2, 800ade8 <_svfiprintf_r+0x60>
 800ade4:	2a25      	cmp	r2, #37	@ 0x25
 800ade6:	d1f9      	bne.n	800addc <_svfiprintf_r+0x54>
 800ade8:	ebba 0b04 	subs.w	fp, sl, r4
 800adec:	d00b      	beq.n	800ae06 <_svfiprintf_r+0x7e>
 800adee:	465b      	mov	r3, fp
 800adf0:	4622      	mov	r2, r4
 800adf2:	4629      	mov	r1, r5
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7ff ff6c 	bl	800acd2 <__ssputs_r>
 800adfa:	3001      	adds	r0, #1
 800adfc:	f000 80a7 	beq.w	800af4e <_svfiprintf_r+0x1c6>
 800ae00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae02:	445a      	add	r2, fp
 800ae04:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae06:	f89a 3000 	ldrb.w	r3, [sl]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 809f 	beq.w	800af4e <_svfiprintf_r+0x1c6>
 800ae10:	2300      	movs	r3, #0
 800ae12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae1a:	f10a 0a01 	add.w	sl, sl, #1
 800ae1e:	9304      	str	r3, [sp, #16]
 800ae20:	9307      	str	r3, [sp, #28]
 800ae22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae26:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae28:	4654      	mov	r4, sl
 800ae2a:	2205      	movs	r2, #5
 800ae2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae30:	484e      	ldr	r0, [pc, #312]	@ (800af6c <_svfiprintf_r+0x1e4>)
 800ae32:	f7f5 f9cd 	bl	80001d0 <memchr>
 800ae36:	9a04      	ldr	r2, [sp, #16]
 800ae38:	b9d8      	cbnz	r0, 800ae72 <_svfiprintf_r+0xea>
 800ae3a:	06d0      	lsls	r0, r2, #27
 800ae3c:	bf44      	itt	mi
 800ae3e:	2320      	movmi	r3, #32
 800ae40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae44:	0711      	lsls	r1, r2, #28
 800ae46:	bf44      	itt	mi
 800ae48:	232b      	movmi	r3, #43	@ 0x2b
 800ae4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae54:	d015      	beq.n	800ae82 <_svfiprintf_r+0xfa>
 800ae56:	9a07      	ldr	r2, [sp, #28]
 800ae58:	4654      	mov	r4, sl
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	f04f 0c0a 	mov.w	ip, #10
 800ae60:	4621      	mov	r1, r4
 800ae62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae66:	3b30      	subs	r3, #48	@ 0x30
 800ae68:	2b09      	cmp	r3, #9
 800ae6a:	d94b      	bls.n	800af04 <_svfiprintf_r+0x17c>
 800ae6c:	b1b0      	cbz	r0, 800ae9c <_svfiprintf_r+0x114>
 800ae6e:	9207      	str	r2, [sp, #28]
 800ae70:	e014      	b.n	800ae9c <_svfiprintf_r+0x114>
 800ae72:	eba0 0308 	sub.w	r3, r0, r8
 800ae76:	fa09 f303 	lsl.w	r3, r9, r3
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	46a2      	mov	sl, r4
 800ae80:	e7d2      	b.n	800ae28 <_svfiprintf_r+0xa0>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	1d19      	adds	r1, r3, #4
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	9103      	str	r1, [sp, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	bfbb      	ittet	lt
 800ae8e:	425b      	neglt	r3, r3
 800ae90:	f042 0202 	orrlt.w	r2, r2, #2
 800ae94:	9307      	strge	r3, [sp, #28]
 800ae96:	9307      	strlt	r3, [sp, #28]
 800ae98:	bfb8      	it	lt
 800ae9a:	9204      	strlt	r2, [sp, #16]
 800ae9c:	7823      	ldrb	r3, [r4, #0]
 800ae9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800aea0:	d10a      	bne.n	800aeb8 <_svfiprintf_r+0x130>
 800aea2:	7863      	ldrb	r3, [r4, #1]
 800aea4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aea6:	d132      	bne.n	800af0e <_svfiprintf_r+0x186>
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	1d1a      	adds	r2, r3, #4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	9203      	str	r2, [sp, #12]
 800aeb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeb4:	3402      	adds	r4, #2
 800aeb6:	9305      	str	r3, [sp, #20]
 800aeb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af7c <_svfiprintf_r+0x1f4>
 800aebc:	7821      	ldrb	r1, [r4, #0]
 800aebe:	2203      	movs	r2, #3
 800aec0:	4650      	mov	r0, sl
 800aec2:	f7f5 f985 	bl	80001d0 <memchr>
 800aec6:	b138      	cbz	r0, 800aed8 <_svfiprintf_r+0x150>
 800aec8:	9b04      	ldr	r3, [sp, #16]
 800aeca:	eba0 000a 	sub.w	r0, r0, sl
 800aece:	2240      	movs	r2, #64	@ 0x40
 800aed0:	4082      	lsls	r2, r0
 800aed2:	4313      	orrs	r3, r2
 800aed4:	3401      	adds	r4, #1
 800aed6:	9304      	str	r3, [sp, #16]
 800aed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aedc:	4824      	ldr	r0, [pc, #144]	@ (800af70 <_svfiprintf_r+0x1e8>)
 800aede:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aee2:	2206      	movs	r2, #6
 800aee4:	f7f5 f974 	bl	80001d0 <memchr>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d036      	beq.n	800af5a <_svfiprintf_r+0x1d2>
 800aeec:	4b21      	ldr	r3, [pc, #132]	@ (800af74 <_svfiprintf_r+0x1ec>)
 800aeee:	bb1b      	cbnz	r3, 800af38 <_svfiprintf_r+0x1b0>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	3307      	adds	r3, #7
 800aef4:	f023 0307 	bic.w	r3, r3, #7
 800aef8:	3308      	adds	r3, #8
 800aefa:	9303      	str	r3, [sp, #12]
 800aefc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aefe:	4433      	add	r3, r6
 800af00:	9309      	str	r3, [sp, #36]	@ 0x24
 800af02:	e76a      	b.n	800adda <_svfiprintf_r+0x52>
 800af04:	fb0c 3202 	mla	r2, ip, r2, r3
 800af08:	460c      	mov	r4, r1
 800af0a:	2001      	movs	r0, #1
 800af0c:	e7a8      	b.n	800ae60 <_svfiprintf_r+0xd8>
 800af0e:	2300      	movs	r3, #0
 800af10:	3401      	adds	r4, #1
 800af12:	9305      	str	r3, [sp, #20]
 800af14:	4619      	mov	r1, r3
 800af16:	f04f 0c0a 	mov.w	ip, #10
 800af1a:	4620      	mov	r0, r4
 800af1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af20:	3a30      	subs	r2, #48	@ 0x30
 800af22:	2a09      	cmp	r2, #9
 800af24:	d903      	bls.n	800af2e <_svfiprintf_r+0x1a6>
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0c6      	beq.n	800aeb8 <_svfiprintf_r+0x130>
 800af2a:	9105      	str	r1, [sp, #20]
 800af2c:	e7c4      	b.n	800aeb8 <_svfiprintf_r+0x130>
 800af2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af32:	4604      	mov	r4, r0
 800af34:	2301      	movs	r3, #1
 800af36:	e7f0      	b.n	800af1a <_svfiprintf_r+0x192>
 800af38:	ab03      	add	r3, sp, #12
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	462a      	mov	r2, r5
 800af3e:	4b0e      	ldr	r3, [pc, #56]	@ (800af78 <_svfiprintf_r+0x1f0>)
 800af40:	a904      	add	r1, sp, #16
 800af42:	4638      	mov	r0, r7
 800af44:	f7fc ff30 	bl	8007da8 <_printf_float>
 800af48:	1c42      	adds	r2, r0, #1
 800af4a:	4606      	mov	r6, r0
 800af4c:	d1d6      	bne.n	800aefc <_svfiprintf_r+0x174>
 800af4e:	89ab      	ldrh	r3, [r5, #12]
 800af50:	065b      	lsls	r3, r3, #25
 800af52:	f53f af2d 	bmi.w	800adb0 <_svfiprintf_r+0x28>
 800af56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af58:	e72c      	b.n	800adb4 <_svfiprintf_r+0x2c>
 800af5a:	ab03      	add	r3, sp, #12
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	462a      	mov	r2, r5
 800af60:	4b05      	ldr	r3, [pc, #20]	@ (800af78 <_svfiprintf_r+0x1f0>)
 800af62:	a904      	add	r1, sp, #16
 800af64:	4638      	mov	r0, r7
 800af66:	f7fd f9b7 	bl	80082d8 <_printf_i>
 800af6a:	e7ed      	b.n	800af48 <_svfiprintf_r+0x1c0>
 800af6c:	0800c876 	.word	0x0800c876
 800af70:	0800c880 	.word	0x0800c880
 800af74:	08007da9 	.word	0x08007da9
 800af78:	0800acd3 	.word	0x0800acd3
 800af7c:	0800c87c 	.word	0x0800c87c

0800af80 <__sfputc_r>:
 800af80:	6893      	ldr	r3, [r2, #8]
 800af82:	3b01      	subs	r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	b410      	push	{r4}
 800af88:	6093      	str	r3, [r2, #8]
 800af8a:	da08      	bge.n	800af9e <__sfputc_r+0x1e>
 800af8c:	6994      	ldr	r4, [r2, #24]
 800af8e:	42a3      	cmp	r3, r4
 800af90:	db01      	blt.n	800af96 <__sfputc_r+0x16>
 800af92:	290a      	cmp	r1, #10
 800af94:	d103      	bne.n	800af9e <__sfputc_r+0x1e>
 800af96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af9a:	f000 bfca 	b.w	800bf32 <__swbuf_r>
 800af9e:	6813      	ldr	r3, [r2, #0]
 800afa0:	1c58      	adds	r0, r3, #1
 800afa2:	6010      	str	r0, [r2, #0]
 800afa4:	7019      	strb	r1, [r3, #0]
 800afa6:	4608      	mov	r0, r1
 800afa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afac:	4770      	bx	lr

0800afae <__sfputs_r>:
 800afae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb0:	4606      	mov	r6, r0
 800afb2:	460f      	mov	r7, r1
 800afb4:	4614      	mov	r4, r2
 800afb6:	18d5      	adds	r5, r2, r3
 800afb8:	42ac      	cmp	r4, r5
 800afba:	d101      	bne.n	800afc0 <__sfputs_r+0x12>
 800afbc:	2000      	movs	r0, #0
 800afbe:	e007      	b.n	800afd0 <__sfputs_r+0x22>
 800afc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc4:	463a      	mov	r2, r7
 800afc6:	4630      	mov	r0, r6
 800afc8:	f7ff ffda 	bl	800af80 <__sfputc_r>
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	d1f3      	bne.n	800afb8 <__sfputs_r+0xa>
 800afd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afd4 <_vfiprintf_r>:
 800afd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd8:	460d      	mov	r5, r1
 800afda:	b09d      	sub	sp, #116	@ 0x74
 800afdc:	4614      	mov	r4, r2
 800afde:	4698      	mov	r8, r3
 800afe0:	4606      	mov	r6, r0
 800afe2:	b118      	cbz	r0, 800afec <_vfiprintf_r+0x18>
 800afe4:	6a03      	ldr	r3, [r0, #32]
 800afe6:	b90b      	cbnz	r3, 800afec <_vfiprintf_r+0x18>
 800afe8:	f7fd fd56 	bl	8008a98 <__sinit>
 800afec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afee:	07d9      	lsls	r1, r3, #31
 800aff0:	d405      	bmi.n	800affe <_vfiprintf_r+0x2a>
 800aff2:	89ab      	ldrh	r3, [r5, #12]
 800aff4:	059a      	lsls	r2, r3, #22
 800aff6:	d402      	bmi.n	800affe <_vfiprintf_r+0x2a>
 800aff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800affa:	f7fe fcc2 	bl	8009982 <__retarget_lock_acquire_recursive>
 800affe:	89ab      	ldrh	r3, [r5, #12]
 800b000:	071b      	lsls	r3, r3, #28
 800b002:	d501      	bpl.n	800b008 <_vfiprintf_r+0x34>
 800b004:	692b      	ldr	r3, [r5, #16]
 800b006:	b99b      	cbnz	r3, 800b030 <_vfiprintf_r+0x5c>
 800b008:	4629      	mov	r1, r5
 800b00a:	4630      	mov	r0, r6
 800b00c:	f000 ffd0 	bl	800bfb0 <__swsetup_r>
 800b010:	b170      	cbz	r0, 800b030 <_vfiprintf_r+0x5c>
 800b012:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b014:	07dc      	lsls	r4, r3, #31
 800b016:	d504      	bpl.n	800b022 <_vfiprintf_r+0x4e>
 800b018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b01c:	b01d      	add	sp, #116	@ 0x74
 800b01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b022:	89ab      	ldrh	r3, [r5, #12]
 800b024:	0598      	lsls	r0, r3, #22
 800b026:	d4f7      	bmi.n	800b018 <_vfiprintf_r+0x44>
 800b028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b02a:	f7fe fcab 	bl	8009984 <__retarget_lock_release_recursive>
 800b02e:	e7f3      	b.n	800b018 <_vfiprintf_r+0x44>
 800b030:	2300      	movs	r3, #0
 800b032:	9309      	str	r3, [sp, #36]	@ 0x24
 800b034:	2320      	movs	r3, #32
 800b036:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b03a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b03e:	2330      	movs	r3, #48	@ 0x30
 800b040:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b1f0 <_vfiprintf_r+0x21c>
 800b044:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b048:	f04f 0901 	mov.w	r9, #1
 800b04c:	4623      	mov	r3, r4
 800b04e:	469a      	mov	sl, r3
 800b050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b054:	b10a      	cbz	r2, 800b05a <_vfiprintf_r+0x86>
 800b056:	2a25      	cmp	r2, #37	@ 0x25
 800b058:	d1f9      	bne.n	800b04e <_vfiprintf_r+0x7a>
 800b05a:	ebba 0b04 	subs.w	fp, sl, r4
 800b05e:	d00b      	beq.n	800b078 <_vfiprintf_r+0xa4>
 800b060:	465b      	mov	r3, fp
 800b062:	4622      	mov	r2, r4
 800b064:	4629      	mov	r1, r5
 800b066:	4630      	mov	r0, r6
 800b068:	f7ff ffa1 	bl	800afae <__sfputs_r>
 800b06c:	3001      	adds	r0, #1
 800b06e:	f000 80a7 	beq.w	800b1c0 <_vfiprintf_r+0x1ec>
 800b072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b074:	445a      	add	r2, fp
 800b076:	9209      	str	r2, [sp, #36]	@ 0x24
 800b078:	f89a 3000 	ldrb.w	r3, [sl]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 809f 	beq.w	800b1c0 <_vfiprintf_r+0x1ec>
 800b082:	2300      	movs	r3, #0
 800b084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b08c:	f10a 0a01 	add.w	sl, sl, #1
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	9307      	str	r3, [sp, #28]
 800b094:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b098:	931a      	str	r3, [sp, #104]	@ 0x68
 800b09a:	4654      	mov	r4, sl
 800b09c:	2205      	movs	r2, #5
 800b09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a2:	4853      	ldr	r0, [pc, #332]	@ (800b1f0 <_vfiprintf_r+0x21c>)
 800b0a4:	f7f5 f894 	bl	80001d0 <memchr>
 800b0a8:	9a04      	ldr	r2, [sp, #16]
 800b0aa:	b9d8      	cbnz	r0, 800b0e4 <_vfiprintf_r+0x110>
 800b0ac:	06d1      	lsls	r1, r2, #27
 800b0ae:	bf44      	itt	mi
 800b0b0:	2320      	movmi	r3, #32
 800b0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0b6:	0713      	lsls	r3, r2, #28
 800b0b8:	bf44      	itt	mi
 800b0ba:	232b      	movmi	r3, #43	@ 0x2b
 800b0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0c6:	d015      	beq.n	800b0f4 <_vfiprintf_r+0x120>
 800b0c8:	9a07      	ldr	r2, [sp, #28]
 800b0ca:	4654      	mov	r4, sl
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	f04f 0c0a 	mov.w	ip, #10
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0d8:	3b30      	subs	r3, #48	@ 0x30
 800b0da:	2b09      	cmp	r3, #9
 800b0dc:	d94b      	bls.n	800b176 <_vfiprintf_r+0x1a2>
 800b0de:	b1b0      	cbz	r0, 800b10e <_vfiprintf_r+0x13a>
 800b0e0:	9207      	str	r2, [sp, #28]
 800b0e2:	e014      	b.n	800b10e <_vfiprintf_r+0x13a>
 800b0e4:	eba0 0308 	sub.w	r3, r0, r8
 800b0e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	46a2      	mov	sl, r4
 800b0f2:	e7d2      	b.n	800b09a <_vfiprintf_r+0xc6>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	1d19      	adds	r1, r3, #4
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	9103      	str	r1, [sp, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	bfbb      	ittet	lt
 800b100:	425b      	neglt	r3, r3
 800b102:	f042 0202 	orrlt.w	r2, r2, #2
 800b106:	9307      	strge	r3, [sp, #28]
 800b108:	9307      	strlt	r3, [sp, #28]
 800b10a:	bfb8      	it	lt
 800b10c:	9204      	strlt	r2, [sp, #16]
 800b10e:	7823      	ldrb	r3, [r4, #0]
 800b110:	2b2e      	cmp	r3, #46	@ 0x2e
 800b112:	d10a      	bne.n	800b12a <_vfiprintf_r+0x156>
 800b114:	7863      	ldrb	r3, [r4, #1]
 800b116:	2b2a      	cmp	r3, #42	@ 0x2a
 800b118:	d132      	bne.n	800b180 <_vfiprintf_r+0x1ac>
 800b11a:	9b03      	ldr	r3, [sp, #12]
 800b11c:	1d1a      	adds	r2, r3, #4
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	9203      	str	r2, [sp, #12]
 800b122:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b126:	3402      	adds	r4, #2
 800b128:	9305      	str	r3, [sp, #20]
 800b12a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b200 <_vfiprintf_r+0x22c>
 800b12e:	7821      	ldrb	r1, [r4, #0]
 800b130:	2203      	movs	r2, #3
 800b132:	4650      	mov	r0, sl
 800b134:	f7f5 f84c 	bl	80001d0 <memchr>
 800b138:	b138      	cbz	r0, 800b14a <_vfiprintf_r+0x176>
 800b13a:	9b04      	ldr	r3, [sp, #16]
 800b13c:	eba0 000a 	sub.w	r0, r0, sl
 800b140:	2240      	movs	r2, #64	@ 0x40
 800b142:	4082      	lsls	r2, r0
 800b144:	4313      	orrs	r3, r2
 800b146:	3401      	adds	r4, #1
 800b148:	9304      	str	r3, [sp, #16]
 800b14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b14e:	4829      	ldr	r0, [pc, #164]	@ (800b1f4 <_vfiprintf_r+0x220>)
 800b150:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b154:	2206      	movs	r2, #6
 800b156:	f7f5 f83b 	bl	80001d0 <memchr>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d03f      	beq.n	800b1de <_vfiprintf_r+0x20a>
 800b15e:	4b26      	ldr	r3, [pc, #152]	@ (800b1f8 <_vfiprintf_r+0x224>)
 800b160:	bb1b      	cbnz	r3, 800b1aa <_vfiprintf_r+0x1d6>
 800b162:	9b03      	ldr	r3, [sp, #12]
 800b164:	3307      	adds	r3, #7
 800b166:	f023 0307 	bic.w	r3, r3, #7
 800b16a:	3308      	adds	r3, #8
 800b16c:	9303      	str	r3, [sp, #12]
 800b16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b170:	443b      	add	r3, r7
 800b172:	9309      	str	r3, [sp, #36]	@ 0x24
 800b174:	e76a      	b.n	800b04c <_vfiprintf_r+0x78>
 800b176:	fb0c 3202 	mla	r2, ip, r2, r3
 800b17a:	460c      	mov	r4, r1
 800b17c:	2001      	movs	r0, #1
 800b17e:	e7a8      	b.n	800b0d2 <_vfiprintf_r+0xfe>
 800b180:	2300      	movs	r3, #0
 800b182:	3401      	adds	r4, #1
 800b184:	9305      	str	r3, [sp, #20]
 800b186:	4619      	mov	r1, r3
 800b188:	f04f 0c0a 	mov.w	ip, #10
 800b18c:	4620      	mov	r0, r4
 800b18e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b192:	3a30      	subs	r2, #48	@ 0x30
 800b194:	2a09      	cmp	r2, #9
 800b196:	d903      	bls.n	800b1a0 <_vfiprintf_r+0x1cc>
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0c6      	beq.n	800b12a <_vfiprintf_r+0x156>
 800b19c:	9105      	str	r1, [sp, #20]
 800b19e:	e7c4      	b.n	800b12a <_vfiprintf_r+0x156>
 800b1a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e7f0      	b.n	800b18c <_vfiprintf_r+0x1b8>
 800b1aa:	ab03      	add	r3, sp, #12
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	462a      	mov	r2, r5
 800b1b0:	4b12      	ldr	r3, [pc, #72]	@ (800b1fc <_vfiprintf_r+0x228>)
 800b1b2:	a904      	add	r1, sp, #16
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7fc fdf7 	bl	8007da8 <_printf_float>
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	1c78      	adds	r0, r7, #1
 800b1be:	d1d6      	bne.n	800b16e <_vfiprintf_r+0x19a>
 800b1c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1c2:	07d9      	lsls	r1, r3, #31
 800b1c4:	d405      	bmi.n	800b1d2 <_vfiprintf_r+0x1fe>
 800b1c6:	89ab      	ldrh	r3, [r5, #12]
 800b1c8:	059a      	lsls	r2, r3, #22
 800b1ca:	d402      	bmi.n	800b1d2 <_vfiprintf_r+0x1fe>
 800b1cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1ce:	f7fe fbd9 	bl	8009984 <__retarget_lock_release_recursive>
 800b1d2:	89ab      	ldrh	r3, [r5, #12]
 800b1d4:	065b      	lsls	r3, r3, #25
 800b1d6:	f53f af1f 	bmi.w	800b018 <_vfiprintf_r+0x44>
 800b1da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1dc:	e71e      	b.n	800b01c <_vfiprintf_r+0x48>
 800b1de:	ab03      	add	r3, sp, #12
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	4b05      	ldr	r3, [pc, #20]	@ (800b1fc <_vfiprintf_r+0x228>)
 800b1e6:	a904      	add	r1, sp, #16
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7fd f875 	bl	80082d8 <_printf_i>
 800b1ee:	e7e4      	b.n	800b1ba <_vfiprintf_r+0x1e6>
 800b1f0:	0800c876 	.word	0x0800c876
 800b1f4:	0800c880 	.word	0x0800c880
 800b1f8:	08007da9 	.word	0x08007da9
 800b1fc:	0800afaf 	.word	0x0800afaf
 800b200:	0800c87c 	.word	0x0800c87c

0800b204 <malloc>:
 800b204:	4b02      	ldr	r3, [pc, #8]	@ (800b210 <malloc+0xc>)
 800b206:	4601      	mov	r1, r0
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f000 b825 	b.w	800b258 <_malloc_r>
 800b20e:	bf00      	nop
 800b210:	20000188 	.word	0x20000188

0800b214 <sbrk_aligned>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	4e0f      	ldr	r6, [pc, #60]	@ (800b254 <sbrk_aligned+0x40>)
 800b218:	460c      	mov	r4, r1
 800b21a:	6831      	ldr	r1, [r6, #0]
 800b21c:	4605      	mov	r5, r0
 800b21e:	b911      	cbnz	r1, 800b226 <sbrk_aligned+0x12>
 800b220:	f000 fffc 	bl	800c21c <_sbrk_r>
 800b224:	6030      	str	r0, [r6, #0]
 800b226:	4621      	mov	r1, r4
 800b228:	4628      	mov	r0, r5
 800b22a:	f000 fff7 	bl	800c21c <_sbrk_r>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d103      	bne.n	800b23a <sbrk_aligned+0x26>
 800b232:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b236:	4620      	mov	r0, r4
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	1cc4      	adds	r4, r0, #3
 800b23c:	f024 0403 	bic.w	r4, r4, #3
 800b240:	42a0      	cmp	r0, r4
 800b242:	d0f8      	beq.n	800b236 <sbrk_aligned+0x22>
 800b244:	1a21      	subs	r1, r4, r0
 800b246:	4628      	mov	r0, r5
 800b248:	f000 ffe8 	bl	800c21c <_sbrk_r>
 800b24c:	3001      	adds	r0, #1
 800b24e:	d1f2      	bne.n	800b236 <sbrk_aligned+0x22>
 800b250:	e7ef      	b.n	800b232 <sbrk_aligned+0x1e>
 800b252:	bf00      	nop
 800b254:	20001da8 	.word	0x20001da8

0800b258 <_malloc_r>:
 800b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	1ccd      	adds	r5, r1, #3
 800b25e:	f025 0503 	bic.w	r5, r5, #3
 800b262:	3508      	adds	r5, #8
 800b264:	2d0c      	cmp	r5, #12
 800b266:	bf38      	it	cc
 800b268:	250c      	movcc	r5, #12
 800b26a:	2d00      	cmp	r5, #0
 800b26c:	4606      	mov	r6, r0
 800b26e:	db01      	blt.n	800b274 <_malloc_r+0x1c>
 800b270:	42a9      	cmp	r1, r5
 800b272:	d904      	bls.n	800b27e <_malloc_r+0x26>
 800b274:	230c      	movs	r3, #12
 800b276:	6033      	str	r3, [r6, #0]
 800b278:	2000      	movs	r0, #0
 800b27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b354 <_malloc_r+0xfc>
 800b282:	f000 f927 	bl	800b4d4 <__malloc_lock>
 800b286:	f8d8 3000 	ldr.w	r3, [r8]
 800b28a:	461c      	mov	r4, r3
 800b28c:	bb44      	cbnz	r4, 800b2e0 <_malloc_r+0x88>
 800b28e:	4629      	mov	r1, r5
 800b290:	4630      	mov	r0, r6
 800b292:	f7ff ffbf 	bl	800b214 <sbrk_aligned>
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	4604      	mov	r4, r0
 800b29a:	d158      	bne.n	800b34e <_malloc_r+0xf6>
 800b29c:	f8d8 4000 	ldr.w	r4, [r8]
 800b2a0:	4627      	mov	r7, r4
 800b2a2:	2f00      	cmp	r7, #0
 800b2a4:	d143      	bne.n	800b32e <_malloc_r+0xd6>
 800b2a6:	2c00      	cmp	r4, #0
 800b2a8:	d04b      	beq.n	800b342 <_malloc_r+0xea>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	4639      	mov	r1, r7
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	eb04 0903 	add.w	r9, r4, r3
 800b2b4:	f000 ffb2 	bl	800c21c <_sbrk_r>
 800b2b8:	4581      	cmp	r9, r0
 800b2ba:	d142      	bne.n	800b342 <_malloc_r+0xea>
 800b2bc:	6821      	ldr	r1, [r4, #0]
 800b2be:	1a6d      	subs	r5, r5, r1
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7ff ffa6 	bl	800b214 <sbrk_aligned>
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d03a      	beq.n	800b342 <_malloc_r+0xea>
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	442b      	add	r3, r5
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	bb62      	cbnz	r2, 800b334 <_malloc_r+0xdc>
 800b2da:	f8c8 7000 	str.w	r7, [r8]
 800b2de:	e00f      	b.n	800b300 <_malloc_r+0xa8>
 800b2e0:	6822      	ldr	r2, [r4, #0]
 800b2e2:	1b52      	subs	r2, r2, r5
 800b2e4:	d420      	bmi.n	800b328 <_malloc_r+0xd0>
 800b2e6:	2a0b      	cmp	r2, #11
 800b2e8:	d917      	bls.n	800b31a <_malloc_r+0xc2>
 800b2ea:	1961      	adds	r1, r4, r5
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	6025      	str	r5, [r4, #0]
 800b2f0:	bf18      	it	ne
 800b2f2:	6059      	strne	r1, [r3, #4]
 800b2f4:	6863      	ldr	r3, [r4, #4]
 800b2f6:	bf08      	it	eq
 800b2f8:	f8c8 1000 	streq.w	r1, [r8]
 800b2fc:	5162      	str	r2, [r4, r5]
 800b2fe:	604b      	str	r3, [r1, #4]
 800b300:	4630      	mov	r0, r6
 800b302:	f000 f8ed 	bl	800b4e0 <__malloc_unlock>
 800b306:	f104 000b 	add.w	r0, r4, #11
 800b30a:	1d23      	adds	r3, r4, #4
 800b30c:	f020 0007 	bic.w	r0, r0, #7
 800b310:	1ac2      	subs	r2, r0, r3
 800b312:	bf1c      	itt	ne
 800b314:	1a1b      	subne	r3, r3, r0
 800b316:	50a3      	strne	r3, [r4, r2]
 800b318:	e7af      	b.n	800b27a <_malloc_r+0x22>
 800b31a:	6862      	ldr	r2, [r4, #4]
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	bf0c      	ite	eq
 800b320:	f8c8 2000 	streq.w	r2, [r8]
 800b324:	605a      	strne	r2, [r3, #4]
 800b326:	e7eb      	b.n	800b300 <_malloc_r+0xa8>
 800b328:	4623      	mov	r3, r4
 800b32a:	6864      	ldr	r4, [r4, #4]
 800b32c:	e7ae      	b.n	800b28c <_malloc_r+0x34>
 800b32e:	463c      	mov	r4, r7
 800b330:	687f      	ldr	r7, [r7, #4]
 800b332:	e7b6      	b.n	800b2a2 <_malloc_r+0x4a>
 800b334:	461a      	mov	r2, r3
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	42a3      	cmp	r3, r4
 800b33a:	d1fb      	bne.n	800b334 <_malloc_r+0xdc>
 800b33c:	2300      	movs	r3, #0
 800b33e:	6053      	str	r3, [r2, #4]
 800b340:	e7de      	b.n	800b300 <_malloc_r+0xa8>
 800b342:	230c      	movs	r3, #12
 800b344:	6033      	str	r3, [r6, #0]
 800b346:	4630      	mov	r0, r6
 800b348:	f000 f8ca 	bl	800b4e0 <__malloc_unlock>
 800b34c:	e794      	b.n	800b278 <_malloc_r+0x20>
 800b34e:	6005      	str	r5, [r0, #0]
 800b350:	e7d6      	b.n	800b300 <_malloc_r+0xa8>
 800b352:	bf00      	nop
 800b354:	20001dac 	.word	0x20001dac

0800b358 <__ascii_mbtowc>:
 800b358:	b082      	sub	sp, #8
 800b35a:	b901      	cbnz	r1, 800b35e <__ascii_mbtowc+0x6>
 800b35c:	a901      	add	r1, sp, #4
 800b35e:	b142      	cbz	r2, 800b372 <__ascii_mbtowc+0x1a>
 800b360:	b14b      	cbz	r3, 800b376 <__ascii_mbtowc+0x1e>
 800b362:	7813      	ldrb	r3, [r2, #0]
 800b364:	600b      	str	r3, [r1, #0]
 800b366:	7812      	ldrb	r2, [r2, #0]
 800b368:	1e10      	subs	r0, r2, #0
 800b36a:	bf18      	it	ne
 800b36c:	2001      	movne	r0, #1
 800b36e:	b002      	add	sp, #8
 800b370:	4770      	bx	lr
 800b372:	4610      	mov	r0, r2
 800b374:	e7fb      	b.n	800b36e <__ascii_mbtowc+0x16>
 800b376:	f06f 0001 	mvn.w	r0, #1
 800b37a:	e7f8      	b.n	800b36e <__ascii_mbtowc+0x16>

0800b37c <__sflush_r>:
 800b37c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b384:	0716      	lsls	r6, r2, #28
 800b386:	4605      	mov	r5, r0
 800b388:	460c      	mov	r4, r1
 800b38a:	d454      	bmi.n	800b436 <__sflush_r+0xba>
 800b38c:	684b      	ldr	r3, [r1, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dc02      	bgt.n	800b398 <__sflush_r+0x1c>
 800b392:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b394:	2b00      	cmp	r3, #0
 800b396:	dd48      	ble.n	800b42a <__sflush_r+0xae>
 800b398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b39a:	2e00      	cmp	r6, #0
 800b39c:	d045      	beq.n	800b42a <__sflush_r+0xae>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b3a4:	682f      	ldr	r7, [r5, #0]
 800b3a6:	6a21      	ldr	r1, [r4, #32]
 800b3a8:	602b      	str	r3, [r5, #0]
 800b3aa:	d030      	beq.n	800b40e <__sflush_r+0x92>
 800b3ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	0759      	lsls	r1, r3, #29
 800b3b2:	d505      	bpl.n	800b3c0 <__sflush_r+0x44>
 800b3b4:	6863      	ldr	r3, [r4, #4]
 800b3b6:	1ad2      	subs	r2, r2, r3
 800b3b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3ba:	b10b      	cbz	r3, 800b3c0 <__sflush_r+0x44>
 800b3bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b3be:	1ad2      	subs	r2, r2, r3
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3c4:	6a21      	ldr	r1, [r4, #32]
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	47b0      	blx	r6
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	d106      	bne.n	800b3de <__sflush_r+0x62>
 800b3d0:	6829      	ldr	r1, [r5, #0]
 800b3d2:	291d      	cmp	r1, #29
 800b3d4:	d82b      	bhi.n	800b42e <__sflush_r+0xb2>
 800b3d6:	4a2a      	ldr	r2, [pc, #168]	@ (800b480 <__sflush_r+0x104>)
 800b3d8:	410a      	asrs	r2, r1
 800b3da:	07d6      	lsls	r6, r2, #31
 800b3dc:	d427      	bmi.n	800b42e <__sflush_r+0xb2>
 800b3de:	2200      	movs	r2, #0
 800b3e0:	6062      	str	r2, [r4, #4]
 800b3e2:	04d9      	lsls	r1, r3, #19
 800b3e4:	6922      	ldr	r2, [r4, #16]
 800b3e6:	6022      	str	r2, [r4, #0]
 800b3e8:	d504      	bpl.n	800b3f4 <__sflush_r+0x78>
 800b3ea:	1c42      	adds	r2, r0, #1
 800b3ec:	d101      	bne.n	800b3f2 <__sflush_r+0x76>
 800b3ee:	682b      	ldr	r3, [r5, #0]
 800b3f0:	b903      	cbnz	r3, 800b3f4 <__sflush_r+0x78>
 800b3f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b3f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3f6:	602f      	str	r7, [r5, #0]
 800b3f8:	b1b9      	cbz	r1, 800b42a <__sflush_r+0xae>
 800b3fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3fe:	4299      	cmp	r1, r3
 800b400:	d002      	beq.n	800b408 <__sflush_r+0x8c>
 800b402:	4628      	mov	r0, r5
 800b404:	f000 ff5e 	bl	800c2c4 <_free_r>
 800b408:	2300      	movs	r3, #0
 800b40a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b40c:	e00d      	b.n	800b42a <__sflush_r+0xae>
 800b40e:	2301      	movs	r3, #1
 800b410:	4628      	mov	r0, r5
 800b412:	47b0      	blx	r6
 800b414:	4602      	mov	r2, r0
 800b416:	1c50      	adds	r0, r2, #1
 800b418:	d1c9      	bne.n	800b3ae <__sflush_r+0x32>
 800b41a:	682b      	ldr	r3, [r5, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0c6      	beq.n	800b3ae <__sflush_r+0x32>
 800b420:	2b1d      	cmp	r3, #29
 800b422:	d001      	beq.n	800b428 <__sflush_r+0xac>
 800b424:	2b16      	cmp	r3, #22
 800b426:	d11e      	bne.n	800b466 <__sflush_r+0xea>
 800b428:	602f      	str	r7, [r5, #0]
 800b42a:	2000      	movs	r0, #0
 800b42c:	e022      	b.n	800b474 <__sflush_r+0xf8>
 800b42e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b432:	b21b      	sxth	r3, r3
 800b434:	e01b      	b.n	800b46e <__sflush_r+0xf2>
 800b436:	690f      	ldr	r7, [r1, #16]
 800b438:	2f00      	cmp	r7, #0
 800b43a:	d0f6      	beq.n	800b42a <__sflush_r+0xae>
 800b43c:	0793      	lsls	r3, r2, #30
 800b43e:	680e      	ldr	r6, [r1, #0]
 800b440:	bf08      	it	eq
 800b442:	694b      	ldreq	r3, [r1, #20]
 800b444:	600f      	str	r7, [r1, #0]
 800b446:	bf18      	it	ne
 800b448:	2300      	movne	r3, #0
 800b44a:	eba6 0807 	sub.w	r8, r6, r7
 800b44e:	608b      	str	r3, [r1, #8]
 800b450:	f1b8 0f00 	cmp.w	r8, #0
 800b454:	dde9      	ble.n	800b42a <__sflush_r+0xae>
 800b456:	6a21      	ldr	r1, [r4, #32]
 800b458:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b45a:	4643      	mov	r3, r8
 800b45c:	463a      	mov	r2, r7
 800b45e:	4628      	mov	r0, r5
 800b460:	47b0      	blx	r6
 800b462:	2800      	cmp	r0, #0
 800b464:	dc08      	bgt.n	800b478 <__sflush_r+0xfc>
 800b466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b46e:	81a3      	strh	r3, [r4, #12]
 800b470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b478:	4407      	add	r7, r0
 800b47a:	eba8 0800 	sub.w	r8, r8, r0
 800b47e:	e7e7      	b.n	800b450 <__sflush_r+0xd4>
 800b480:	dfbffffe 	.word	0xdfbffffe

0800b484 <_fflush_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	690b      	ldr	r3, [r1, #16]
 800b488:	4605      	mov	r5, r0
 800b48a:	460c      	mov	r4, r1
 800b48c:	b913      	cbnz	r3, 800b494 <_fflush_r+0x10>
 800b48e:	2500      	movs	r5, #0
 800b490:	4628      	mov	r0, r5
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	b118      	cbz	r0, 800b49e <_fflush_r+0x1a>
 800b496:	6a03      	ldr	r3, [r0, #32]
 800b498:	b90b      	cbnz	r3, 800b49e <_fflush_r+0x1a>
 800b49a:	f7fd fafd 	bl	8008a98 <__sinit>
 800b49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d0f3      	beq.n	800b48e <_fflush_r+0xa>
 800b4a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4a8:	07d0      	lsls	r0, r2, #31
 800b4aa:	d404      	bmi.n	800b4b6 <_fflush_r+0x32>
 800b4ac:	0599      	lsls	r1, r3, #22
 800b4ae:	d402      	bmi.n	800b4b6 <_fflush_r+0x32>
 800b4b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4b2:	f7fe fa66 	bl	8009982 <__retarget_lock_acquire_recursive>
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	f7ff ff5f 	bl	800b37c <__sflush_r>
 800b4be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4c0:	07da      	lsls	r2, r3, #31
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	d4e4      	bmi.n	800b490 <_fflush_r+0xc>
 800b4c6:	89a3      	ldrh	r3, [r4, #12]
 800b4c8:	059b      	lsls	r3, r3, #22
 800b4ca:	d4e1      	bmi.n	800b490 <_fflush_r+0xc>
 800b4cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4ce:	f7fe fa59 	bl	8009984 <__retarget_lock_release_recursive>
 800b4d2:	e7dd      	b.n	800b490 <_fflush_r+0xc>

0800b4d4 <__malloc_lock>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	@ (800b4dc <__malloc_lock+0x8>)
 800b4d6:	f7fe ba54 	b.w	8009982 <__retarget_lock_acquire_recursive>
 800b4da:	bf00      	nop
 800b4dc:	20001da4 	.word	0x20001da4

0800b4e0 <__malloc_unlock>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	@ (800b4e8 <__malloc_unlock+0x8>)
 800b4e2:	f7fe ba4f 	b.w	8009984 <__retarget_lock_release_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	20001da4 	.word	0x20001da4

0800b4ec <_Balloc>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	69c6      	ldr	r6, [r0, #28]
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	460d      	mov	r5, r1
 800b4f4:	b976      	cbnz	r6, 800b514 <_Balloc+0x28>
 800b4f6:	2010      	movs	r0, #16
 800b4f8:	f7ff fe84 	bl	800b204 <malloc>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	61e0      	str	r0, [r4, #28]
 800b500:	b920      	cbnz	r0, 800b50c <_Balloc+0x20>
 800b502:	4b18      	ldr	r3, [pc, #96]	@ (800b564 <_Balloc+0x78>)
 800b504:	4818      	ldr	r0, [pc, #96]	@ (800b568 <_Balloc+0x7c>)
 800b506:	216b      	movs	r1, #107	@ 0x6b
 800b508:	f000 feaa 	bl	800c260 <__assert_func>
 800b50c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b510:	6006      	str	r6, [r0, #0]
 800b512:	60c6      	str	r6, [r0, #12]
 800b514:	69e6      	ldr	r6, [r4, #28]
 800b516:	68f3      	ldr	r3, [r6, #12]
 800b518:	b183      	cbz	r3, 800b53c <_Balloc+0x50>
 800b51a:	69e3      	ldr	r3, [r4, #28]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b522:	b9b8      	cbnz	r0, 800b554 <_Balloc+0x68>
 800b524:	2101      	movs	r1, #1
 800b526:	fa01 f605 	lsl.w	r6, r1, r5
 800b52a:	1d72      	adds	r2, r6, #5
 800b52c:	0092      	lsls	r2, r2, #2
 800b52e:	4620      	mov	r0, r4
 800b530:	f000 feb4 	bl	800c29c <_calloc_r>
 800b534:	b160      	cbz	r0, 800b550 <_Balloc+0x64>
 800b536:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b53a:	e00e      	b.n	800b55a <_Balloc+0x6e>
 800b53c:	2221      	movs	r2, #33	@ 0x21
 800b53e:	2104      	movs	r1, #4
 800b540:	4620      	mov	r0, r4
 800b542:	f000 feab 	bl	800c29c <_calloc_r>
 800b546:	69e3      	ldr	r3, [r4, #28]
 800b548:	60f0      	str	r0, [r6, #12]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1e4      	bne.n	800b51a <_Balloc+0x2e>
 800b550:	2000      	movs	r0, #0
 800b552:	bd70      	pop	{r4, r5, r6, pc}
 800b554:	6802      	ldr	r2, [r0, #0]
 800b556:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b55a:	2300      	movs	r3, #0
 800b55c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b560:	e7f7      	b.n	800b552 <_Balloc+0x66>
 800b562:	bf00      	nop
 800b564:	0800c796 	.word	0x0800c796
 800b568:	0800c887 	.word	0x0800c887

0800b56c <_Bfree>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	69c6      	ldr	r6, [r0, #28]
 800b570:	4605      	mov	r5, r0
 800b572:	460c      	mov	r4, r1
 800b574:	b976      	cbnz	r6, 800b594 <_Bfree+0x28>
 800b576:	2010      	movs	r0, #16
 800b578:	f7ff fe44 	bl	800b204 <malloc>
 800b57c:	4602      	mov	r2, r0
 800b57e:	61e8      	str	r0, [r5, #28]
 800b580:	b920      	cbnz	r0, 800b58c <_Bfree+0x20>
 800b582:	4b09      	ldr	r3, [pc, #36]	@ (800b5a8 <_Bfree+0x3c>)
 800b584:	4809      	ldr	r0, [pc, #36]	@ (800b5ac <_Bfree+0x40>)
 800b586:	218f      	movs	r1, #143	@ 0x8f
 800b588:	f000 fe6a 	bl	800c260 <__assert_func>
 800b58c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b590:	6006      	str	r6, [r0, #0]
 800b592:	60c6      	str	r6, [r0, #12]
 800b594:	b13c      	cbz	r4, 800b5a6 <_Bfree+0x3a>
 800b596:	69eb      	ldr	r3, [r5, #28]
 800b598:	6862      	ldr	r2, [r4, #4]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5a0:	6021      	str	r1, [r4, #0]
 800b5a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5a6:	bd70      	pop	{r4, r5, r6, pc}
 800b5a8:	0800c796 	.word	0x0800c796
 800b5ac:	0800c887 	.word	0x0800c887

0800b5b0 <__multadd>:
 800b5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b4:	690d      	ldr	r5, [r1, #16]
 800b5b6:	4607      	mov	r7, r0
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	461e      	mov	r6, r3
 800b5bc:	f101 0c14 	add.w	ip, r1, #20
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	f8dc 3000 	ldr.w	r3, [ip]
 800b5c6:	b299      	uxth	r1, r3
 800b5c8:	fb02 6101 	mla	r1, r2, r1, r6
 800b5cc:	0c1e      	lsrs	r6, r3, #16
 800b5ce:	0c0b      	lsrs	r3, r1, #16
 800b5d0:	fb02 3306 	mla	r3, r2, r6, r3
 800b5d4:	b289      	uxth	r1, r1
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5dc:	4285      	cmp	r5, r0
 800b5de:	f84c 1b04 	str.w	r1, [ip], #4
 800b5e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5e6:	dcec      	bgt.n	800b5c2 <__multadd+0x12>
 800b5e8:	b30e      	cbz	r6, 800b62e <__multadd+0x7e>
 800b5ea:	68a3      	ldr	r3, [r4, #8]
 800b5ec:	42ab      	cmp	r3, r5
 800b5ee:	dc19      	bgt.n	800b624 <__multadd+0x74>
 800b5f0:	6861      	ldr	r1, [r4, #4]
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	3101      	adds	r1, #1
 800b5f6:	f7ff ff79 	bl	800b4ec <_Balloc>
 800b5fa:	4680      	mov	r8, r0
 800b5fc:	b928      	cbnz	r0, 800b60a <__multadd+0x5a>
 800b5fe:	4602      	mov	r2, r0
 800b600:	4b0c      	ldr	r3, [pc, #48]	@ (800b634 <__multadd+0x84>)
 800b602:	480d      	ldr	r0, [pc, #52]	@ (800b638 <__multadd+0x88>)
 800b604:	21ba      	movs	r1, #186	@ 0xba
 800b606:	f000 fe2b 	bl	800c260 <__assert_func>
 800b60a:	6922      	ldr	r2, [r4, #16]
 800b60c:	3202      	adds	r2, #2
 800b60e:	f104 010c 	add.w	r1, r4, #12
 800b612:	0092      	lsls	r2, r2, #2
 800b614:	300c      	adds	r0, #12
 800b616:	f7fe f9b6 	bl	8009986 <memcpy>
 800b61a:	4621      	mov	r1, r4
 800b61c:	4638      	mov	r0, r7
 800b61e:	f7ff ffa5 	bl	800b56c <_Bfree>
 800b622:	4644      	mov	r4, r8
 800b624:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b628:	3501      	adds	r5, #1
 800b62a:	615e      	str	r6, [r3, #20]
 800b62c:	6125      	str	r5, [r4, #16]
 800b62e:	4620      	mov	r0, r4
 800b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b634:	0800c805 	.word	0x0800c805
 800b638:	0800c887 	.word	0x0800c887

0800b63c <__s2b>:
 800b63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	4615      	mov	r5, r2
 800b644:	461f      	mov	r7, r3
 800b646:	2209      	movs	r2, #9
 800b648:	3308      	adds	r3, #8
 800b64a:	4606      	mov	r6, r0
 800b64c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b650:	2100      	movs	r1, #0
 800b652:	2201      	movs	r2, #1
 800b654:	429a      	cmp	r2, r3
 800b656:	db09      	blt.n	800b66c <__s2b+0x30>
 800b658:	4630      	mov	r0, r6
 800b65a:	f7ff ff47 	bl	800b4ec <_Balloc>
 800b65e:	b940      	cbnz	r0, 800b672 <__s2b+0x36>
 800b660:	4602      	mov	r2, r0
 800b662:	4b19      	ldr	r3, [pc, #100]	@ (800b6c8 <__s2b+0x8c>)
 800b664:	4819      	ldr	r0, [pc, #100]	@ (800b6cc <__s2b+0x90>)
 800b666:	21d3      	movs	r1, #211	@ 0xd3
 800b668:	f000 fdfa 	bl	800c260 <__assert_func>
 800b66c:	0052      	lsls	r2, r2, #1
 800b66e:	3101      	adds	r1, #1
 800b670:	e7f0      	b.n	800b654 <__s2b+0x18>
 800b672:	9b08      	ldr	r3, [sp, #32]
 800b674:	6143      	str	r3, [r0, #20]
 800b676:	2d09      	cmp	r5, #9
 800b678:	f04f 0301 	mov.w	r3, #1
 800b67c:	6103      	str	r3, [r0, #16]
 800b67e:	dd16      	ble.n	800b6ae <__s2b+0x72>
 800b680:	f104 0909 	add.w	r9, r4, #9
 800b684:	46c8      	mov	r8, r9
 800b686:	442c      	add	r4, r5
 800b688:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b68c:	4601      	mov	r1, r0
 800b68e:	3b30      	subs	r3, #48	@ 0x30
 800b690:	220a      	movs	r2, #10
 800b692:	4630      	mov	r0, r6
 800b694:	f7ff ff8c 	bl	800b5b0 <__multadd>
 800b698:	45a0      	cmp	r8, r4
 800b69a:	d1f5      	bne.n	800b688 <__s2b+0x4c>
 800b69c:	f1a5 0408 	sub.w	r4, r5, #8
 800b6a0:	444c      	add	r4, r9
 800b6a2:	1b2d      	subs	r5, r5, r4
 800b6a4:	1963      	adds	r3, r4, r5
 800b6a6:	42bb      	cmp	r3, r7
 800b6a8:	db04      	blt.n	800b6b4 <__s2b+0x78>
 800b6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ae:	340a      	adds	r4, #10
 800b6b0:	2509      	movs	r5, #9
 800b6b2:	e7f6      	b.n	800b6a2 <__s2b+0x66>
 800b6b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	3b30      	subs	r3, #48	@ 0x30
 800b6bc:	220a      	movs	r2, #10
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f7ff ff76 	bl	800b5b0 <__multadd>
 800b6c4:	e7ee      	b.n	800b6a4 <__s2b+0x68>
 800b6c6:	bf00      	nop
 800b6c8:	0800c805 	.word	0x0800c805
 800b6cc:	0800c887 	.word	0x0800c887

0800b6d0 <__hi0bits>:
 800b6d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	bf36      	itet	cc
 800b6d8:	0403      	lslcc	r3, r0, #16
 800b6da:	2000      	movcs	r0, #0
 800b6dc:	2010      	movcc	r0, #16
 800b6de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6e2:	bf3c      	itt	cc
 800b6e4:	021b      	lslcc	r3, r3, #8
 800b6e6:	3008      	addcc	r0, #8
 800b6e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6ec:	bf3c      	itt	cc
 800b6ee:	011b      	lslcc	r3, r3, #4
 800b6f0:	3004      	addcc	r0, #4
 800b6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6f6:	bf3c      	itt	cc
 800b6f8:	009b      	lslcc	r3, r3, #2
 800b6fa:	3002      	addcc	r0, #2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	db05      	blt.n	800b70c <__hi0bits+0x3c>
 800b700:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b704:	f100 0001 	add.w	r0, r0, #1
 800b708:	bf08      	it	eq
 800b70a:	2020      	moveq	r0, #32
 800b70c:	4770      	bx	lr

0800b70e <__lo0bits>:
 800b70e:	6803      	ldr	r3, [r0, #0]
 800b710:	4602      	mov	r2, r0
 800b712:	f013 0007 	ands.w	r0, r3, #7
 800b716:	d00b      	beq.n	800b730 <__lo0bits+0x22>
 800b718:	07d9      	lsls	r1, r3, #31
 800b71a:	d421      	bmi.n	800b760 <__lo0bits+0x52>
 800b71c:	0798      	lsls	r0, r3, #30
 800b71e:	bf49      	itett	mi
 800b720:	085b      	lsrmi	r3, r3, #1
 800b722:	089b      	lsrpl	r3, r3, #2
 800b724:	2001      	movmi	r0, #1
 800b726:	6013      	strmi	r3, [r2, #0]
 800b728:	bf5c      	itt	pl
 800b72a:	6013      	strpl	r3, [r2, #0]
 800b72c:	2002      	movpl	r0, #2
 800b72e:	4770      	bx	lr
 800b730:	b299      	uxth	r1, r3
 800b732:	b909      	cbnz	r1, 800b738 <__lo0bits+0x2a>
 800b734:	0c1b      	lsrs	r3, r3, #16
 800b736:	2010      	movs	r0, #16
 800b738:	b2d9      	uxtb	r1, r3
 800b73a:	b909      	cbnz	r1, 800b740 <__lo0bits+0x32>
 800b73c:	3008      	adds	r0, #8
 800b73e:	0a1b      	lsrs	r3, r3, #8
 800b740:	0719      	lsls	r1, r3, #28
 800b742:	bf04      	itt	eq
 800b744:	091b      	lsreq	r3, r3, #4
 800b746:	3004      	addeq	r0, #4
 800b748:	0799      	lsls	r1, r3, #30
 800b74a:	bf04      	itt	eq
 800b74c:	089b      	lsreq	r3, r3, #2
 800b74e:	3002      	addeq	r0, #2
 800b750:	07d9      	lsls	r1, r3, #31
 800b752:	d403      	bmi.n	800b75c <__lo0bits+0x4e>
 800b754:	085b      	lsrs	r3, r3, #1
 800b756:	f100 0001 	add.w	r0, r0, #1
 800b75a:	d003      	beq.n	800b764 <__lo0bits+0x56>
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	4770      	bx	lr
 800b760:	2000      	movs	r0, #0
 800b762:	4770      	bx	lr
 800b764:	2020      	movs	r0, #32
 800b766:	4770      	bx	lr

0800b768 <__i2b>:
 800b768:	b510      	push	{r4, lr}
 800b76a:	460c      	mov	r4, r1
 800b76c:	2101      	movs	r1, #1
 800b76e:	f7ff febd 	bl	800b4ec <_Balloc>
 800b772:	4602      	mov	r2, r0
 800b774:	b928      	cbnz	r0, 800b782 <__i2b+0x1a>
 800b776:	4b05      	ldr	r3, [pc, #20]	@ (800b78c <__i2b+0x24>)
 800b778:	4805      	ldr	r0, [pc, #20]	@ (800b790 <__i2b+0x28>)
 800b77a:	f240 1145 	movw	r1, #325	@ 0x145
 800b77e:	f000 fd6f 	bl	800c260 <__assert_func>
 800b782:	2301      	movs	r3, #1
 800b784:	6144      	str	r4, [r0, #20]
 800b786:	6103      	str	r3, [r0, #16]
 800b788:	bd10      	pop	{r4, pc}
 800b78a:	bf00      	nop
 800b78c:	0800c805 	.word	0x0800c805
 800b790:	0800c887 	.word	0x0800c887

0800b794 <__multiply>:
 800b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b798:	4614      	mov	r4, r2
 800b79a:	690a      	ldr	r2, [r1, #16]
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	bfa8      	it	ge
 800b7a2:	4623      	movge	r3, r4
 800b7a4:	460f      	mov	r7, r1
 800b7a6:	bfa4      	itt	ge
 800b7a8:	460c      	movge	r4, r1
 800b7aa:	461f      	movge	r7, r3
 800b7ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b7b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b7b4:	68a3      	ldr	r3, [r4, #8]
 800b7b6:	6861      	ldr	r1, [r4, #4]
 800b7b8:	eb0a 0609 	add.w	r6, sl, r9
 800b7bc:	42b3      	cmp	r3, r6
 800b7be:	b085      	sub	sp, #20
 800b7c0:	bfb8      	it	lt
 800b7c2:	3101      	addlt	r1, #1
 800b7c4:	f7ff fe92 	bl	800b4ec <_Balloc>
 800b7c8:	b930      	cbnz	r0, 800b7d8 <__multiply+0x44>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	4b44      	ldr	r3, [pc, #272]	@ (800b8e0 <__multiply+0x14c>)
 800b7ce:	4845      	ldr	r0, [pc, #276]	@ (800b8e4 <__multiply+0x150>)
 800b7d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b7d4:	f000 fd44 	bl	800c260 <__assert_func>
 800b7d8:	f100 0514 	add.w	r5, r0, #20
 800b7dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7e0:	462b      	mov	r3, r5
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	4543      	cmp	r3, r8
 800b7e6:	d321      	bcc.n	800b82c <__multiply+0x98>
 800b7e8:	f107 0114 	add.w	r1, r7, #20
 800b7ec:	f104 0214 	add.w	r2, r4, #20
 800b7f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b7f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b7f8:	9302      	str	r3, [sp, #8]
 800b7fa:	1b13      	subs	r3, r2, r4
 800b7fc:	3b15      	subs	r3, #21
 800b7fe:	f023 0303 	bic.w	r3, r3, #3
 800b802:	3304      	adds	r3, #4
 800b804:	f104 0715 	add.w	r7, r4, #21
 800b808:	42ba      	cmp	r2, r7
 800b80a:	bf38      	it	cc
 800b80c:	2304      	movcc	r3, #4
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	9b02      	ldr	r3, [sp, #8]
 800b812:	9103      	str	r1, [sp, #12]
 800b814:	428b      	cmp	r3, r1
 800b816:	d80c      	bhi.n	800b832 <__multiply+0x9e>
 800b818:	2e00      	cmp	r6, #0
 800b81a:	dd03      	ble.n	800b824 <__multiply+0x90>
 800b81c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b820:	2b00      	cmp	r3, #0
 800b822:	d05b      	beq.n	800b8dc <__multiply+0x148>
 800b824:	6106      	str	r6, [r0, #16]
 800b826:	b005      	add	sp, #20
 800b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82c:	f843 2b04 	str.w	r2, [r3], #4
 800b830:	e7d8      	b.n	800b7e4 <__multiply+0x50>
 800b832:	f8b1 a000 	ldrh.w	sl, [r1]
 800b836:	f1ba 0f00 	cmp.w	sl, #0
 800b83a:	d024      	beq.n	800b886 <__multiply+0xf2>
 800b83c:	f104 0e14 	add.w	lr, r4, #20
 800b840:	46a9      	mov	r9, r5
 800b842:	f04f 0c00 	mov.w	ip, #0
 800b846:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b84a:	f8d9 3000 	ldr.w	r3, [r9]
 800b84e:	fa1f fb87 	uxth.w	fp, r7
 800b852:	b29b      	uxth	r3, r3
 800b854:	fb0a 330b 	mla	r3, sl, fp, r3
 800b858:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b85c:	f8d9 7000 	ldr.w	r7, [r9]
 800b860:	4463      	add	r3, ip
 800b862:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b866:	fb0a c70b 	mla	r7, sl, fp, ip
 800b86a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b86e:	b29b      	uxth	r3, r3
 800b870:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b874:	4572      	cmp	r2, lr
 800b876:	f849 3b04 	str.w	r3, [r9], #4
 800b87a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b87e:	d8e2      	bhi.n	800b846 <__multiply+0xb2>
 800b880:	9b01      	ldr	r3, [sp, #4]
 800b882:	f845 c003 	str.w	ip, [r5, r3]
 800b886:	9b03      	ldr	r3, [sp, #12]
 800b888:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b88c:	3104      	adds	r1, #4
 800b88e:	f1b9 0f00 	cmp.w	r9, #0
 800b892:	d021      	beq.n	800b8d8 <__multiply+0x144>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	f104 0c14 	add.w	ip, r4, #20
 800b89a:	46ae      	mov	lr, r5
 800b89c:	f04f 0a00 	mov.w	sl, #0
 800b8a0:	f8bc b000 	ldrh.w	fp, [ip]
 800b8a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b8a8:	fb09 770b 	mla	r7, r9, fp, r7
 800b8ac:	4457      	add	r7, sl
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b8b4:	f84e 3b04 	str.w	r3, [lr], #4
 800b8b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b8bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8c0:	f8be 3000 	ldrh.w	r3, [lr]
 800b8c4:	fb09 330a 	mla	r3, r9, sl, r3
 800b8c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b8cc:	4562      	cmp	r2, ip
 800b8ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8d2:	d8e5      	bhi.n	800b8a0 <__multiply+0x10c>
 800b8d4:	9f01      	ldr	r7, [sp, #4]
 800b8d6:	51eb      	str	r3, [r5, r7]
 800b8d8:	3504      	adds	r5, #4
 800b8da:	e799      	b.n	800b810 <__multiply+0x7c>
 800b8dc:	3e01      	subs	r6, #1
 800b8de:	e79b      	b.n	800b818 <__multiply+0x84>
 800b8e0:	0800c805 	.word	0x0800c805
 800b8e4:	0800c887 	.word	0x0800c887

0800b8e8 <__pow5mult>:
 800b8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8ec:	4615      	mov	r5, r2
 800b8ee:	f012 0203 	ands.w	r2, r2, #3
 800b8f2:	4607      	mov	r7, r0
 800b8f4:	460e      	mov	r6, r1
 800b8f6:	d007      	beq.n	800b908 <__pow5mult+0x20>
 800b8f8:	4c25      	ldr	r4, [pc, #148]	@ (800b990 <__pow5mult+0xa8>)
 800b8fa:	3a01      	subs	r2, #1
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b902:	f7ff fe55 	bl	800b5b0 <__multadd>
 800b906:	4606      	mov	r6, r0
 800b908:	10ad      	asrs	r5, r5, #2
 800b90a:	d03d      	beq.n	800b988 <__pow5mult+0xa0>
 800b90c:	69fc      	ldr	r4, [r7, #28]
 800b90e:	b97c      	cbnz	r4, 800b930 <__pow5mult+0x48>
 800b910:	2010      	movs	r0, #16
 800b912:	f7ff fc77 	bl	800b204 <malloc>
 800b916:	4602      	mov	r2, r0
 800b918:	61f8      	str	r0, [r7, #28]
 800b91a:	b928      	cbnz	r0, 800b928 <__pow5mult+0x40>
 800b91c:	4b1d      	ldr	r3, [pc, #116]	@ (800b994 <__pow5mult+0xac>)
 800b91e:	481e      	ldr	r0, [pc, #120]	@ (800b998 <__pow5mult+0xb0>)
 800b920:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b924:	f000 fc9c 	bl	800c260 <__assert_func>
 800b928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b92c:	6004      	str	r4, [r0, #0]
 800b92e:	60c4      	str	r4, [r0, #12]
 800b930:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b938:	b94c      	cbnz	r4, 800b94e <__pow5mult+0x66>
 800b93a:	f240 2171 	movw	r1, #625	@ 0x271
 800b93e:	4638      	mov	r0, r7
 800b940:	f7ff ff12 	bl	800b768 <__i2b>
 800b944:	2300      	movs	r3, #0
 800b946:	f8c8 0008 	str.w	r0, [r8, #8]
 800b94a:	4604      	mov	r4, r0
 800b94c:	6003      	str	r3, [r0, #0]
 800b94e:	f04f 0900 	mov.w	r9, #0
 800b952:	07eb      	lsls	r3, r5, #31
 800b954:	d50a      	bpl.n	800b96c <__pow5mult+0x84>
 800b956:	4631      	mov	r1, r6
 800b958:	4622      	mov	r2, r4
 800b95a:	4638      	mov	r0, r7
 800b95c:	f7ff ff1a 	bl	800b794 <__multiply>
 800b960:	4631      	mov	r1, r6
 800b962:	4680      	mov	r8, r0
 800b964:	4638      	mov	r0, r7
 800b966:	f7ff fe01 	bl	800b56c <_Bfree>
 800b96a:	4646      	mov	r6, r8
 800b96c:	106d      	asrs	r5, r5, #1
 800b96e:	d00b      	beq.n	800b988 <__pow5mult+0xa0>
 800b970:	6820      	ldr	r0, [r4, #0]
 800b972:	b938      	cbnz	r0, 800b984 <__pow5mult+0x9c>
 800b974:	4622      	mov	r2, r4
 800b976:	4621      	mov	r1, r4
 800b978:	4638      	mov	r0, r7
 800b97a:	f7ff ff0b 	bl	800b794 <__multiply>
 800b97e:	6020      	str	r0, [r4, #0]
 800b980:	f8c0 9000 	str.w	r9, [r0]
 800b984:	4604      	mov	r4, r0
 800b986:	e7e4      	b.n	800b952 <__pow5mult+0x6a>
 800b988:	4630      	mov	r0, r6
 800b98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b98e:	bf00      	nop
 800b990:	0800c8e0 	.word	0x0800c8e0
 800b994:	0800c796 	.word	0x0800c796
 800b998:	0800c887 	.word	0x0800c887

0800b99c <__lshift>:
 800b99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	6849      	ldr	r1, [r1, #4]
 800b9a4:	6923      	ldr	r3, [r4, #16]
 800b9a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9aa:	68a3      	ldr	r3, [r4, #8]
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	4691      	mov	r9, r2
 800b9b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9b4:	f108 0601 	add.w	r6, r8, #1
 800b9b8:	42b3      	cmp	r3, r6
 800b9ba:	db0b      	blt.n	800b9d4 <__lshift+0x38>
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f7ff fd95 	bl	800b4ec <_Balloc>
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	b948      	cbnz	r0, 800b9da <__lshift+0x3e>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	4b28      	ldr	r3, [pc, #160]	@ (800ba6c <__lshift+0xd0>)
 800b9ca:	4829      	ldr	r0, [pc, #164]	@ (800ba70 <__lshift+0xd4>)
 800b9cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b9d0:	f000 fc46 	bl	800c260 <__assert_func>
 800b9d4:	3101      	adds	r1, #1
 800b9d6:	005b      	lsls	r3, r3, #1
 800b9d8:	e7ee      	b.n	800b9b8 <__lshift+0x1c>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	f100 0114 	add.w	r1, r0, #20
 800b9e0:	f100 0210 	add.w	r2, r0, #16
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	4553      	cmp	r3, sl
 800b9e8:	db33      	blt.n	800ba52 <__lshift+0xb6>
 800b9ea:	6920      	ldr	r0, [r4, #16]
 800b9ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9f0:	f104 0314 	add.w	r3, r4, #20
 800b9f4:	f019 091f 	ands.w	r9, r9, #31
 800b9f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba00:	d02b      	beq.n	800ba5a <__lshift+0xbe>
 800ba02:	f1c9 0e20 	rsb	lr, r9, #32
 800ba06:	468a      	mov	sl, r1
 800ba08:	2200      	movs	r2, #0
 800ba0a:	6818      	ldr	r0, [r3, #0]
 800ba0c:	fa00 f009 	lsl.w	r0, r0, r9
 800ba10:	4310      	orrs	r0, r2
 800ba12:	f84a 0b04 	str.w	r0, [sl], #4
 800ba16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba1a:	459c      	cmp	ip, r3
 800ba1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba20:	d8f3      	bhi.n	800ba0a <__lshift+0x6e>
 800ba22:	ebac 0304 	sub.w	r3, ip, r4
 800ba26:	3b15      	subs	r3, #21
 800ba28:	f023 0303 	bic.w	r3, r3, #3
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	f104 0015 	add.w	r0, r4, #21
 800ba32:	4584      	cmp	ip, r0
 800ba34:	bf38      	it	cc
 800ba36:	2304      	movcc	r3, #4
 800ba38:	50ca      	str	r2, [r1, r3]
 800ba3a:	b10a      	cbz	r2, 800ba40 <__lshift+0xa4>
 800ba3c:	f108 0602 	add.w	r6, r8, #2
 800ba40:	3e01      	subs	r6, #1
 800ba42:	4638      	mov	r0, r7
 800ba44:	612e      	str	r6, [r5, #16]
 800ba46:	4621      	mov	r1, r4
 800ba48:	f7ff fd90 	bl	800b56c <_Bfree>
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba56:	3301      	adds	r3, #1
 800ba58:	e7c5      	b.n	800b9e6 <__lshift+0x4a>
 800ba5a:	3904      	subs	r1, #4
 800ba5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba64:	459c      	cmp	ip, r3
 800ba66:	d8f9      	bhi.n	800ba5c <__lshift+0xc0>
 800ba68:	e7ea      	b.n	800ba40 <__lshift+0xa4>
 800ba6a:	bf00      	nop
 800ba6c:	0800c805 	.word	0x0800c805
 800ba70:	0800c887 	.word	0x0800c887

0800ba74 <__mcmp>:
 800ba74:	690a      	ldr	r2, [r1, #16]
 800ba76:	4603      	mov	r3, r0
 800ba78:	6900      	ldr	r0, [r0, #16]
 800ba7a:	1a80      	subs	r0, r0, r2
 800ba7c:	b530      	push	{r4, r5, lr}
 800ba7e:	d10e      	bne.n	800ba9e <__mcmp+0x2a>
 800ba80:	3314      	adds	r3, #20
 800ba82:	3114      	adds	r1, #20
 800ba84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba94:	4295      	cmp	r5, r2
 800ba96:	d003      	beq.n	800baa0 <__mcmp+0x2c>
 800ba98:	d205      	bcs.n	800baa6 <__mcmp+0x32>
 800ba9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba9e:	bd30      	pop	{r4, r5, pc}
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	d3f3      	bcc.n	800ba8c <__mcmp+0x18>
 800baa4:	e7fb      	b.n	800ba9e <__mcmp+0x2a>
 800baa6:	2001      	movs	r0, #1
 800baa8:	e7f9      	b.n	800ba9e <__mcmp+0x2a>
	...

0800baac <__mdiff>:
 800baac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab0:	4689      	mov	r9, r1
 800bab2:	4606      	mov	r6, r0
 800bab4:	4611      	mov	r1, r2
 800bab6:	4648      	mov	r0, r9
 800bab8:	4614      	mov	r4, r2
 800baba:	f7ff ffdb 	bl	800ba74 <__mcmp>
 800babe:	1e05      	subs	r5, r0, #0
 800bac0:	d112      	bne.n	800bae8 <__mdiff+0x3c>
 800bac2:	4629      	mov	r1, r5
 800bac4:	4630      	mov	r0, r6
 800bac6:	f7ff fd11 	bl	800b4ec <_Balloc>
 800baca:	4602      	mov	r2, r0
 800bacc:	b928      	cbnz	r0, 800bada <__mdiff+0x2e>
 800bace:	4b3f      	ldr	r3, [pc, #252]	@ (800bbcc <__mdiff+0x120>)
 800bad0:	f240 2137 	movw	r1, #567	@ 0x237
 800bad4:	483e      	ldr	r0, [pc, #248]	@ (800bbd0 <__mdiff+0x124>)
 800bad6:	f000 fbc3 	bl	800c260 <__assert_func>
 800bada:	2301      	movs	r3, #1
 800badc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bae0:	4610      	mov	r0, r2
 800bae2:	b003      	add	sp, #12
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	bfbc      	itt	lt
 800baea:	464b      	movlt	r3, r9
 800baec:	46a1      	movlt	r9, r4
 800baee:	4630      	mov	r0, r6
 800baf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800baf4:	bfba      	itte	lt
 800baf6:	461c      	movlt	r4, r3
 800baf8:	2501      	movlt	r5, #1
 800bafa:	2500      	movge	r5, #0
 800bafc:	f7ff fcf6 	bl	800b4ec <_Balloc>
 800bb00:	4602      	mov	r2, r0
 800bb02:	b918      	cbnz	r0, 800bb0c <__mdiff+0x60>
 800bb04:	4b31      	ldr	r3, [pc, #196]	@ (800bbcc <__mdiff+0x120>)
 800bb06:	f240 2145 	movw	r1, #581	@ 0x245
 800bb0a:	e7e3      	b.n	800bad4 <__mdiff+0x28>
 800bb0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb10:	6926      	ldr	r6, [r4, #16]
 800bb12:	60c5      	str	r5, [r0, #12]
 800bb14:	f109 0310 	add.w	r3, r9, #16
 800bb18:	f109 0514 	add.w	r5, r9, #20
 800bb1c:	f104 0e14 	add.w	lr, r4, #20
 800bb20:	f100 0b14 	add.w	fp, r0, #20
 800bb24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb2c:	9301      	str	r3, [sp, #4]
 800bb2e:	46d9      	mov	r9, fp
 800bb30:	f04f 0c00 	mov.w	ip, #0
 800bb34:	9b01      	ldr	r3, [sp, #4]
 800bb36:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bb3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	fa1f f38a 	uxth.w	r3, sl
 800bb44:	4619      	mov	r1, r3
 800bb46:	b283      	uxth	r3, r0
 800bb48:	1acb      	subs	r3, r1, r3
 800bb4a:	0c00      	lsrs	r0, r0, #16
 800bb4c:	4463      	add	r3, ip
 800bb4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb5c:	4576      	cmp	r6, lr
 800bb5e:	f849 3b04 	str.w	r3, [r9], #4
 800bb62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb66:	d8e5      	bhi.n	800bb34 <__mdiff+0x88>
 800bb68:	1b33      	subs	r3, r6, r4
 800bb6a:	3b15      	subs	r3, #21
 800bb6c:	f023 0303 	bic.w	r3, r3, #3
 800bb70:	3415      	adds	r4, #21
 800bb72:	3304      	adds	r3, #4
 800bb74:	42a6      	cmp	r6, r4
 800bb76:	bf38      	it	cc
 800bb78:	2304      	movcc	r3, #4
 800bb7a:	441d      	add	r5, r3
 800bb7c:	445b      	add	r3, fp
 800bb7e:	461e      	mov	r6, r3
 800bb80:	462c      	mov	r4, r5
 800bb82:	4544      	cmp	r4, r8
 800bb84:	d30e      	bcc.n	800bba4 <__mdiff+0xf8>
 800bb86:	f108 0103 	add.w	r1, r8, #3
 800bb8a:	1b49      	subs	r1, r1, r5
 800bb8c:	f021 0103 	bic.w	r1, r1, #3
 800bb90:	3d03      	subs	r5, #3
 800bb92:	45a8      	cmp	r8, r5
 800bb94:	bf38      	it	cc
 800bb96:	2100      	movcc	r1, #0
 800bb98:	440b      	add	r3, r1
 800bb9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb9e:	b191      	cbz	r1, 800bbc6 <__mdiff+0x11a>
 800bba0:	6117      	str	r7, [r2, #16]
 800bba2:	e79d      	b.n	800bae0 <__mdiff+0x34>
 800bba4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bba8:	46e6      	mov	lr, ip
 800bbaa:	0c08      	lsrs	r0, r1, #16
 800bbac:	fa1c fc81 	uxtah	ip, ip, r1
 800bbb0:	4471      	add	r1, lr
 800bbb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bbb6:	b289      	uxth	r1, r1
 800bbb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bbbc:	f846 1b04 	str.w	r1, [r6], #4
 800bbc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbc4:	e7dd      	b.n	800bb82 <__mdiff+0xd6>
 800bbc6:	3f01      	subs	r7, #1
 800bbc8:	e7e7      	b.n	800bb9a <__mdiff+0xee>
 800bbca:	bf00      	nop
 800bbcc:	0800c805 	.word	0x0800c805
 800bbd0:	0800c887 	.word	0x0800c887

0800bbd4 <__ulp>:
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	ed8d 0b00 	vstr	d0, [sp]
 800bbda:	9a01      	ldr	r2, [sp, #4]
 800bbdc:	4b0f      	ldr	r3, [pc, #60]	@ (800bc1c <__ulp+0x48>)
 800bbde:	4013      	ands	r3, r2
 800bbe0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	dc08      	bgt.n	800bbfa <__ulp+0x26>
 800bbe8:	425b      	negs	r3, r3
 800bbea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bbee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bbf2:	da04      	bge.n	800bbfe <__ulp+0x2a>
 800bbf4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bbf8:	4113      	asrs	r3, r2
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	e008      	b.n	800bc10 <__ulp+0x3c>
 800bbfe:	f1a2 0314 	sub.w	r3, r2, #20
 800bc02:	2b1e      	cmp	r3, #30
 800bc04:	bfda      	itte	le
 800bc06:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bc0a:	40da      	lsrle	r2, r3
 800bc0c:	2201      	movgt	r2, #1
 800bc0e:	2300      	movs	r3, #0
 800bc10:	4619      	mov	r1, r3
 800bc12:	4610      	mov	r0, r2
 800bc14:	ec41 0b10 	vmov	d0, r0, r1
 800bc18:	b002      	add	sp, #8
 800bc1a:	4770      	bx	lr
 800bc1c:	7ff00000 	.word	0x7ff00000

0800bc20 <__b2d>:
 800bc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc24:	6906      	ldr	r6, [r0, #16]
 800bc26:	f100 0814 	add.w	r8, r0, #20
 800bc2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bc2e:	1f37      	subs	r7, r6, #4
 800bc30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc34:	4610      	mov	r0, r2
 800bc36:	f7ff fd4b 	bl	800b6d0 <__hi0bits>
 800bc3a:	f1c0 0320 	rsb	r3, r0, #32
 800bc3e:	280a      	cmp	r0, #10
 800bc40:	600b      	str	r3, [r1, #0]
 800bc42:	491b      	ldr	r1, [pc, #108]	@ (800bcb0 <__b2d+0x90>)
 800bc44:	dc15      	bgt.n	800bc72 <__b2d+0x52>
 800bc46:	f1c0 0c0b 	rsb	ip, r0, #11
 800bc4a:	fa22 f30c 	lsr.w	r3, r2, ip
 800bc4e:	45b8      	cmp	r8, r7
 800bc50:	ea43 0501 	orr.w	r5, r3, r1
 800bc54:	bf34      	ite	cc
 800bc56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc5a:	2300      	movcs	r3, #0
 800bc5c:	3015      	adds	r0, #21
 800bc5e:	fa02 f000 	lsl.w	r0, r2, r0
 800bc62:	fa23 f30c 	lsr.w	r3, r3, ip
 800bc66:	4303      	orrs	r3, r0
 800bc68:	461c      	mov	r4, r3
 800bc6a:	ec45 4b10 	vmov	d0, r4, r5
 800bc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc72:	45b8      	cmp	r8, r7
 800bc74:	bf3a      	itte	cc
 800bc76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc7a:	f1a6 0708 	subcc.w	r7, r6, #8
 800bc7e:	2300      	movcs	r3, #0
 800bc80:	380b      	subs	r0, #11
 800bc82:	d012      	beq.n	800bcaa <__b2d+0x8a>
 800bc84:	f1c0 0120 	rsb	r1, r0, #32
 800bc88:	fa23 f401 	lsr.w	r4, r3, r1
 800bc8c:	4082      	lsls	r2, r0
 800bc8e:	4322      	orrs	r2, r4
 800bc90:	4547      	cmp	r7, r8
 800bc92:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bc96:	bf8c      	ite	hi
 800bc98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bc9c:	2200      	movls	r2, #0
 800bc9e:	4083      	lsls	r3, r0
 800bca0:	40ca      	lsrs	r2, r1
 800bca2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bca6:	4313      	orrs	r3, r2
 800bca8:	e7de      	b.n	800bc68 <__b2d+0x48>
 800bcaa:	ea42 0501 	orr.w	r5, r2, r1
 800bcae:	e7db      	b.n	800bc68 <__b2d+0x48>
 800bcb0:	3ff00000 	.word	0x3ff00000

0800bcb4 <__d2b>:
 800bcb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcb8:	460f      	mov	r7, r1
 800bcba:	2101      	movs	r1, #1
 800bcbc:	ec59 8b10 	vmov	r8, r9, d0
 800bcc0:	4616      	mov	r6, r2
 800bcc2:	f7ff fc13 	bl	800b4ec <_Balloc>
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	b930      	cbnz	r0, 800bcd8 <__d2b+0x24>
 800bcca:	4602      	mov	r2, r0
 800bccc:	4b23      	ldr	r3, [pc, #140]	@ (800bd5c <__d2b+0xa8>)
 800bcce:	4824      	ldr	r0, [pc, #144]	@ (800bd60 <__d2b+0xac>)
 800bcd0:	f240 310f 	movw	r1, #783	@ 0x30f
 800bcd4:	f000 fac4 	bl	800c260 <__assert_func>
 800bcd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bce0:	b10d      	cbz	r5, 800bce6 <__d2b+0x32>
 800bce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	f1b8 0300 	subs.w	r3, r8, #0
 800bcec:	d023      	beq.n	800bd36 <__d2b+0x82>
 800bcee:	4668      	mov	r0, sp
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	f7ff fd0c 	bl	800b70e <__lo0bits>
 800bcf6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bcfa:	b1d0      	cbz	r0, 800bd32 <__d2b+0x7e>
 800bcfc:	f1c0 0320 	rsb	r3, r0, #32
 800bd00:	fa02 f303 	lsl.w	r3, r2, r3
 800bd04:	430b      	orrs	r3, r1
 800bd06:	40c2      	lsrs	r2, r0
 800bd08:	6163      	str	r3, [r4, #20]
 800bd0a:	9201      	str	r2, [sp, #4]
 800bd0c:	9b01      	ldr	r3, [sp, #4]
 800bd0e:	61a3      	str	r3, [r4, #24]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	bf0c      	ite	eq
 800bd14:	2201      	moveq	r2, #1
 800bd16:	2202      	movne	r2, #2
 800bd18:	6122      	str	r2, [r4, #16]
 800bd1a:	b1a5      	cbz	r5, 800bd46 <__d2b+0x92>
 800bd1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bd20:	4405      	add	r5, r0
 800bd22:	603d      	str	r5, [r7, #0]
 800bd24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bd28:	6030      	str	r0, [r6, #0]
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	b003      	add	sp, #12
 800bd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd32:	6161      	str	r1, [r4, #20]
 800bd34:	e7ea      	b.n	800bd0c <__d2b+0x58>
 800bd36:	a801      	add	r0, sp, #4
 800bd38:	f7ff fce9 	bl	800b70e <__lo0bits>
 800bd3c:	9b01      	ldr	r3, [sp, #4]
 800bd3e:	6163      	str	r3, [r4, #20]
 800bd40:	3020      	adds	r0, #32
 800bd42:	2201      	movs	r2, #1
 800bd44:	e7e8      	b.n	800bd18 <__d2b+0x64>
 800bd46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bd4e:	6038      	str	r0, [r7, #0]
 800bd50:	6918      	ldr	r0, [r3, #16]
 800bd52:	f7ff fcbd 	bl	800b6d0 <__hi0bits>
 800bd56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd5a:	e7e5      	b.n	800bd28 <__d2b+0x74>
 800bd5c:	0800c805 	.word	0x0800c805
 800bd60:	0800c887 	.word	0x0800c887

0800bd64 <__ratio>:
 800bd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd68:	b085      	sub	sp, #20
 800bd6a:	e9cd 1000 	strd	r1, r0, [sp]
 800bd6e:	a902      	add	r1, sp, #8
 800bd70:	f7ff ff56 	bl	800bc20 <__b2d>
 800bd74:	9800      	ldr	r0, [sp, #0]
 800bd76:	a903      	add	r1, sp, #12
 800bd78:	ec55 4b10 	vmov	r4, r5, d0
 800bd7c:	f7ff ff50 	bl	800bc20 <__b2d>
 800bd80:	9b01      	ldr	r3, [sp, #4]
 800bd82:	6919      	ldr	r1, [r3, #16]
 800bd84:	9b00      	ldr	r3, [sp, #0]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	1ac9      	subs	r1, r1, r3
 800bd8a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bd8e:	1a9b      	subs	r3, r3, r2
 800bd90:	ec5b ab10 	vmov	sl, fp, d0
 800bd94:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	bfce      	itee	gt
 800bd9c:	462a      	movgt	r2, r5
 800bd9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bda2:	465a      	movle	r2, fp
 800bda4:	462f      	mov	r7, r5
 800bda6:	46d9      	mov	r9, fp
 800bda8:	bfcc      	ite	gt
 800bdaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bdae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bdb2:	464b      	mov	r3, r9
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	4639      	mov	r1, r7
 800bdba:	f7f4 fd47 	bl	800084c <__aeabi_ddiv>
 800bdbe:	ec41 0b10 	vmov	d0, r0, r1
 800bdc2:	b005      	add	sp, #20
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdc8 <__copybits>:
 800bdc8:	3901      	subs	r1, #1
 800bdca:	b570      	push	{r4, r5, r6, lr}
 800bdcc:	1149      	asrs	r1, r1, #5
 800bdce:	6914      	ldr	r4, [r2, #16]
 800bdd0:	3101      	adds	r1, #1
 800bdd2:	f102 0314 	add.w	r3, r2, #20
 800bdd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bdda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bdde:	1f05      	subs	r5, r0, #4
 800bde0:	42a3      	cmp	r3, r4
 800bde2:	d30c      	bcc.n	800bdfe <__copybits+0x36>
 800bde4:	1aa3      	subs	r3, r4, r2
 800bde6:	3b11      	subs	r3, #17
 800bde8:	f023 0303 	bic.w	r3, r3, #3
 800bdec:	3211      	adds	r2, #17
 800bdee:	42a2      	cmp	r2, r4
 800bdf0:	bf88      	it	hi
 800bdf2:	2300      	movhi	r3, #0
 800bdf4:	4418      	add	r0, r3
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4288      	cmp	r0, r1
 800bdfa:	d305      	bcc.n	800be08 <__copybits+0x40>
 800bdfc:	bd70      	pop	{r4, r5, r6, pc}
 800bdfe:	f853 6b04 	ldr.w	r6, [r3], #4
 800be02:	f845 6f04 	str.w	r6, [r5, #4]!
 800be06:	e7eb      	b.n	800bde0 <__copybits+0x18>
 800be08:	f840 3b04 	str.w	r3, [r0], #4
 800be0c:	e7f4      	b.n	800bdf8 <__copybits+0x30>

0800be0e <__any_on>:
 800be0e:	f100 0214 	add.w	r2, r0, #20
 800be12:	6900      	ldr	r0, [r0, #16]
 800be14:	114b      	asrs	r3, r1, #5
 800be16:	4298      	cmp	r0, r3
 800be18:	b510      	push	{r4, lr}
 800be1a:	db11      	blt.n	800be40 <__any_on+0x32>
 800be1c:	dd0a      	ble.n	800be34 <__any_on+0x26>
 800be1e:	f011 011f 	ands.w	r1, r1, #31
 800be22:	d007      	beq.n	800be34 <__any_on+0x26>
 800be24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be28:	fa24 f001 	lsr.w	r0, r4, r1
 800be2c:	fa00 f101 	lsl.w	r1, r0, r1
 800be30:	428c      	cmp	r4, r1
 800be32:	d10b      	bne.n	800be4c <__any_on+0x3e>
 800be34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be38:	4293      	cmp	r3, r2
 800be3a:	d803      	bhi.n	800be44 <__any_on+0x36>
 800be3c:	2000      	movs	r0, #0
 800be3e:	bd10      	pop	{r4, pc}
 800be40:	4603      	mov	r3, r0
 800be42:	e7f7      	b.n	800be34 <__any_on+0x26>
 800be44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be48:	2900      	cmp	r1, #0
 800be4a:	d0f5      	beq.n	800be38 <__any_on+0x2a>
 800be4c:	2001      	movs	r0, #1
 800be4e:	e7f6      	b.n	800be3e <__any_on+0x30>

0800be50 <__sread>:
 800be50:	b510      	push	{r4, lr}
 800be52:	460c      	mov	r4, r1
 800be54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be58:	f000 f9ce 	bl	800c1f8 <_read_r>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	bfab      	itete	ge
 800be60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be62:	89a3      	ldrhlt	r3, [r4, #12]
 800be64:	181b      	addge	r3, r3, r0
 800be66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be6a:	bfac      	ite	ge
 800be6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be6e:	81a3      	strhlt	r3, [r4, #12]
 800be70:	bd10      	pop	{r4, pc}

0800be72 <__swrite>:
 800be72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be76:	461f      	mov	r7, r3
 800be78:	898b      	ldrh	r3, [r1, #12]
 800be7a:	05db      	lsls	r3, r3, #23
 800be7c:	4605      	mov	r5, r0
 800be7e:	460c      	mov	r4, r1
 800be80:	4616      	mov	r6, r2
 800be82:	d505      	bpl.n	800be90 <__swrite+0x1e>
 800be84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be88:	2302      	movs	r3, #2
 800be8a:	2200      	movs	r2, #0
 800be8c:	f000 f9a2 	bl	800c1d4 <_lseek_r>
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be9a:	81a3      	strh	r3, [r4, #12]
 800be9c:	4632      	mov	r2, r6
 800be9e:	463b      	mov	r3, r7
 800bea0:	4628      	mov	r0, r5
 800bea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bea6:	f000 b9c9 	b.w	800c23c <_write_r>

0800beaa <__sseek>:
 800beaa:	b510      	push	{r4, lr}
 800beac:	460c      	mov	r4, r1
 800beae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb2:	f000 f98f 	bl	800c1d4 <_lseek_r>
 800beb6:	1c43      	adds	r3, r0, #1
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	bf15      	itete	ne
 800bebc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bebe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bec6:	81a3      	strheq	r3, [r4, #12]
 800bec8:	bf18      	it	ne
 800beca:	81a3      	strhne	r3, [r4, #12]
 800becc:	bd10      	pop	{r4, pc}

0800bece <__sclose>:
 800bece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed2:	f000 b94d 	b.w	800c170 <_close_r>

0800bed6 <_realloc_r>:
 800bed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beda:	4680      	mov	r8, r0
 800bedc:	4615      	mov	r5, r2
 800bede:	460c      	mov	r4, r1
 800bee0:	b921      	cbnz	r1, 800beec <_realloc_r+0x16>
 800bee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bee6:	4611      	mov	r1, r2
 800bee8:	f7ff b9b6 	b.w	800b258 <_malloc_r>
 800beec:	b92a      	cbnz	r2, 800befa <_realloc_r+0x24>
 800beee:	f000 f9e9 	bl	800c2c4 <_free_r>
 800bef2:	2400      	movs	r4, #0
 800bef4:	4620      	mov	r0, r4
 800bef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befa:	f000 fa2d 	bl	800c358 <_malloc_usable_size_r>
 800befe:	4285      	cmp	r5, r0
 800bf00:	4606      	mov	r6, r0
 800bf02:	d802      	bhi.n	800bf0a <_realloc_r+0x34>
 800bf04:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bf08:	d8f4      	bhi.n	800bef4 <_realloc_r+0x1e>
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	f7ff f9a3 	bl	800b258 <_malloc_r>
 800bf12:	4607      	mov	r7, r0
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d0ec      	beq.n	800bef2 <_realloc_r+0x1c>
 800bf18:	42b5      	cmp	r5, r6
 800bf1a:	462a      	mov	r2, r5
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	bf28      	it	cs
 800bf20:	4632      	movcs	r2, r6
 800bf22:	f7fd fd30 	bl	8009986 <memcpy>
 800bf26:	4621      	mov	r1, r4
 800bf28:	4640      	mov	r0, r8
 800bf2a:	f000 f9cb 	bl	800c2c4 <_free_r>
 800bf2e:	463c      	mov	r4, r7
 800bf30:	e7e0      	b.n	800bef4 <_realloc_r+0x1e>

0800bf32 <__swbuf_r>:
 800bf32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf34:	460e      	mov	r6, r1
 800bf36:	4614      	mov	r4, r2
 800bf38:	4605      	mov	r5, r0
 800bf3a:	b118      	cbz	r0, 800bf44 <__swbuf_r+0x12>
 800bf3c:	6a03      	ldr	r3, [r0, #32]
 800bf3e:	b90b      	cbnz	r3, 800bf44 <__swbuf_r+0x12>
 800bf40:	f7fc fdaa 	bl	8008a98 <__sinit>
 800bf44:	69a3      	ldr	r3, [r4, #24]
 800bf46:	60a3      	str	r3, [r4, #8]
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	071a      	lsls	r2, r3, #28
 800bf4c:	d501      	bpl.n	800bf52 <__swbuf_r+0x20>
 800bf4e:	6923      	ldr	r3, [r4, #16]
 800bf50:	b943      	cbnz	r3, 800bf64 <__swbuf_r+0x32>
 800bf52:	4621      	mov	r1, r4
 800bf54:	4628      	mov	r0, r5
 800bf56:	f000 f82b 	bl	800bfb0 <__swsetup_r>
 800bf5a:	b118      	cbz	r0, 800bf64 <__swbuf_r+0x32>
 800bf5c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bf60:	4638      	mov	r0, r7
 800bf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	6922      	ldr	r2, [r4, #16]
 800bf68:	1a98      	subs	r0, r3, r2
 800bf6a:	6963      	ldr	r3, [r4, #20]
 800bf6c:	b2f6      	uxtb	r6, r6
 800bf6e:	4283      	cmp	r3, r0
 800bf70:	4637      	mov	r7, r6
 800bf72:	dc05      	bgt.n	800bf80 <__swbuf_r+0x4e>
 800bf74:	4621      	mov	r1, r4
 800bf76:	4628      	mov	r0, r5
 800bf78:	f7ff fa84 	bl	800b484 <_fflush_r>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d1ed      	bne.n	800bf5c <__swbuf_r+0x2a>
 800bf80:	68a3      	ldr	r3, [r4, #8]
 800bf82:	3b01      	subs	r3, #1
 800bf84:	60a3      	str	r3, [r4, #8]
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	6022      	str	r2, [r4, #0]
 800bf8c:	701e      	strb	r6, [r3, #0]
 800bf8e:	6962      	ldr	r2, [r4, #20]
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d004      	beq.n	800bfa0 <__swbuf_r+0x6e>
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	07db      	lsls	r3, r3, #31
 800bf9a:	d5e1      	bpl.n	800bf60 <__swbuf_r+0x2e>
 800bf9c:	2e0a      	cmp	r6, #10
 800bf9e:	d1df      	bne.n	800bf60 <__swbuf_r+0x2e>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	f7ff fa6e 	bl	800b484 <_fflush_r>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d0d9      	beq.n	800bf60 <__swbuf_r+0x2e>
 800bfac:	e7d6      	b.n	800bf5c <__swbuf_r+0x2a>
	...

0800bfb0 <__swsetup_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4b29      	ldr	r3, [pc, #164]	@ (800c058 <__swsetup_r+0xa8>)
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	6818      	ldr	r0, [r3, #0]
 800bfb8:	460c      	mov	r4, r1
 800bfba:	b118      	cbz	r0, 800bfc4 <__swsetup_r+0x14>
 800bfbc:	6a03      	ldr	r3, [r0, #32]
 800bfbe:	b90b      	cbnz	r3, 800bfc4 <__swsetup_r+0x14>
 800bfc0:	f7fc fd6a 	bl	8008a98 <__sinit>
 800bfc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc8:	0719      	lsls	r1, r3, #28
 800bfca:	d422      	bmi.n	800c012 <__swsetup_r+0x62>
 800bfcc:	06da      	lsls	r2, r3, #27
 800bfce:	d407      	bmi.n	800bfe0 <__swsetup_r+0x30>
 800bfd0:	2209      	movs	r2, #9
 800bfd2:	602a      	str	r2, [r5, #0]
 800bfd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfd8:	81a3      	strh	r3, [r4, #12]
 800bfda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfde:	e033      	b.n	800c048 <__swsetup_r+0x98>
 800bfe0:	0758      	lsls	r0, r3, #29
 800bfe2:	d512      	bpl.n	800c00a <__swsetup_r+0x5a>
 800bfe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfe6:	b141      	cbz	r1, 800bffa <__swsetup_r+0x4a>
 800bfe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfec:	4299      	cmp	r1, r3
 800bfee:	d002      	beq.n	800bff6 <__swsetup_r+0x46>
 800bff0:	4628      	mov	r0, r5
 800bff2:	f000 f967 	bl	800c2c4 <_free_r>
 800bff6:	2300      	movs	r3, #0
 800bff8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	2300      	movs	r3, #0
 800c004:	6063      	str	r3, [r4, #4]
 800c006:	6923      	ldr	r3, [r4, #16]
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f043 0308 	orr.w	r3, r3, #8
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	b94b      	cbnz	r3, 800c02a <__swsetup_r+0x7a>
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c020:	d003      	beq.n	800c02a <__swsetup_r+0x7a>
 800c022:	4621      	mov	r1, r4
 800c024:	4628      	mov	r0, r5
 800c026:	f000 f84c 	bl	800c0c2 <__smakebuf_r>
 800c02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c02e:	f013 0201 	ands.w	r2, r3, #1
 800c032:	d00a      	beq.n	800c04a <__swsetup_r+0x9a>
 800c034:	2200      	movs	r2, #0
 800c036:	60a2      	str	r2, [r4, #8]
 800c038:	6962      	ldr	r2, [r4, #20]
 800c03a:	4252      	negs	r2, r2
 800c03c:	61a2      	str	r2, [r4, #24]
 800c03e:	6922      	ldr	r2, [r4, #16]
 800c040:	b942      	cbnz	r2, 800c054 <__swsetup_r+0xa4>
 800c042:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c046:	d1c5      	bne.n	800bfd4 <__swsetup_r+0x24>
 800c048:	bd38      	pop	{r3, r4, r5, pc}
 800c04a:	0799      	lsls	r1, r3, #30
 800c04c:	bf58      	it	pl
 800c04e:	6962      	ldrpl	r2, [r4, #20]
 800c050:	60a2      	str	r2, [r4, #8]
 800c052:	e7f4      	b.n	800c03e <__swsetup_r+0x8e>
 800c054:	2000      	movs	r0, #0
 800c056:	e7f7      	b.n	800c048 <__swsetup_r+0x98>
 800c058:	20000188 	.word	0x20000188

0800c05c <__ascii_wctomb>:
 800c05c:	4603      	mov	r3, r0
 800c05e:	4608      	mov	r0, r1
 800c060:	b141      	cbz	r1, 800c074 <__ascii_wctomb+0x18>
 800c062:	2aff      	cmp	r2, #255	@ 0xff
 800c064:	d904      	bls.n	800c070 <__ascii_wctomb+0x14>
 800c066:	228a      	movs	r2, #138	@ 0x8a
 800c068:	601a      	str	r2, [r3, #0]
 800c06a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c06e:	4770      	bx	lr
 800c070:	700a      	strb	r2, [r1, #0]
 800c072:	2001      	movs	r0, #1
 800c074:	4770      	bx	lr

0800c076 <__swhatbuf_r>:
 800c076:	b570      	push	{r4, r5, r6, lr}
 800c078:	460c      	mov	r4, r1
 800c07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07e:	2900      	cmp	r1, #0
 800c080:	b096      	sub	sp, #88	@ 0x58
 800c082:	4615      	mov	r5, r2
 800c084:	461e      	mov	r6, r3
 800c086:	da0d      	bge.n	800c0a4 <__swhatbuf_r+0x2e>
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c08e:	f04f 0100 	mov.w	r1, #0
 800c092:	bf14      	ite	ne
 800c094:	2340      	movne	r3, #64	@ 0x40
 800c096:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c09a:	2000      	movs	r0, #0
 800c09c:	6031      	str	r1, [r6, #0]
 800c09e:	602b      	str	r3, [r5, #0]
 800c0a0:	b016      	add	sp, #88	@ 0x58
 800c0a2:	bd70      	pop	{r4, r5, r6, pc}
 800c0a4:	466a      	mov	r2, sp
 800c0a6:	f000 f873 	bl	800c190 <_fstat_r>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	dbec      	blt.n	800c088 <__swhatbuf_r+0x12>
 800c0ae:	9901      	ldr	r1, [sp, #4]
 800c0b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0b8:	4259      	negs	r1, r3
 800c0ba:	4159      	adcs	r1, r3
 800c0bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0c0:	e7eb      	b.n	800c09a <__swhatbuf_r+0x24>

0800c0c2 <__smakebuf_r>:
 800c0c2:	898b      	ldrh	r3, [r1, #12]
 800c0c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0c6:	079d      	lsls	r5, r3, #30
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	d507      	bpl.n	800c0de <__smakebuf_r+0x1c>
 800c0ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0d2:	6023      	str	r3, [r4, #0]
 800c0d4:	6123      	str	r3, [r4, #16]
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	6163      	str	r3, [r4, #20]
 800c0da:	b003      	add	sp, #12
 800c0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0de:	ab01      	add	r3, sp, #4
 800c0e0:	466a      	mov	r2, sp
 800c0e2:	f7ff ffc8 	bl	800c076 <__swhatbuf_r>
 800c0e6:	9f00      	ldr	r7, [sp, #0]
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	4639      	mov	r1, r7
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f7ff f8b3 	bl	800b258 <_malloc_r>
 800c0f2:	b948      	cbnz	r0, 800c108 <__smakebuf_r+0x46>
 800c0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f8:	059a      	lsls	r2, r3, #22
 800c0fa:	d4ee      	bmi.n	800c0da <__smakebuf_r+0x18>
 800c0fc:	f023 0303 	bic.w	r3, r3, #3
 800c100:	f043 0302 	orr.w	r3, r3, #2
 800c104:	81a3      	strh	r3, [r4, #12]
 800c106:	e7e2      	b.n	800c0ce <__smakebuf_r+0xc>
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	6020      	str	r0, [r4, #0]
 800c10c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	9b01      	ldr	r3, [sp, #4]
 800c114:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c118:	b15b      	cbz	r3, 800c132 <__smakebuf_r+0x70>
 800c11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c11e:	4630      	mov	r0, r6
 800c120:	f000 f848 	bl	800c1b4 <_isatty_r>
 800c124:	b128      	cbz	r0, 800c132 <__smakebuf_r+0x70>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	f023 0303 	bic.w	r3, r3, #3
 800c12c:	f043 0301 	orr.w	r3, r3, #1
 800c130:	81a3      	strh	r3, [r4, #12]
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	431d      	orrs	r5, r3
 800c136:	81a5      	strh	r5, [r4, #12]
 800c138:	e7cf      	b.n	800c0da <__smakebuf_r+0x18>

0800c13a <memmove>:
 800c13a:	4288      	cmp	r0, r1
 800c13c:	b510      	push	{r4, lr}
 800c13e:	eb01 0402 	add.w	r4, r1, r2
 800c142:	d902      	bls.n	800c14a <memmove+0x10>
 800c144:	4284      	cmp	r4, r0
 800c146:	4623      	mov	r3, r4
 800c148:	d807      	bhi.n	800c15a <memmove+0x20>
 800c14a:	1e43      	subs	r3, r0, #1
 800c14c:	42a1      	cmp	r1, r4
 800c14e:	d008      	beq.n	800c162 <memmove+0x28>
 800c150:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c154:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c158:	e7f8      	b.n	800c14c <memmove+0x12>
 800c15a:	4402      	add	r2, r0
 800c15c:	4601      	mov	r1, r0
 800c15e:	428a      	cmp	r2, r1
 800c160:	d100      	bne.n	800c164 <memmove+0x2a>
 800c162:	bd10      	pop	{r4, pc}
 800c164:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c168:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c16c:	e7f7      	b.n	800c15e <memmove+0x24>
	...

0800c170 <_close_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d06      	ldr	r5, [pc, #24]	@ (800c18c <_close_r+0x1c>)
 800c174:	2300      	movs	r3, #0
 800c176:	4604      	mov	r4, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	602b      	str	r3, [r5, #0]
 800c17c:	f7f5 fc7c 	bl	8001a78 <_close>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	d102      	bne.n	800c18a <_close_r+0x1a>
 800c184:	682b      	ldr	r3, [r5, #0]
 800c186:	b103      	cbz	r3, 800c18a <_close_r+0x1a>
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	20001db0 	.word	0x20001db0

0800c190 <_fstat_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d07      	ldr	r5, [pc, #28]	@ (800c1b0 <_fstat_r+0x20>)
 800c194:	2300      	movs	r3, #0
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	4611      	mov	r1, r2
 800c19c:	602b      	str	r3, [r5, #0]
 800c19e:	f7f5 fc77 	bl	8001a90 <_fstat>
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	d102      	bne.n	800c1ac <_fstat_r+0x1c>
 800c1a6:	682b      	ldr	r3, [r5, #0]
 800c1a8:	b103      	cbz	r3, 800c1ac <_fstat_r+0x1c>
 800c1aa:	6023      	str	r3, [r4, #0]
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20001db0 	.word	0x20001db0

0800c1b4 <_isatty_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d06      	ldr	r5, [pc, #24]	@ (800c1d0 <_isatty_r+0x1c>)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	f7f5 fc76 	bl	8001ab0 <_isatty>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <_isatty_r+0x1a>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	b103      	cbz	r3, 800c1ce <_isatty_r+0x1a>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	20001db0 	.word	0x20001db0

0800c1d4 <_lseek_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d07      	ldr	r5, [pc, #28]	@ (800c1f4 <_lseek_r+0x20>)
 800c1d8:	4604      	mov	r4, r0
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4611      	mov	r1, r2
 800c1de:	2200      	movs	r2, #0
 800c1e0:	602a      	str	r2, [r5, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f7f5 fc6f 	bl	8001ac6 <_lseek>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d102      	bne.n	800c1f2 <_lseek_r+0x1e>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	b103      	cbz	r3, 800c1f2 <_lseek_r+0x1e>
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	20001db0 	.word	0x20001db0

0800c1f8 <_read_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d07      	ldr	r5, [pc, #28]	@ (800c218 <_read_r+0x20>)
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	4608      	mov	r0, r1
 800c200:	4611      	mov	r1, r2
 800c202:	2200      	movs	r2, #0
 800c204:	602a      	str	r2, [r5, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	f7f5 fbfd 	bl	8001a06 <_read>
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d102      	bne.n	800c216 <_read_r+0x1e>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	b103      	cbz	r3, 800c216 <_read_r+0x1e>
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	20001db0 	.word	0x20001db0

0800c21c <_sbrk_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	4d06      	ldr	r5, [pc, #24]	@ (800c238 <_sbrk_r+0x1c>)
 800c220:	2300      	movs	r3, #0
 800c222:	4604      	mov	r4, r0
 800c224:	4608      	mov	r0, r1
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	f7f5 fc5a 	bl	8001ae0 <_sbrk>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_sbrk_r+0x1a>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_sbrk_r+0x1a>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	20001db0 	.word	0x20001db0

0800c23c <_write_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	@ (800c25c <_write_r+0x20>)
 800c240:	4604      	mov	r4, r0
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7f5 fbf8 	bl	8001a40 <_write>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_write_r+0x1e>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_write_r+0x1e>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	20001db0 	.word	0x20001db0

0800c260 <__assert_func>:
 800c260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c262:	4614      	mov	r4, r2
 800c264:	461a      	mov	r2, r3
 800c266:	4b09      	ldr	r3, [pc, #36]	@ (800c28c <__assert_func+0x2c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4605      	mov	r5, r0
 800c26c:	68d8      	ldr	r0, [r3, #12]
 800c26e:	b954      	cbnz	r4, 800c286 <__assert_func+0x26>
 800c270:	4b07      	ldr	r3, [pc, #28]	@ (800c290 <__assert_func+0x30>)
 800c272:	461c      	mov	r4, r3
 800c274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c278:	9100      	str	r1, [sp, #0]
 800c27a:	462b      	mov	r3, r5
 800c27c:	4905      	ldr	r1, [pc, #20]	@ (800c294 <__assert_func+0x34>)
 800c27e:	f000 f873 	bl	800c368 <fiprintf>
 800c282:	f000 f883 	bl	800c38c <abort>
 800c286:	4b04      	ldr	r3, [pc, #16]	@ (800c298 <__assert_func+0x38>)
 800c288:	e7f4      	b.n	800c274 <__assert_func+0x14>
 800c28a:	bf00      	nop
 800c28c:	20000188 	.word	0x20000188
 800c290:	0800ca1b 	.word	0x0800ca1b
 800c294:	0800c9ed 	.word	0x0800c9ed
 800c298:	0800c9e0 	.word	0x0800c9e0

0800c29c <_calloc_r>:
 800c29c:	b570      	push	{r4, r5, r6, lr}
 800c29e:	fba1 5402 	umull	r5, r4, r1, r2
 800c2a2:	b93c      	cbnz	r4, 800c2b4 <_calloc_r+0x18>
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7fe ffd7 	bl	800b258 <_malloc_r>
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	b928      	cbnz	r0, 800c2ba <_calloc_r+0x1e>
 800c2ae:	2600      	movs	r6, #0
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	bd70      	pop	{r4, r5, r6, pc}
 800c2b4:	220c      	movs	r2, #12
 800c2b6:	6002      	str	r2, [r0, #0]
 800c2b8:	e7f9      	b.n	800c2ae <_calloc_r+0x12>
 800c2ba:	462a      	mov	r2, r5
 800c2bc:	4621      	mov	r1, r4
 800c2be:	f7fd fb29 	bl	8009914 <memset>
 800c2c2:	e7f5      	b.n	800c2b0 <_calloc_r+0x14>

0800c2c4 <_free_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	d041      	beq.n	800c350 <_free_r+0x8c>
 800c2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2d0:	1f0c      	subs	r4, r1, #4
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	bfb8      	it	lt
 800c2d6:	18e4      	addlt	r4, r4, r3
 800c2d8:	f7ff f8fc 	bl	800b4d4 <__malloc_lock>
 800c2dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c354 <_free_r+0x90>)
 800c2de:	6813      	ldr	r3, [r2, #0]
 800c2e0:	b933      	cbnz	r3, 800c2f0 <_free_r+0x2c>
 800c2e2:	6063      	str	r3, [r4, #4]
 800c2e4:	6014      	str	r4, [r2, #0]
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2ec:	f7ff b8f8 	b.w	800b4e0 <__malloc_unlock>
 800c2f0:	42a3      	cmp	r3, r4
 800c2f2:	d908      	bls.n	800c306 <_free_r+0x42>
 800c2f4:	6820      	ldr	r0, [r4, #0]
 800c2f6:	1821      	adds	r1, r4, r0
 800c2f8:	428b      	cmp	r3, r1
 800c2fa:	bf01      	itttt	eq
 800c2fc:	6819      	ldreq	r1, [r3, #0]
 800c2fe:	685b      	ldreq	r3, [r3, #4]
 800c300:	1809      	addeq	r1, r1, r0
 800c302:	6021      	streq	r1, [r4, #0]
 800c304:	e7ed      	b.n	800c2e2 <_free_r+0x1e>
 800c306:	461a      	mov	r2, r3
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	b10b      	cbz	r3, 800c310 <_free_r+0x4c>
 800c30c:	42a3      	cmp	r3, r4
 800c30e:	d9fa      	bls.n	800c306 <_free_r+0x42>
 800c310:	6811      	ldr	r1, [r2, #0]
 800c312:	1850      	adds	r0, r2, r1
 800c314:	42a0      	cmp	r0, r4
 800c316:	d10b      	bne.n	800c330 <_free_r+0x6c>
 800c318:	6820      	ldr	r0, [r4, #0]
 800c31a:	4401      	add	r1, r0
 800c31c:	1850      	adds	r0, r2, r1
 800c31e:	4283      	cmp	r3, r0
 800c320:	6011      	str	r1, [r2, #0]
 800c322:	d1e0      	bne.n	800c2e6 <_free_r+0x22>
 800c324:	6818      	ldr	r0, [r3, #0]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	6053      	str	r3, [r2, #4]
 800c32a:	4408      	add	r0, r1
 800c32c:	6010      	str	r0, [r2, #0]
 800c32e:	e7da      	b.n	800c2e6 <_free_r+0x22>
 800c330:	d902      	bls.n	800c338 <_free_r+0x74>
 800c332:	230c      	movs	r3, #12
 800c334:	602b      	str	r3, [r5, #0]
 800c336:	e7d6      	b.n	800c2e6 <_free_r+0x22>
 800c338:	6820      	ldr	r0, [r4, #0]
 800c33a:	1821      	adds	r1, r4, r0
 800c33c:	428b      	cmp	r3, r1
 800c33e:	bf04      	itt	eq
 800c340:	6819      	ldreq	r1, [r3, #0]
 800c342:	685b      	ldreq	r3, [r3, #4]
 800c344:	6063      	str	r3, [r4, #4]
 800c346:	bf04      	itt	eq
 800c348:	1809      	addeq	r1, r1, r0
 800c34a:	6021      	streq	r1, [r4, #0]
 800c34c:	6054      	str	r4, [r2, #4]
 800c34e:	e7ca      	b.n	800c2e6 <_free_r+0x22>
 800c350:	bd38      	pop	{r3, r4, r5, pc}
 800c352:	bf00      	nop
 800c354:	20001dac 	.word	0x20001dac

0800c358 <_malloc_usable_size_r>:
 800c358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c35c:	1f18      	subs	r0, r3, #4
 800c35e:	2b00      	cmp	r3, #0
 800c360:	bfbc      	itt	lt
 800c362:	580b      	ldrlt	r3, [r1, r0]
 800c364:	18c0      	addlt	r0, r0, r3
 800c366:	4770      	bx	lr

0800c368 <fiprintf>:
 800c368:	b40e      	push	{r1, r2, r3}
 800c36a:	b503      	push	{r0, r1, lr}
 800c36c:	4601      	mov	r1, r0
 800c36e:	ab03      	add	r3, sp, #12
 800c370:	4805      	ldr	r0, [pc, #20]	@ (800c388 <fiprintf+0x20>)
 800c372:	f853 2b04 	ldr.w	r2, [r3], #4
 800c376:	6800      	ldr	r0, [r0, #0]
 800c378:	9301      	str	r3, [sp, #4]
 800c37a:	f7fe fe2b 	bl	800afd4 <_vfiprintf_r>
 800c37e:	b002      	add	sp, #8
 800c380:	f85d eb04 	ldr.w	lr, [sp], #4
 800c384:	b003      	add	sp, #12
 800c386:	4770      	bx	lr
 800c388:	20000188 	.word	0x20000188

0800c38c <abort>:
 800c38c:	b508      	push	{r3, lr}
 800c38e:	2006      	movs	r0, #6
 800c390:	f000 f82c 	bl	800c3ec <raise>
 800c394:	2001      	movs	r0, #1
 800c396:	f7f5 fb2b 	bl	80019f0 <_exit>

0800c39a <_raise_r>:
 800c39a:	291f      	cmp	r1, #31
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4605      	mov	r5, r0
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	d904      	bls.n	800c3ae <_raise_r+0x14>
 800c3a4:	2316      	movs	r3, #22
 800c3a6:	6003      	str	r3, [r0, #0]
 800c3a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3ac:	bd38      	pop	{r3, r4, r5, pc}
 800c3ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3b0:	b112      	cbz	r2, 800c3b8 <_raise_r+0x1e>
 800c3b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3b6:	b94b      	cbnz	r3, 800c3cc <_raise_r+0x32>
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f000 f831 	bl	800c420 <_getpid_r>
 800c3be:	4622      	mov	r2, r4
 800c3c0:	4601      	mov	r1, r0
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3c8:	f000 b818 	b.w	800c3fc <_kill_r>
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d00a      	beq.n	800c3e6 <_raise_r+0x4c>
 800c3d0:	1c59      	adds	r1, r3, #1
 800c3d2:	d103      	bne.n	800c3dc <_raise_r+0x42>
 800c3d4:	2316      	movs	r3, #22
 800c3d6:	6003      	str	r3, [r0, #0]
 800c3d8:	2001      	movs	r0, #1
 800c3da:	e7e7      	b.n	800c3ac <_raise_r+0x12>
 800c3dc:	2100      	movs	r1, #0
 800c3de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	4798      	blx	r3
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	e7e0      	b.n	800c3ac <_raise_r+0x12>
	...

0800c3ec <raise>:
 800c3ec:	4b02      	ldr	r3, [pc, #8]	@ (800c3f8 <raise+0xc>)
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	f7ff bfd2 	b.w	800c39a <_raise_r>
 800c3f6:	bf00      	nop
 800c3f8:	20000188 	.word	0x20000188

0800c3fc <_kill_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4d07      	ldr	r5, [pc, #28]	@ (800c41c <_kill_r+0x20>)
 800c400:	2300      	movs	r3, #0
 800c402:	4604      	mov	r4, r0
 800c404:	4608      	mov	r0, r1
 800c406:	4611      	mov	r1, r2
 800c408:	602b      	str	r3, [r5, #0]
 800c40a:	f7f5 fae1 	bl	80019d0 <_kill>
 800c40e:	1c43      	adds	r3, r0, #1
 800c410:	d102      	bne.n	800c418 <_kill_r+0x1c>
 800c412:	682b      	ldr	r3, [r5, #0]
 800c414:	b103      	cbz	r3, 800c418 <_kill_r+0x1c>
 800c416:	6023      	str	r3, [r4, #0]
 800c418:	bd38      	pop	{r3, r4, r5, pc}
 800c41a:	bf00      	nop
 800c41c:	20001db0 	.word	0x20001db0

0800c420 <_getpid_r>:
 800c420:	f7f5 bace 	b.w	80019c0 <_getpid>

0800c424 <_init>:
 800c424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c426:	bf00      	nop
 800c428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c42a:	bc08      	pop	{r3}
 800c42c:	469e      	mov	lr, r3
 800c42e:	4770      	bx	lr

0800c430 <_fini>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	bf00      	nop
 800c434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c436:	bc08      	pop	{r3}
 800c438:	469e      	mov	lr, r3
 800c43a:	4770      	bx	lr
